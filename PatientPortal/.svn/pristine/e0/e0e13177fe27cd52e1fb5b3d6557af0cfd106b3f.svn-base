using AutoMapper;
using PatientPortal.API.CMS.ViewModels;
using PatientPortal.Domain.Models.CMS;
using PatientPortal.IRepository.CMS;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace PatientPortal.API.CMS.Controllers
{
    public class WorkflowStateController : ApiController
    {
        /// <summary>
        /// Declare variable
        /// </summary>
        private readonly IWorkflowStateRepo _workflowStateRepo;
        private readonly IWorkflowNavigationRepo _workflowNavigationRepo;


        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="IWorkflowStateRepo"></param>
        public WorkflowStateController(IWorkflowStateRepo workflowStateRepo, IWorkflowNavigationRepo workflowNavigationRepo)
        {
            this._workflowStateRepo = workflowStateRepo;
            _workflowNavigationRepo = workflowNavigationRepo;
        }

        #region API function

        /// <summary>
        /// get all WorkflowState
        /// </summary>
        /// <returns>list of WorkflowState</returns>
        public List<WorkflowStateViewModel> GetAll()
        {
            var source = _workflowStateRepo.GetAll();
            List<WorkflowStateViewModel> dest = Mapper.Map<List<WorkflowStateViewModel>>(source);

            return dest;
        }

        /// <summary>
        /// Get workflowstates by workflowId
        /// </summary>
        /// <param name="id">workflowId</param>
        /// <returns>list of WorkflowState</returns>
        /// 
        [HttpGet]
        [Route("api/WorkflowState/GetByWorkflowId")]
        public List<WorkflowStateViewModel> GetByWorkflowId(byte id)
        {
            var source = _workflowStateRepo.GetByWorkflowId(id);
            List<WorkflowStateViewModel> dest = Mapper.Map<List<WorkflowStateViewModel>>(source);

            return dest;
        }

        /// <summary>
        /// Action: Insert/Update/Delete workflow
        /// </summary>
        /// <param name="workflowSateModel">object "WorkflowStateViewModel"</param>
        /// <param name="action">Action: 'I' - Insert; 'U'- Update; 'D'- Delete</param>
        /// <returns>Result: Success- true; Fail- false</returns>
        [HttpPost]
        public bool Transaction(WorkflowStateViewModel workflowSateModel, char action)
        {
            var workflowState = Mapper.Map<WorkflowStateEdit>(workflowSateModel);
            var data = new List<WorkflowStateEdit>();
            data.Add(workflowState);
            return _workflowStateRepo.Transaction(data, action);
        }

        [HttpGet]
        public bool CheckExistName(string name, short id, byte workflowId)
        {
            return _workflowStateRepo.CheckExist(name, id, workflowId);
        }

        [HttpGet]
        [Route("api/WorkflowState/CheckIsUsed/{Id}")]
        public bool CheckIsUsed(short id)
        {
            return _workflowStateRepo.CheckIsUsed(id);
        }

        public WorkflowStateViewModel GetById(byte id)
        {
            var source = _workflowStateRepo.GetById(id);
            WorkflowStateViewModel dest = Mapper.Map<WorkflowStateViewModel>(source);

            return dest;
        }
        #endregion

        [HttpGet]
        [Route("api/WorkflowState/GetStateNavigation/{Id}")]
        public List<WorkflowStateViewModel> GetStateNavigation(byte id)
        {
            var listNav = _workflowNavigationRepo.GetAll();
            var listFlow = _workflowStateRepo.GetByWorkflowId(id);
            List<WorkflowState> source = new List<WorkflowState>();
            foreach (var item in listFlow)
            {
                if (item.IsFirst == true || (listNav.FirstOrDefault(a => a.NextWorkflowStateId == item.Id) != null))
                {
                    source.Add(item);
                }
            }

            List<WorkflowStateViewModel> dest = Mapper.Map<List<WorkflowStateViewModel>>(source);
            return dest;
        }
    }
}
