using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using WebApiContrib.Formatting;

namespace PatientPortal.Provider.Models
{
    public static class APIProvider
    {
        private static string apiPrefix = $"api/";

        /// <summary>
        /// Dynamic transaction
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="Q"></typeparam>
        /// <param name="data"></param>
        /// <param name="urlApi"></param>
        /// <returns></returns>
        public static async Task<Q> DynamicTransaction<T, Q>(T data, string urlApi, string applicationTag = "cms")
        {
            Uri _baseAddress = URLBuilder.APIBaseAddress("webapi:" + applicationTag);
            try
            {
                var httpClient = new HttpClient();
                httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/x-protobuf"));

                StringContent content = new StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, "application/json");
                httpClient.BaseAddress = _baseAddress;

                HttpResponseMessage response = await httpClient.PostAsync(apiPrefix + urlApi, content);

                if (!response.IsSuccessStatusCode) return default(Q); //Check status code

                return response.Content.ReadAsAsync<Q>(new[] { new ProtoBufFormatter() }).Result;
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        /// <summary>
        /// Get data from API
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="urlApi"></param>
        /// <returns></returns>
        public static async Task<T> Get<T>(string urlApi, string applicationTag = "cms")
        {
            Uri _baseAddress = URLBuilder.APIBaseAddress("webapi:" + applicationTag);
            using (var httpClient = new HttpClient())
            {
                try
                {
                    httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/x-protobuf"));
                    httpClient.BaseAddress = _baseAddress;

                    var response = await httpClient.GetAsync(apiPrefix + urlApi);

                    if (!response.IsSuccessStatusCode) return default(T); //Check status code

                    var data = response.Content.ReadAsAsync<T>(new[] { new ProtoBufFormatter() }).Result;

                    return (data == null? default(T):data);
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }


        public static async Task<T> Get<T>(string urlApi, string action, object dynamicPara, string applicationTag = "cms")
        {
            urlApi += "/" + action + "/?" + URLBuilder.GetQueryString(dynamicPara);
            Uri _baseAddress = URLBuilder.APIBaseAddress("webapi:" + applicationTag);
            using (var httpClient = new HttpClient())
            {
                try
                {
                    httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/x-protobuf"));
                    httpClient.BaseAddress = _baseAddress;

                    var response = await httpClient.GetAsync(apiPrefix + urlApi);

                    if (!response.IsSuccessStatusCode) return default(T); //Check status code

                    var data = response.Content.ReadAsAsync<T>(new[] { new ProtoBufFormatter() }).Result;

                    return (data == null ? default(T) : data);
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        /// <summary>
        /// API Generator - Transaction
        /// </summary>
        /// <param name="controllerName"></param>
        /// <param name="action"></param>
        /// <returns></returns>
        public static string APIGenerator(string controllerName, string action)
        {
            return controllerName + "?action=" + action;

        }
        public static string APIGenerator(string controllerName, string method, string action)
        {
            return controllerName + "/" + method + "?action=" + action;

        }


        /// <summary>
        /// API Genertor - Query
        /// </summary>
        /// <param name="controller"></param>
        /// <param name="methodName"></param>
        /// <param name="para"></param>
        /// <returns></returns>
        public static string APIGenerator(object controller, string methodName, params object[] para)
        {
            string parameterUrl = string.Empty;
            List<Type> types = new List<Type>();

            for (int i = 0; i < para.Length; i++)
            {
                var value = para[i];
                parameterUrl += (i == 0 ? "/" : (i == 1? "?" : "&") + i.ToString().TrimEnd() + "=") + value;

                types.Add(value.GetType());
            }

            Type[] parasType = types.ToArray();

            var method = controller.GetType().GetMethod(methodName, parasType);
            if (method != null && method.GetParameters().Length > 0)
            {
                for (int i = 1; i < method.GetParameters().Length; i++)
                {
                    var name = method.GetParameters()[i].Name.TrimEnd() + "=";
                    var searchString = i.ToString().TrimEnd() + "=";
                    parameterUrl = parameterUrl.Replace(searchString, name);
                }
            }

            return parameterUrl;
        }

        public static string APIGenerator(string controllerName, string methodName, List<string> listParaName , params object[] para)
        {
            string parameterUrl = string.Empty;
            for (int i = 0; i < para.Length; i++)
            {
                var value = para[i];
                parameterUrl += (i == 0 ? "/" : (i == 1 ? "?" : "&") + listParaName[i] + "=") + value;

            }

            return controllerName + "/" + (methodName.Length > 0? methodName + "/":"") + parameterUrl;
        }

        public static string APIGenerator(string controllerName, List<string> listParaName, params object[] para)
        {
            string parameterUrl = string.Empty;
            for (int i = 0; i < para.Length; i++)
            {
                var value = para[i];
                parameterUrl += (i == 0 ? "/" : (i == 1 ? "?" : "&") + listParaName[i] + "=") + value;

            }

            return controllerName + "/" + parameterUrl;
        }



        /// <summary>
        /// API Generator Parameters - Dynamic from API Controller
        /// </summary>
        /// <param name="listValue"></param>
        /// <param name="para"></param>
        /// <returns></returns>
        public static Dictionary<string, dynamic> APIGeneratorParameter(ICollection<string> listValue, params object[] para)
        {
            string parameterUrl = string.Empty;
            Dictionary<string, dynamic> paraList = new Dictionary<string, dynamic>();
            var paraName = listValue.ToList();

            var lengthList = listValue.Count;
            var lengthPara = para.Length;
            var variance = lengthList - lengthPara;

            for (int i = 0; i < para.Length; i++)
            {
                var value = para[i];
                var name = paraName[i + variance];
                paraList.Add(name, value);
            }

            return paraList;
        }

        /// <summary>
        /// API Generator Parameters - Manual object from API Controller
        /// </summary>
        /// <param name="listValue"></param>
        /// <param name="para"></param>
        /// <returns></returns>
        public static Dictionary<string, dynamic> APIDefaultParameter(IList<string> listValue, params object[] para)
        {
            string parameterUrl = string.Empty;
            Dictionary<string, dynamic> paraList = new Dictionary<string, dynamic>();

            for (int i = 0; i < para.Length; i++)
            {
                var value = para[i];
                var name = listValue[i];
                paraList.Add(name, value);
            }

            return paraList;
        }

       
    }
}