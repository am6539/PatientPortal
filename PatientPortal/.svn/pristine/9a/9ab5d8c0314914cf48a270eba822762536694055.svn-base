using AutoMapper;
using PatientPortal.API.SPA.ViewModels;
using PatientPortal.IRepository.SPA;
using PatientPortal.Provider.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Threading.Tasks;
using System.Web.Http;

namespace PatientPortal.API.SPA.Controllers
{
    public class GalleryController : ApiController
    {
        private readonly IGalleryRepo _iGalleryRepo;
        private readonly string PATH_IMG_GALLERY = ConfigurationManager.AppSettings["web:cms"];
        public GalleryController(IGalleryRepo iGalleryRepo)
        {
            this._iGalleryRepo = iGalleryRepo;
        }

        [HttpGet]
        public async Task<List<GalleryViewModel>> Query(byte departmentId = 0)
        {
            try
            {
                List<string> list = new List<string> { "Id", "DepartmentId" };
                Dictionary<string, dynamic> para = APIProvider.APIDefaultParameter(list, null, departmentId);
                var source = await _iGalleryRepo.Query(para);
                var results = new List<GalleryViewModel>();
                if(source != null)
                {
                    foreach (var item in source)
                    {
                        var gallery = new GalleryViewModel {
                            Id = item.Id,
                            Title = item.Title,
                            Description = item.Description,
                            Highlight = item.Highlight,
                            Img = item.Img!= null? PATH_IMG_GALLERY + item.Img.Replace("~", "").Replace(@"\", @"/").Replace(@" ", "%20"): null,
                            YoutubeURL = item.YoutubeURL,
                            Date = item.Date,
                            DepartmentId = item.DepartmentId,
                            IsMultiple = item.IsMultiple
                        };
                        results.Add(gallery);
                    }
                }
                //List<GalleryViewModel> dest = Mapper.Map<List<GalleryViewModel>>(source);
                return results;
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [HttpGet]
        public async Task<GalleryViewModel> Get(string id)
        {
            IList<string> list = new List<string> { "Id", "DepartmentId" };
            var para = APIProvider.APIDefaultParameter(list, id, 0);
            var source = await _iGalleryRepo.Get(para);
            var result = new GalleryViewModel();
            if (source != null)
            {
                result.Id = source.Id;
                result.Title = source.Title;
                result.Description = source.Description;
                result.Highlight = source.Highlight;
                result.Img = source.Img != null ? PATH_IMG_GALLERY + source.Img.Replace("~", "").Replace(@"\", @"/").Replace(@" ", "%20") : null;
                result.YoutubeURL = source.YoutubeURL;
                result.Date = source.Date;
                result.DepartmentId = source.DepartmentId;
                result.IsMultiple = source.IsMultiple;
            }
            return result;
        }
    }
}