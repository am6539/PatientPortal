using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using System.Web.Mvc;
using PatientPortal.Domain.Utilities;
using PatientPortal.Internal.Common;
using PatientPortal.Internal.Models;
using PatientPortal.Provider.Common;
using PatientPortal.Provider.Models;
using PatientPortal.Utility.Application;
using PatientPortal.Domain.Models.AUTHEN;

namespace PatientPortal.Internal.Controllers
{
    [Authorize]
    [AppHandleError]
    public class SettingController : Controller
    {
        private readonly IUserSession _userSession;
        public SettingController(IUserSession userSession)
        {
            _userSession = userSession;
        }
        private static string controllerName = string.Empty;
        // GET: Setting
        public async Task<ActionResult> Index()
        {
            controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
            var model = await APIProvider.Authorize_Get<SettingViewModel>(_userSession.BearerToken, controllerName + "/" + GlobalVariables.Id_Configuration, APIConstant.API_Resource_CORE, ARS.Get);
            if (model == null)
            {
                model = new SettingViewModel
                {
                    Id = GlobalVariables.Id_Configuration,
                    Membership = true
                };
            }
            //var roles = new List<RoleViewModel>
            //{
            //    new RoleViewModel {Id = 1, Name = "Chưa sử dụng"}
            //};
            //ViewBag.Roles = roles;
            if (model?.Keyword != null)
            {
                ViewBag.Keywords = model.Keyword;
            }

            var startTime = TimeSpan.FromMinutes(model.AppointmentStartTime);
            var fromStartTimeString = startTime.ToString("hh':'mm");
            model.AppointmentStartTimeString = fromStartTimeString;

            var endTime = TimeSpan.FromMinutes(model.AppointmentEndTime);
            var fromEndTimeString = endTime.ToString("hh':'mm");
            model.AppointmentEndTimeString = fromEndTimeString;

            return View(model);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        [ValidateAntiForgeryToken]
        [HttpPost]
        public async Task<ActionResult> Edit(SettingViewModel model)
        {
            var timeStart = TimeSpan.Parse(model.AppointmentStartTimeString);
            model.AppointmentStartTime = (int)timeStart.TotalMinutes;

            var timeEnd = TimeSpan.Parse(model.AppointmentEndTimeString);
            model.AppointmentEndTime = (int)timeEnd.TotalMinutes;

            if (ModelState.IsValid)
            {
                //Call API Provider 
                var strUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_UPDATE);
                var result = await APIProvider.Authorize_DynamicTransaction<SettingViewModel, bool>(model, _userSession.BearerToken, strUrl, APIConstant.API_Resource_CORE, ARS.Edit);
                if (result)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.FAIL));
                }
            }
            else
            {
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.ERROR, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.ERROR));
            }
            return RedirectToAction("Index");
        }
    }
}