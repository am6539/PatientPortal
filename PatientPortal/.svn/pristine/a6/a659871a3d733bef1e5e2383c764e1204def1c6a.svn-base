using PatientPortal.CMS.Common;
using PatientPortal.CMS.Models;
using PatientPortal.Provider.Common;
using PatientPortal.Provider.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using PatientPortal.Utility.Files;
using PatientPortal.Utility.Application;
using PatientPortal.Domain.LogManager;

namespace PatientPortal.CMS.Controllers
{
    public class SliderController : Controller
    {
        private static string controllerName = string.Empty;

        #region Get List
        // GET: Feature
        public async Task<ActionResult> Index()
        {
            var results = new SliderModel();
            try
            {
                //Call API Provider
                controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                var list = await APIProvider.Get<List<SliderViewModel>>(controllerName);

                var model = new SliderViewModel();

                results.lstSliderViewModel = list;
                results.SliderViewModel = model;

                TempData["Data"] = list;
            }
            catch (Exception ex)
            {
                Logger.LogError(ex);
                throw ex;
            }
            return View(results);
        }
        #endregion

        #region Create
        [ValidateAntiForgeryToken]
        [HttpPost]
        public async Task<ActionResult> Create(SliderViewModel model, HttpPostedFileBase fileUpload)
        {
            if (fileUpload == null)
            {
                ModelState.AddModelError("Image", "Vui lòng chọn hình");
            }
            if (ModelState.IsValid)
            {
                if (fileUpload != null)
                {
                    model.Image = fileUpload.FileName;
                    string imgName = "";
                    FileManagement.UploadImage(fileUpload, ValueConstant.IMAGE_SLIDER_PATH, ref imgName);
                    model.Image = imgName;
                }

                //Call API Provider
                string strUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_INSERT);
                var result = await APIProvider.DynamicTransaction<SliderViewModel, bool>(model, strUrl);

                if (result)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.FAIL));
                }
                return RedirectToAction("Index");
            }
            else
            {
                var slider = new SliderModel();
                if(TempData["Data"] == null)
                {
                    slider.lstSliderViewModel  = await APIProvider.Get<List<SliderViewModel>>(controllerName);
                }
                else
                {
                    slider.lstSliderViewModel = (List<SliderViewModel>)TempData["Data"];
                }

                if (slider.lstSliderViewModel == null) slider.lstSliderViewModel = ApplicationGenerator.GetObject<List<SliderViewModel>>();
                slider.SliderViewModel = model;
                
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.FAIL));
                return View("Index", slider);
            }
        }
        #endregion

        #region Edit

        [HttpGet]
        public async Task<ActionResult> Edit(short id)
        {
            var model = new SliderViewModel();
            try
            {
                //Call API Provider
                string strUrl = APIProvider.APIGenerator(this, this.RouteData.Values["action"].ToString(), id);
                model = await APIProvider.Get<SliderViewModel>(controllerName + strUrl);

                if (!string.IsNullOrEmpty(model.Image) && !model.Image.Contains(ValueConstant.IMAGE_SLIDER_PATH))
                {
                    model.Image = ValueConstant.IMAGE_SLIDER_PATH + "/" + model.Image;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex);
                throw ex;
            }
            return View(model);
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public async Task<ActionResult> Edit(SliderViewModel model, HttpPostedFileBase fileUpload)
        {
            if (fileUpload == null && String.IsNullOrEmpty(model.Image))
            {
                ModelState.AddModelError("Image", "Vui lòng chọn hình");
            }

            if (ModelState.IsValid)
            {
                if (fileUpload != null)
                {
                    model.Image = fileUpload.FileName;
                    string imgName = "";
                    FileManagement.UploadImage(fileUpload, ValueConstant.IMAGE_SLIDER_PATH, ref imgName);
                    model.Image = imgName;
                }

                //Call API Provider 
                string strUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_UPDATE);
                var result = await APIProvider.DynamicTransaction<SliderViewModel, bool>(model, strUrl);

                if (result)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.FAIL));
                }
                return RedirectToAction("Index");
            }
            else
            {
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.FAIL));
                return View();
            }
        }
        #endregion

        #region Delete
        public ActionResult ViewConfirmDelete(SliderViewModel model)
        {
            return PartialView("_Delete", model);
        }
        [HttpPost]
        public async Task<ActionResult> Delete(byte id)
        {
            try
            {
                //Call API Provider
                string strUrl = APIProvider.APIGenerator(this, this.RouteData.Values["action"].ToString(), id);
                var model = await APIProvider.Get<SliderViewModel>(controllerName + strUrl);

                string apiUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_DELETE);
                var result = await APIProvider.DynamicTransaction<SliderViewModel, bool>(model, apiUrl);

                if (result)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, "Xóa thành công");
                }
                else
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, "Xóa không thành công");
                }

                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex);
                return View();
            }
        }

        #endregion

        #region Check exist
        //[HttpPost]
        //[AllowAnonymous]
        //public JsonResult CheckExist(string title, byte id)
        //{

        //    var isExist = APIHelper.Get<bool>(apiUrl + "/" + id + "?title=" + title);

        //    return Json(!isExist, JsonRequestBehavior.AllowGet);
        //}
        #endregion
    }
}