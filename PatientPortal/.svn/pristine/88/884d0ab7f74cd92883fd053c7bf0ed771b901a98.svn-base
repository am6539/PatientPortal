using AutoMapper;
using PatientPortal.API.CMS.ViewModels;
using PatientPortal.IRepository.CMS;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Web.Http;

namespace PatientPortal.API.CMS.Controllers
{
    public class AdvertiseController : ApiController
    {
        private readonly IAdvertiseRepo _advertise;

        /// <summary>
        /// Init
        /// </summary>
        /// <param name="advertise"></param>
        public AdvertiseController(IAdvertiseRepo advertise)
        {
            this._advertise = advertise;
        }

        #region GET
        /// <summary>
        /// Get all
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public async Task<List<AdvertiseViewModel>> Get()
        {
            Dictionary<string, dynamic> para = new Dictionary<string, dynamic>();
            para.Add("Id", 0);

            var source = await _advertise.GetAll(para);
            List<AdvertiseViewModel> dest = Mapper.Map<List<AdvertiseViewModel>>(source);

            return dest;
        }


        /// <summary>
        /// Filter by Id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        public async Task<AdvertiseViewModel> Get(byte id)
        {
            Dictionary<string, dynamic> para = new Dictionary<string, dynamic>();
            para.Add("Id", id);

            var str = nameof(id);


            var source = await _advertise.Get(para);
            AdvertiseViewModel dest = Mapper.Map<AdvertiseViewModel>(source);

            return dest;
        }


        /// <summary>
        /// Check exist data
        /// </summary>
        /// <param name="name"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        public async Task<bool> CheckExist(string name, byte id)
        {
            Dictionary<string, dynamic> para = new Dictionary<string, dynamic>();
            para.Add("Name", name);
            para.Add("Id", id);

            return await _advertise.CheckExist(para);
        }
        #endregion

        #region POST

        /// <summary>
        /// Transaction data: Insert/Update/Delete
        /// </summary>
        /// <param name="advertiseModel"></param>
        /// <param name="action"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<bool> Transaction(AdvertiseViewModel advertiseModel, char action)
        {
            var data = Mapper.Map<Domain.Models.CMS.Advertise>(advertiseModel);
            return await _advertise.Transaction(data, action);
        }
        #endregion
    }
}
