using Microsoft.AspNet.Identity;
using Microsoft.Owin.Security;
using PatientPortal.Domain.Models.AUTHEN;
using PatientPortal.Domain.Models.CORE.Report;
using PatientPortal.Domain.Models.SYSTEM;
using PatientPortal.PatientServices.Models;
using PatientPortal.PatientServices.Models.Dashboard;
using PatientPortal.Provider.Common;
using PatientPortal.Provider.Models;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;

namespace PatientPortal.PatientServices.Controllers
{
    [Authorize]
    [AppHandleError]
    public class HomeController : Controller
    {
        #region Authentication Manager
        private readonly IUserSession _userSession;
        private IAuthenticationManager AuthenticationManager
        {
            get
            {
                return HttpContext.GetOwinContext().Authentication;
            }
        }

        public HomeController(IUserSession userSession)
        {
            _userSession = userSession;
        }
        #endregion
        public async Task<ActionResult> Index()
        {
            //Get module list & store cookie
            string strUrl = APIProvider.APIGenerator("Module", "Initial", new List<string> { "group" }, true, APIConstant.MODULE_PATIENT);
            var lstModule = await APIProvider.Authorize_Get<List<ModuleApplication>>(_userSession.BearerToken, strUrl, APIConstant.API_Resource_CORE, ARS.IgnoredARS);
            CookieStore.Create(APIConstant.COOKIE_MODULE + APIConstant.MODULE_PATIENT, lstModule, HttpContext.ApplicationInstance.Context);

            //Get appointment list
            var dashboardObj = new PatientDashboard();

            var token = _userSession.BearerToken;
            string apiUrl = APIProvider.APIGenerator("Appointment", "GetAppointmentConfirm", null);
            var appointments = await APIProvider.Authorize_Get<List<RPAppointment>>(token, apiUrl, APIConstant.API_Resource_CORE, ARS.IgnoredARS);


            //Get articles
            var articles = await APIProvider.Authorize_Get<List<ArticleViewModel>>(_userSession.BearerToken, "Article", APIConstant.API_Resource_CORE, ARS.IgnoredARS);

            dashboardObj.lstAppointment = appointments;
            dashboardObj.lstArticle = articles;

            return View(dashboardObj);

        }


        public ActionResult About()
        {
            ViewBag.Message = "Your application description page.";

            return View();
        }

        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }
    }
}