using Microsoft.AspNet.Identity;
using Microsoft.Owin.Security;
using Newtonsoft.Json;
using PatientPortal.CMS.Common;
using PatientPortal.CMS.Helpers;
using PatientPortal.Domain.Models.AUTHEN;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using WebMatrix.WebData;

namespace PatientPortal.CMS.Controllers
{
    public class AccountController : Controller
    {
        private IAuthenticationManager AuthenticationManager
        {
            get
            {
                return HttpContext.GetOwinContext().Authentication;
            }
        }

        // GET: Account
        public ActionResult Index()
        {
            if (WebSecurity.IsAuthenticated)
            {
                return RedirectToAction("Login", "Home");
            }

            return View();
        }

        // GET: /Account/Login
        [AllowAnonymous]
        public ActionResult Login()
        {

            if (WebSecurity.IsAuthenticated)
            {
                return RedirectToAction("Index", "Home");
            }
            else
            {
                Session.Abandon();
            }
            Session["SessionId"] = HttpContext.Session.SessionID;
            return View();
        }

        // POST: /Account/Login
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public ActionResult Login(LoginModel model, string returnUrl)
        {
            var token = ApiHelper.GetToken(model.UserName, model.Password);
            if (string.IsNullOrEmpty(token.AccessToken))
            {
                var error = JsonConvert.DeserializeObject<dynamic>(token.Json.ToString());
                ModelState.AddModelError(string.Empty, error.error_description.ToString());
                return View(model);
            }
            var tokenDynamic = JsonConvert.DeserializeObject<dynamic>(token.Json.ToString());
            string username = tokenDynamic.userName;
            Session[ValueConstant.TOKEN] = tokenDynamic.access_token;

            var claims = new List<Claim> { new Claim(ClaimTypes.Name, username, ClaimValueTypes.String) };
            var claimsIdentity = new ClaimsIdentity(claims, DefaultAuthenticationTypes.ApplicationCookie);

            AuthenticationManager.SignIn(new AuthenticationProperties() { IsPersistent = false }, claimsIdentity);

            HttpContext.User = AuthenticationManager.AuthenticationResponseGrant.Principal;
            return Redirect(returnUrl);
        }
    }
}