using AutoMapper;
using PatientPortal.API.SPA.Common;
using PatientPortal.API.SPA.ViewModels;
using PatientPortal.IRepository.SPA;
using PatientPortal.IRepository.Wrapper;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;

namespace PatientPortal.API.SPA.Controllers
{
    public class SPAPostController : ApiController
    {
        private readonly string NUM_TOP = ConfigurationManager.AppSettings["numbLoadPost"];
        private readonly string PATH_IMG_POST = ConfigurationManager.AppSettings["web:cms"];
        private readonly IPostRepo _iPostRepo;
        private readonly IAdapterPatternRepo _adapterPatternRepo;

        public SPAPostController(IPostRepo iPostRepo, IAdapterPatternRepo adapterPatternRepo)
        {
            this._iPostRepo = iPostRepo;
            this._adapterPatternRepo = adapterPatternRepo;
        }

        [HttpGet]
        public async Task<HttpResponseMessage> GetListPost(string languageCode, POSTSORT_TYPE priority = POSTSORT_TYPE.NEW)
        {
            try
            {
                Dictionary<string, object> para = new Dictionary<string, dynamic>();
                //para.Add("CategoryId", (int)CategoryId.Posts);
                //para.Add("numTop", NUM_TOP);
                //para.Add("languageCode", languageCode);

                // IEnumerable<PostListViewModel> data_test = await _adapterPatternRepo.ExecuteQuery<PostListViewModel>(para, "usp_spa_Post");

                var data =  await _iPostRepo.GetAll(languageCode, (int)CategoryId.Posts, NUM_TOP, (byte)priority);
                var lstPost = Mapper.Map<List<PostListViewModel>>(data);
                var results = new List<PostListViewModel>();
                foreach (var item in lstPost)
                {
                    var post = new PostListViewModel()
                    {
                        Id = item.Id,
                        CategoryId = item.CategoryId,
                        PublishDate = item.PublishDate,
                        Image = PATH_IMG_POST + item?.Image.Remove(0, 1),
                        Author = item.Author,
                        TitleTran = item.TitleTran,
                        DescriptionTrans = item.DescriptionTrans,
                        CategoryName = item.CategoryName,
                        WorkflowStateId = item.WorkflowStateId,
                        WorkflowStateName = item.WorkflowStateName
                    };
                    results.Add(post);
                }
                return Request.CreateResponse(HttpStatusCode.OK, results);
            }
            catch (Exception ex)
            {
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }

        [HttpGet]
        public HttpResponseMessage Get(int Id)
        {
            try
            {
                var data = _iPostRepo.Get(Id);
                var result = Mapper.Map<PostViewModel>(data);
                return Request.CreateResponse(HttpStatusCode.OK, result);
            }
            catch (Exception ex)
            {
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }

        public async Task<HttpResponseMessage> GetPosts(int Id, string languageCode)
        {
            try
            {
                var result = new PostsViewModel();
                var list = await _iPostRepo.GetAll(languageCode, (int)CategoryId.Posts, NUM_TOP, (byte)POSTSORT_TYPE.NEW);
                var post = _iPostRepo.Get(Id);

                result.lstPostListViewModel = Mapper.Map<List<PostListViewModel>>(list);
                result.PostViewModel = Mapper.Map<PostViewModel>(post);

                return Request.CreateResponse(HttpStatusCode.OK, result);
            }
            catch (Exception ex)
            {
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }

        [HttpGet]
        public async Task<HttpResponseMessage> GetPostAbout(string languageCode)
        {
            try
            {
                var data = await _iPostRepo.GetAll(languageCode, (int)CategoryId.About, NUM_TOP, (byte)POSTSORT_TYPE.NEW);
                var lstPost = Mapper.Map<List<PostListViewModel>>(data);
                return Request.CreateResponse(HttpStatusCode.OK, lstPost);
            }
            catch (Exception ex)
            {
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }


    }
}
