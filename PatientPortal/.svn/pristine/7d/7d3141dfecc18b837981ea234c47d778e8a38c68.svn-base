using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using WebApiContrib.Formatting;

namespace PatientPortal.CMS.Utility
{
    internal static class APIHelper
    {
        private static Uri _baseAddress = new Uri(ConfigurationManager.AppSettings["webapi:cms"]);

        /// <summary>
        /// Get data API/Protobuf
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="query"></param>
        /// <returns></returns>
        public static T Get<T>(string urlApi)
        {
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/x-protobuf"));
                httpClient.BaseAddress = _baseAddress;

                var response = httpClient.GetAsync(urlApi).Result;
                return response.Content.ReadAsAsync<T>(new[] { new ProtoBufFormatter() }).Result;
            }
        }

        public static async Task<T> TransactionAsync<T>(T cate, string urlApi)
        {
            var httpClient = new HttpClient();
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/x-protobuf"));
            
            StringContent content = new StringContent(JsonConvert.SerializeObject(cate), Encoding.UTF8, "application/json");
            httpClient.BaseAddress = _baseAddress;

            HttpResponseMessage response = await httpClient.PostAsync(urlApi, content);
            return response.Content.ReadAsAsync<T>(new[] { new ProtoBufFormatter() }).Result;
        }
    }
}