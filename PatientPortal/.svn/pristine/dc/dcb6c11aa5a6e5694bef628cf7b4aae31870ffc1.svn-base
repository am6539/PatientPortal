using PatientPortal.Domain;
using PatientPortal.Domain.Common;
using PatientPortal.PatientServices.Models;
using PatientPortal.PatientServices.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using PatientPortal.Domain.LogManager;

namespace PatientPortal.PatientServices.Controllers
{
    public class AppointmentController : Controller
    {
        private string apiAppointmentUrl = $"api/Appointment";
        private string apiUserUrl = $"api/User";
        private string apiShedule = $"api/Schedule";

        // GET: Appointment
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult Make()
        {
            //get list of doctors
            var doctorList = APIHelper.Get<List<UserViewModel>>(ApiUrlConstant.GET_USERS(null, (byte)EnumUserConstants.Type.ISDOCTOR));
            if (doctorList == null) doctorList = ApplicationHelper.GetObject<List<UserViewModel>>();
            TempData["Doctors"] = doctorList;

            //get list schedule of a doctor
            //var schedulesByDoctor = APIHelper.Get<List<ScheduleViewModel>>(apiShedule);
            //if (schedulesByDoctor == null) schedulesByDoctor = ApplicationHelper.GetObject<List<ScheduleViewModel>>();

            ViewBag.Doctors = doctorList;
            var appointmentModel = new AppointmentEditModel() { PatientId = 5 };
            return View(appointmentModel);
        }

        public ActionResult ViewDoctorList(string search)
        {
            var doctors = new List<UserViewModel>();
            doctors = (List<UserViewModel>)TempData["Doctors"];
            if(doctors == null)
            {
                doctors = APIHelper.Get<List<UserViewModel>>(ApiUrlConstant.GET_USERS(search, (byte)EnumUserConstants.Type.ISDOCTOR));
                if (doctors == null) doctors = ApplicationHelper.GetObject<List<UserViewModel>>();
            }
            else
            {
                doctors = doctors.Where(x => x.Name == search || search == null).ToList();
            }
            return PartialView("_DoctorList", doctors);
        }

        public ActionResult DoctorDetail(int doctorId)
        {
            var doctor = APIHelper.Get<UserViewModel>(ApiUrlConstant.GET_USER_DETAILS(doctorId));
            if(doctor == null) doctor = ApplicationHelper.GetObject<UserViewModel>();
            return PartialView("_DoctorDetail", doctor);
        }

        public ActionResult AppointmentPartial(int Id)
        {
            var appointment = new AppointmentEditModel() { PatientId = 5 };
            appointment.PhysicianId = Id;
            appointment.PatientId = 5;

            var doctorList = APIHelper.Get<List<UserViewModel>>(ApiUrlConstant.GET_USERS(null, (byte)EnumUserConstants.Type.ISDOCTOR));
            if (doctorList == null) doctorList = ApplicationHelper.GetObject<List<UserViewModel>>();
            ViewBag.Doctors = doctorList;

            return PartialView("_Appointment", appointment);
        }

        public ActionResult InfoOrder(int patientId)
        {
            var patient = APIHelper.Get<UserViewModel>(ApiUrlConstant.GET_USER_DETAILS(patientId));
            if (patient == null) patient = ApplicationHelper.GetObject<UserViewModel>();
            return PartialView("_InfoOrder", patient);
        }

        public async Task<ActionResult> ConfirmAppointment(AppointmentEditModel model)
        {
            model.Time = 8;
            if (ModelState.IsValid)
            {
                await Save(model, ValueConstant.INSERT);
            }
            return RedirectToAction("Make");
        }
        private async Task<AppointmentEditModel> Save(AppointmentEditModel model, char action)
        {
            var result =  new AppointmentEditModel();
            try
            {
                result = await APIHelper.TransactionAsync<AppointmentEditModel>(model, apiAppointmentUrl + ApiUrlConstant.TRANSACTION_APPOINTMENT(ValueConstant.INSERT));
            }
            catch (Exception ex)
            {
                ModelState.AddModelError("", ex.Message);
                Logger.LogError(ex);
            }
            return result;
        }
    }
}