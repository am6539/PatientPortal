using PatientPortal.DataAccess.Repo.CMS;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PatientPortal.Domain.Models.CMS;
using System.Transactions;
using PatientPortal.Domain.Utilities;
using PatientPortal.DataAccess.Dapper;
using Dapper;


namespace PatientPortal.DataAccess.CMS
{
    public class PostImpl : IPost
    {
        public List<PostList> GetAll(int PostId, string languageCode)
        {
            using (TransactionScope scope = new TransactionScope())
            {
                try
                {
                    DapperConfiguration.OpenConnection(1);

                    var data = DapperConfiguration.db.Query<PostList>("usp_Post", 
                        new { languageCode = languageCode, PostId = 0 }, 
                        commandType: System.Data.CommandType.StoredProcedure).ToList();

                    DapperConfiguration.CloseConnection();

                    scope.Complete();
                    return data;

                }
                catch (Exception ex)
                {
                    LogHelper.WriteLog("Execute Category get data: " + ex.Message);
                    return null;
                }
            }
        }

        public Post GetById(int Id, byte languageId)
        {
            using (TransactionScope scope = new TransactionScope())
            {
                try
                {
                    DapperConfiguration.OpenConnection(1);

                    var data = DapperConfiguration.db.Query<Post>("usp_Post", 
                        new { PostId = Id, languageId = languageId }, 
                        commandType: System.Data.CommandType.StoredProcedure);
                    var result = new Post();
                    if (data.Count() > 0)
                    {
                        result = data.FirstOrDefault() ;
                    }

                    DapperConfiguration.CloseConnection();

                    scope.Complete();
                    return result;

                }
                catch (Exception ex)
                {
                    LogHelper.WriteLog("Execute Category get data: " + ex.Message);
                    return null;
                }
            }
        }

        public List<Post> GetListByCategory(byte categoryId)
        {
            throw new NotImplementedException();
        }

        public List<Post> GetListByCreateTime(string startTime, string endTime)
        {
            throw new NotImplementedException();
        }

        public List<Post> GetListBySearchText(string searchText)
        {
            throw new NotImplementedException();
        }

        public List<Post> GetListByStatus(byte status)
        {
            throw new NotImplementedException();
        }

        public List<Post> GetListByWorkflowState(short workflowStateId)
        {
            throw new NotImplementedException();
        }

        public bool PostTransaction(List<PostEdit> data, char action)
        {
            using (TransactionScope scope = new TransactionScope())
            {
                try
                {
                    var val = new Lib.DataGenerator().CommitData<PostEdit>(data, "usp_Post_Transaction", action);
                    scope.Complete();
                    return val;
                }
                catch (Exception ex)
                {
                    LogHelper.WriteLog("Execute CategoryTransaction: " + ex.Message);
                    return false;
                }
            }
        }
    }
}
