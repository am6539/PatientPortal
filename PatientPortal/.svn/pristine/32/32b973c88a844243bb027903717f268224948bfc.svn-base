using PatientPortal.CMS.Common;
using PatientPortal.CMS.Models;
using PatientPortal.Provider.Common;
using PatientPortal.Provider.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using PatientPortal.Utility.Application;
using PatientPortal.Domain.LogManager;

namespace PatientPortal.CMS.Controllers
{
    public class LanguageController : Controller
    {
        private static string controllerName = string.Empty;

        #region Get List
        // GET: Languages
        public async Task<ActionResult> Index()
        {
            var results = new LanguagesModel();
            try
            {
                //Call API Provider
                controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                var list = await APIProvider.Get<List<LanguageViewModel>>(controllerName);

                var language = new LanguageViewModel();

                results.lstLanguageViewModel = list;
                results.LanguageViewModel = language;

                TempData["Data"] = list;
            }
            catch (Exception ex)
            {
                Logger.LogError(ex);
                throw ex;
            }
            return View(results);
        }
        #endregion

        #region Create
        [ValidateAntiForgeryToken]
        [HttpPost]
        public async Task<ActionResult> Create(LanguageViewModel model)
        {
            if (ModelState.IsValid)
            {
                //Call API Provider
                string strUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_INSERT);
                var result = await APIProvider.DynamicTransaction<LanguageViewModel, bool>(model, strUrl);

                if (result)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.FAIL));
                }
                return RedirectToAction("Index");
            }
            else
            {
                var languages = new LanguagesModel();
                if(TempData["Data"] != null)
                {
                    languages.lstLanguageViewModel = (List<LanguageViewModel>)TempData["Data"];
                }
                else
                {
                    languages.lstLanguageViewModel  = await APIProvider.Get<List<LanguageViewModel>>(controllerName);
                }

                languages.LanguageViewModel = model;
                
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.FAIL));
                return View("Index", languages);
            }
        }
        #endregion

        #region Edit

        [HttpGet]
        public async Task<ActionResult> Edit(byte id)
        {
            var data = new LanguageViewModel();
            try
            {
                //Call API Provider
                string strUrl = controllerName + APIProvider.APIGenerator(this, this.RouteData.Values["action"].ToString(), id);
                var model = await APIProvider.Get<LanguageViewModel>(strUrl);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex);
                throw ex;
            }
            return View(data);
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public async Task<ActionResult> Edit(LanguageViewModel model, HttpPostedFileBase fileUpload)
        {
            if (ModelState.IsValid)
            {
                //Call API Provider 
                string strUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_UPDATE);
                var result = await APIProvider.DynamicTransaction<LanguageViewModel, bool>(model, strUrl);

                if (result)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.FAIL));
                }
                return RedirectToAction("Index");
            }
            else
            {
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.FAIL));
                return View();
            }
        }
        #endregion

        #region Delete
        public async Task<ActionResult> ViewConfirmDelete(LanguageViewModel model)
        {
            //Call API Provider - Get data
            string apiUrl = APIProvider.APIGenerator(controllerName, new List <string> { "id"}, model.Id);
            var checkIsused = await APIProvider.Get<bool>(apiUrl);

            if (!checkIsused)
            {
                return PartialView("_Delete", model);
            }
            else
            {
                var languages = new LanguagesModel();
                languages.lstLanguageViewModel = (List<LanguageViewModel>)TempData["Data"];

                if (languages.lstLanguageViewModel == null) languages.lstLanguageViewModel = ApplicationGenerator.GetObject<List<LanguageViewModel>>();
                languages.LanguageViewModel = model;

                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.ERROR, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_DELETE, ApplicationGenerator.TypeResult.ISUSED));
                return View("Index", languages);
            }
        }

        [HttpPost]
        public async Task<ActionResult> Delete(byte id)
        {
            try
            {
                var model = new LanguageViewModel();
                model.Id = id;

                //Call API Provider - Transaction
                string apiUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_DELETE);
                var result = await APIProvider.DynamicTransaction<LanguageViewModel, bool>(model, apiUrl);

                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex);
                return RedirectToAction("Index");
            }
        }

        #endregion

        #region Check exist
        [HttpPost]
        [AllowAnonymous]
        public async Task<JsonResult> CheckExist(string code, byte id)
        {
            string apiUrl = APIProvider.APIGenerator(controllerName, new List <string> { nameof(id), nameof(code)}, id, code);
            var isExist = await APIProvider.Get<bool>(apiUrl);

            return Json(!isExist, JsonRequestBehavior.AllowGet);
        }
        #endregion

    }
}