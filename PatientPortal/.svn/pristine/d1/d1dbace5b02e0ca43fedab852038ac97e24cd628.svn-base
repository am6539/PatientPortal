using PatientPortal.CMS.Common;
using PatientPortal.CMS.Models;
using PatientPortal.CMS.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using PatientPortal.API.Provider.Models;
using PatientPortal.API.Provider.Common;

namespace PatientPortal.CMS.Controllers
{
    public class AdvertiseController : Controller
    {
        private static string controllerName = string.Empty;

        // GET: Advertise
        public async Task<ActionResult> Index()
        {
            var model = new AdvertisesModel();
            try
            {
                //Call API Provider
                controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                var list = await APIProvider.Get<List<AdvertiseViewModel>>(controllerName, APIConstant.API_Resource_CMS);

                model.lstAdvertiseViewModel = list.OrderBy(x => x.Id).ToList();
                model.AdvertiseViewModel = new AdvertiseViewModel();

                ///Category List
                ViewBag.Categories = list;
                TempData["Data"] = list;
            }
            catch (Exception ex)
            {
                LogHelper.WriteLog(ex.Message);
                throw ex;
            }
            return View(model);
        }

        #region Create
        [ValidateAntiForgeryToken]
        [HttpPost]
        public async Task<ActionResult> Create(AdvertiseViewModel model, HttpPostedFileBase fileUpload)
        {
            if (fileUpload == null)
            {
                ModelState.AddModelError("Resouce", "Vui lòng chọn video hoặc hình ảnh");
            }
            if (ModelState.IsValid)
            {
                if (fileUpload != null)
                {
                    string name = "";
                    if (fileUpload.ContentType.Contains("image"))
                    {
                        WebImageHelper.UploadImage(fileUpload, ValueConstant.IMAGE_ADVERTISE_PATH, ref name);
                        model.Type = (Byte)ValueConstant.MEDIA_TYPE.IMAGE;
                        model.Resouce = name;
                    }
                    else
                    {
                        UploadFileHelper.UploadFile(fileUpload, ValueConstant.IMAGE_ADVERTISE_PATH, ref name);
                        string pathVideo = Server.MapPath(name);

                        string pathThumbnail = Server.MapPath(ValueConstant.IMAGE_ADVERTISE_PATH);
                        var ffMpeg = new NReco.VideoConverter.FFMpegConverter();
                        string[] arrTemp = fileUpload.FileName.Split('.');
                        string fileName = pathThumbnail + "/" +arrTemp[0] + ".jpg";
                        ffMpeg.GetVideoThumbnail(pathVideo, fileName, 10.0f);
                        model.Type = (byte)ValueConstant.MEDIA_TYPE.VIDEO;
                        model.Resouce = name;
                    }
                }

                //Call API Provider
                string strUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_INSERT);
                var result = await APIProvider.DynamicTransaction<AdvertiseViewModel, bool>(model, strUrl, APIConstant.API_Resource_CMS);

                if (result)
                {
                    TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.SUCCESS, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_INSERT, RenderMessage.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.FAIL, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_INSERT, RenderMessage.TypeResult.FAIL));
                }
                return RedirectToAction("Index");
            }
            else
            {
                var slider = new AdvertisesModel();
                if (TempData["Data"] == null)
                {
                   slider.lstAdvertiseViewModel = await APIProvider.Get<List<AdvertiseViewModel>>(controllerName, APIConstant.API_Resource_CMS);
                   TempData["Data"] = slider.lstAdvertiseViewModel;
                }
                else
                {
                    slider.lstAdvertiseViewModel = (List<AdvertiseViewModel>)TempData["Data"];
                }

                slider.AdvertiseViewModel = model;

                TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.FAIL, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_INSERT, RenderMessage.TypeResult.FAIL));
                return View("Index", slider);
            }
        }
        #endregion

        #region Edit
        [HttpGet]
        public async Task<ActionResult> Edit(short id)
        {
            var model = new AdvertiseViewModel();
            try
            {
                //Call API Provider
                string strUrl = controllerName + APIProvider.APIGenerator(this, this.RouteData.Values["action"].ToString(), id);
                model = await APIProvider.Get<AdvertiseViewModel>(strUrl, APIConstant.API_Resource_CMS);
            }
            catch (Exception ex)
            {
                LogHelper.WriteLog(ex.Message);
                throw ex;
            }
            return View(model);
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public async Task<ActionResult> Edit(AdvertiseViewModel model, HttpPostedFileBase fileUpload)
        {
            if (fileUpload == null && String.IsNullOrEmpty(model.Resouce))
            {
                ModelState.AddModelError("Resouce", "Vui lòng chọn hình");
            }

            if (ModelState.IsValid)
            {
                if (fileUpload != null)
                {
                     string name = "";
                    if (fileUpload.ContentType.Contains("image"))
                    {
                        WebImageHelper.UploadImage(fileUpload, ValueConstant.IMAGE_ADVERTISE_PATH, ref name);
                        model.Type = (Byte)ValueConstant.MEDIA_TYPE.IMAGE;
                        model.Resouce = name;
                    }
                    else
                    {
                        UploadFileHelper.UploadFile(fileUpload, ValueConstant.IMAGE_ADVERTISE_PATH, ref name);
                        string pathVideo = Server.MapPath(name);

                        string pathThumbnail = Server.MapPath(ValueConstant.IMAGE_ADVERTISE_PATH);
                        var ffMpeg = new NReco.VideoConverter.FFMpegConverter();
                        string[] arrTemp = fileUpload.FileName.Split('.');
                        string fileName = pathThumbnail + "/" +arrTemp[0] + ".jpg";
                        ffMpeg.GetVideoThumbnail(pathVideo, fileName, 10.0f);
                        model.Type = (byte)ValueConstant.MEDIA_TYPE.VIDEO;
                        model.Resouce = name.Replace(fileUpload.FileName, arrTemp[0] + ".jpg");
                    }
                }

                //Call API Provider 
                string strUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_UPDATE);
                var result = await APIProvider.DynamicTransaction<AdvertiseViewModel, bool>(model, strUrl);


                if (result)
                {
                    TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.SUCCESS, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_UPDATE, RenderMessage.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.FAIL, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_UPDATE, RenderMessage.TypeResult.FAIL));
                }
                return RedirectToAction("Index");
            }
            else
            {
                TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.FAIL, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_UPDATE, RenderMessage.TypeResult.FAIL));
                return View(model);
            }
        }
        #endregion

        #region Delete
        public ActionResult Delete(AdvertiseViewModel model)
        {
            return PartialView("_Delete", model);
        }
        [HttpPost]
        public async Task<ActionResult> Delete(byte id)
        {
            try
            {
                //Call API Provider - Get data
                string apiUrl = controllerName + APIProvider.APIGenerator(this, this.RouteData.Values["action"].ToString(), id);
                var model = await APIProvider.Get<AdvertiseViewModel>(apiUrl, APIConstant.API_Resource_CMS);

                //Call API Provider - Transaction
                apiUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_DELETE);
                var result = await APIProvider.DynamicTransaction<AdvertiseViewModel, bool>(model, apiUrl);

                if (result)
                {
                    TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.SUCCESS, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_DELETE, RenderMessage.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.FAIL, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_DELETE, RenderMessage.TypeResult.FAIL));
                }
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                LogHelper.WriteLog(ex.Message);
                return View();
            }
        }

        public ActionResult ViewVideo(AdvertiseViewModel model)
        {
            model.Resouce = model.Resouce.Replace(@"\", @"/");
            return PartialView("_ViewVideo", model);
        }

        #endregion

        #region Check exist
        //[HttpPost]
        //[AllowAnonymous]
        public async Task<JsonResult> CheckExist(string name, byte id)
        {

            //Call API Provider - Get data
            string apiUrl = APIProvider.APIGenerator(this, this.RouteData.Values["action"].ToString(), name,id);
            var isExist = await APIProvider.Get<bool>(apiUrl);

            return Json(!isExist, JsonRequestBehavior.AllowGet);
        }
        #endregion
    }
}