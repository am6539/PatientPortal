using PatientPortal.CMS.Models;
using PatientPortal.CMS.Utility;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Linq.Dynamic;
using PatientPortal.CMS.Common;
using System.Threading.Tasks;

namespace PatientPortal.CMS.Controllers
{
    public class CMSPostController : Controller
    {
        // GET: Post
        public ActionResult Index(string languageCode)
        {
            try
            {
                languageCode = ConfigurationManager.AppSettings["AdminLanguageCode"];

                var listCatg = APIHelper.Get<List<CategoryViewModel>>($"api/Category");
                if (listCatg != null)
                    ViewData["ListCategory"] = listCatg;
                    
                var results = APIHelper.Get<List<PostListViewModel>>($"api/Post?languageCode={languageCode}");

                return View(results);
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        // GET: Post/Create
        public ActionResult Create()
        {
            var listCatg = APIHelper.Get<List<CategoryViewModel>>($"api/Category");
            if (listCatg != null)
                ViewBag.CategoryId = new SelectList(listCatg, "Id", "Name");

            return View();
        }

        // POST: Post/Create
        [HttpPost]
        public async Task<ActionResult> Create(PostViewModel model, HttpPostedFileBase fileUpload)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    ImageUpload.Upload(fileUpload, ValueConstant.IMAGE_PATH);
                    model.LanguageId = ValueConstant.LANG_VIETNAM;
                    model.Status = 1;
                    var result = await APIHelper.TransactionAsync<PostViewModel>(model, $"api/Post?action={ ValueConstant.ACTION_INSERT }");
                    return RedirectToAction("Index");
                }
                catch
                {
                    return View();
                }
            }
            return View();
        }

        // GET: Post/Edit/5
        public ActionResult Edit(int id)
        {
            try
            {
                var listCatg = APIHelper.Get<List<CategoryViewModel>>($"api/Category");
                var model = APIHelper.Get<PostViewModel>($"api/Post?PostId={id}");
                if (model.Image != "")
                {
                    model.Image = ValueConstant.IMAGE_PATH + "/" + model.Image;
                }

                if (listCatg != null)
                    ViewBag.CategoryId = new SelectList(listCatg, "ID", "Name", model.CategoryId);
                
                return View(model);
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        // POST: Post/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Edit(PostViewModel model, HttpPostedFileBase fileUpload)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    ImageUpload.Upload(fileUpload, ValueConstant.IMAGE_PATH);
                    model.LanguageId = ValueConstant.LANG_VIETNAM;
                    model.Status = 1;
                    var result = await APIHelper.TransactionAsync<PostViewModel>(model, $"api/Post?action={ ValueConstant.ACTION_UPDATE }");
                    return RedirectToAction("Index");
                }
                catch
                {
                    return View();
                }
            }
            return View();
        }

        // GET: Post/Delete/5
        public ActionResult Delete(int id)
        {
            return View();
        }

        // POST: Post/Delete/5
        [HttpPost]
        public ActionResult Delete(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add delete logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }
    }
}
