using PatientPortal.CMS.Common;
using PatientPortal.CMS.Models;
using PatientPortal.CMS.Utility;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace PatientPortal.CMS.Controllers
{
    public class GallerryController : Controller
    {
        // GET: Gallerry
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult FileContentPartial()
        {
            return PartialView();
        }

        public ActionResult MenuFileManagerPartial()
        {
            return PartialView();
        }

        public ActionResult GallerryPartial(string fullPath)
        {
            var appData = Server.MapPath(fullPath);
            var image = Directory.GetFiles(appData).Select(x => new FileViewModel
            {
                Url = Url.Content(fullPath + Path.GetFileName(x)),
            });
            return PartialView(image);
        }

        public void PopulateTree(string dir, JsTreeModel node)
        {
            if (node.children == null)
            {
                node.children = new List<JsTreeModel>();
            }
            
            DirectoryInfo directory = new DirectoryInfo(dir);
            
            foreach (DirectoryInfo d in directory.GetDirectories())
            {
                JsTreeModel t = new JsTreeModel();

                string path = ValueConstant.FOLDER_SEPARATOR;
                string[] arr = d.FullName.Split('\\');
                int index = Array.IndexOf(arr, ValueConstant.ROOT_FOLDER);
                for(int i = index; i < arr.Length; i++)
                {
                    path += arr[i].ToString() + ValueConstant.FOLDER_SEPARATOR;
                }

                t.id = path;
                t.text = d.Name.ToString();
                t.state = new StateNode();
                t.state.opened = true;
                
                PopulateTree(d.FullName, t);
                node.children.Add(t);
            }
            
            //foreach (FileInfo f in directory.GetFiles())
            //{
            //    JsTreeModel t = new JsTreeModel();
            //    t.attr = new JsTreeAttribute();
            //    t.attr.id = f.FullName;
            //    t.text = f.Name.ToString();
                
            //    node.children.Add(t);
            //}
        }

        public bool AlreadyPopulated
        {
            get
            {
                return (Session["AlreadyPopulated"] == null ? false : (bool)Session["AlreadyPopulated"]);
            }
            set
            {
                Session["AlreadyPopulated"] = (bool)value;
            }

        }

        [HttpPost]
        public ActionResult CreateFolder(string path, string newname)
        {
            //newname = ValueConstant.NEW_FOLDER_NAME;
            string mapPath = Server.MapPath(path + ValueConstant.FOLDER_SEPARATOR + newname);
            Directory.CreateDirectory(mapPath);
            AlreadyPopulated = false;
            return null;
        }

        [HttpPost]
        public ActionResult RenameFolder(string path, string newname, string oldname)
        {
            if (!string.IsNullOrEmpty(newname))
            {
                string oldDirectory = Server.MapPath(path + ValueConstant.FOLDER_SEPARATOR + oldname);
                string newDirectory = Server.MapPath(path + ValueConstant.FOLDER_SEPARATOR + newname);
                Directory.Move(oldDirectory, newDirectory);
                AlreadyPopulated = false;
                return null;
            }
            else
                return null;
        }

        [HttpPost]
        public JsonResult GetTreeData()
        {
            //if (AlreadyPopulated == false)
            //{
            //    
            //}
            //else
            //{
            //    return null;
            //}
            JsTreeModel rootNode = new JsTreeModel();
            rootNode.text = "Assets";
            rootNode.state = new StateNode();
            rootNode.state.opened = true;

            string rootPath = Request.MapPath(ValueConstant.IMAGE_PATH);
            rootNode.id = rootPath;
            PopulateTree(rootPath, rootNode);
            AlreadyPopulated = true;
            return Json(rootNode, JsonRequestBehavior.AllowGet);
        }

        public ActionResult UploadFile(HttpPostedFileBase fileUpload)
        {
            try
            {
                if (fileUpload != null)
                {
                    string imagePath = "";
                    string name = "";
                    WebImageHelper.UploadImage(fileUpload, imagePath, ref name);
                    return RedirectToAction("Index");
                }
                else
                {
                    TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.FAIL, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_INSERT, RenderMessage.TypeResult.FAIL));
                    return RedirectToAction("Index");
                }
            }
            catch (Exception ex)
            {
                LogHelper.WriteLog("Error delete Post" + ex.Message);
                TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.ERROR, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_INSERT, RenderMessage.TypeResult.ERROR));
                return View();
            }
        }
    }
}
