using PatientPortal.CMS.Common;
using PatientPortal.CMS.Models;
using PatientPortal.Provider.Common;
using PatientPortal.Provider.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using PatientPortal.Utility.Application;
using PatientPortal.Utility.Files;
using PatientPortal.Domain.LogManager;
using PatientPortal.Domain.Models.AUTHEN;
using static PatientPortal.Utility.Application.ApplicationGenerator;

namespace PatientPortal.CMS.Controllers
{
    [Authorize]
    [AppHandleError]
    public class FeatureController : Controller
    {
        private static string controllerName = string.Empty;
        private readonly IUserSession _userSession;

        public FeatureController(IUserSession userSession)
        {
            _userSession = userSession;
        }

        #region Get List
        // GET: Feature
        public async Task<ActionResult> Index()
        {
            try
            {
                var results = new FeatureModel();
                //Call API Provider
                controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                var list = await APIProvider.Authorize_Get<List<FeatureViewModel>>(_userSession.BearerToken, controllerName, APIConstant.API_Resource_CMS, ARS.Get);

                var model = new FeatureViewModel();

                results.lstFeatureViewModel = list;
                results.FeatureViewModel = model;
                return View(results);
            }
            catch (HttpException ex)
            {
                Logger.LogError(ex);
                int statusCode = ex.GetHttpCode();
                if (statusCode == 401)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(FuntionType.Department, APIConstant.ACTION_ACCESS);
                    return new HttpUnauthorizedResult();
                }

                throw ex;
            }
        }
        #endregion

        #region Create
        [ValidateAntiForgeryToken]
        [HttpPost]
        public async Task<ActionResult> Create(FeatureViewModel model, HttpPostedFileBase fileUpload)
        {
            try
            {
                if (fileUpload == null)
                {
                    ModelState.AddModelError("Image", "Vui lòng chọn hình ảnh");
                }

                if (ModelState.IsValid)
                {
                    if (fileUpload != null)
                    {
                        //model.Image = fileUpload.FileName;
                        string imgName = "";
                        FileManagement.UploadImage(fileUpload, ValueConstant.IMAGE_FEATURE_PATH, ref imgName);
                        model.Image = imgName;
                    }

                    //Call API Provider
                    string strUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_INSERT);
                    var result = await APIProvider.Authorize_DynamicTransaction<FeatureViewModel, bool>(model, _userSession.BearerToken, strUrl, APIConstant.API_Resource_CMS, ARS.Insert);

                    if (result)
                    {
                        TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.SUCCESS));
                    }
                    else
                    {
                        TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.FAIL));
                    }
                    return RedirectToAction("Index");
                }
                else
                {
                    var feature = new FeatureModel();
                    feature.lstFeatureViewModel = await APIProvider.Get<List<FeatureViewModel>>(controllerName);
                    feature.FeatureViewModel = model;

                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.FAIL));
                    return View("Index", feature);
                }
            }
            catch (HttpException ex)
            {
                Logger.LogError(ex);
                int statusCode = ex.GetHttpCode();
                if (statusCode == 401)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(FuntionType.Department, APIConstant.ACTION_ACCESS);
                    return new HttpUnauthorizedResult();
                }

                throw ex;
            }
        }
        #endregion

        #region Edit

        [HttpGet]
        public async Task<ActionResult> Edit(byte id)
        {
            var model = new FeatureViewModel();
            try
            {
                if (!await APIProvider.Authorization(_userSession.BearerToken, ARS.Edit))
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.FuntionType.Account, APIConstant.ACTION_UPDATE);
                    return RedirectToAction("Index");
                }
                else
                {
                    //Call API Provider
                    string strUrl = controllerName + APIProvider.APIGenerator(this, this.RouteData.Values["action"].ToString(), id);
                    model = await APIProvider.Authorize_Get<FeatureViewModel>(_userSession.BearerToken, strUrl, APIConstant.API_Resource_CMS, ARS.Get);

                    if (!string.IsNullOrEmpty(model.Image) && !model.Image.Contains(ValueConstant.IMAGE_FEATURE_PATH))
                    {
                        model.Image = ValueConstant.IMAGE_FEATURE_PATH + "/" + model.Image;
                    }
                    return View(model);
                }
            }
            catch (HttpException ex)
            {
                Logger.LogError(ex);
                int statusCode = ex.GetHttpCode();
                if (statusCode == 401)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(FuntionType.Department, APIConstant.ACTION_ACCESS);
                    return new HttpUnauthorizedResult();
                }

                throw ex;
            }
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public async Task<ActionResult> Edit(FeatureViewModel model, HttpPostedFileBase fileUpload)
        {
            if (ModelState.IsValid)
            {
                if (fileUpload != null)
                {
                    //model.Image = fileUpload.FileName;
                    string imgName = "";
                    FileManagement.UploadImage(fileUpload, ValueConstant.IMAGE_FEATURE_PATH, ref imgName);
                    model.Image = imgName;
                }
                //else
                //    model.Image = string.Empty;

                //Call API Provider 
                string strUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_UPDATE);
                var result = await APIProvider.Authorize_DynamicTransaction<FeatureViewModel, bool>(model, _userSession.BearerToken, strUrl, APIConstant.API_Resource_CMS, ARS.IgnoredARS);

                if (result)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.FAIL));
                }
                return RedirectToAction("Index");
            }
            else
            {
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.FAIL));
                return View();
            }
        }
        #endregion

        #region Delete
        public async Task<ActionResult> Delete(FeatureViewModel model)
        {
            try
            {
                if (!await APIProvider.Authorization(_userSession.BearerToken, ARS.Delete))
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.FuntionType.Article, APIConstant.ACTION_DELETE);
                    return RedirectToAction("Index");
                }
                else
                {
                    return PartialView("_Delete", model);
                }
            }
            catch (HttpException ex)
            {
                Logger.LogError(ex);
                int statusCode = ex.GetHttpCode();
                if (statusCode == 401)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(FuntionType.Department, APIConstant.ACTION_ACCESS);
                    return new HttpUnauthorizedResult();
                }

                throw ex;
            }
        }

        [HttpPost]
        public async Task<ActionResult> Delete(byte id)
        {
            try
            {
                var model = new FeatureViewModel();
                model.Id = id;

                //Call API Provider - Transaction
                string apiUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_DELETE);
                var result = await APIProvider.Authorize_DynamicTransaction<FeatureViewModel, bool>(model, _userSession.BearerToken, apiUrl, APIConstant.API_Resource_CMS, ARS.IgnoredARS);

                if (result)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_DELETE, ApplicationGenerator.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_DELETE, ApplicationGenerator.TypeResult.FAIL));
                }

                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex);
                return RedirectToAction("Index");
            }
        }

        #endregion

        #region Check exist
        [HttpPost]
        [AllowAnonymous]
        public async Task<JsonResult> CheckExist(string title, byte id)
        {
            //Call API Provider - Get data
            string strUrl = APIProvider.APIGenerator(controllerName, new List<string> { nameof(id), nameof(title) }, false, id, title.Trim());
            var isExist = await APIProvider.Authorize_Get<bool>(_userSession.BearerToken, strUrl, APIConstant.API_Resource_CMS, ARS.Get);

            return Json(!isExist, JsonRequestBehavior.AllowGet);
        }
        #endregion
    }
}