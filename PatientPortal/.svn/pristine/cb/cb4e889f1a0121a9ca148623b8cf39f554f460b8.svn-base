using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Web.Mvc;
using PatientPortal.Internal.Common;
using PatientPortal.Internal.Models;
using PatientPortal.Internal.Utility;
using PatientPortal.Provider.Common;
using PatientPortal.Provider.Models;
using PatientPortal.Domain.LogManager;
using PatientPortal.Domain.Models.AUTHEN;

namespace PatientPortal.Internal.Controllers
{
    [Authorize]
    public class EmailMarketingController : Controller
    {
        private const string ControllerName = "EmailMarketing";
        private readonly IUserSession _userSession;

        public EmailMarketingController(IUserSession userSession)
        {
            _userSession = userSession;
        }

        // GET: EmailMarketing
        public async Task<ActionResult> Index()
        {
            var model = new EmailMarketingViewModel();

            var strUrl = ControllerName + APIProvider.APIGenerator(this, this.RouteData.Values["action"].ToString());
            var templates = await APIProvider.Get<List<EmailMarketingViewModel>>(strUrl, APIConstant.API_Resource_CORE);

            ViewBag.Templates = templates;
            return View(model);
        }

        /// <summary>
        /// Send email to group
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<ActionResult> Process(EmailMarketingViewModel model)
        {
            model.CreatedDate = DateTime.Now.ToString("yyyy-MM-dd");
            model.CreatedUser = _userSession.UserName;
            model.ModifiedDate = DateTime.Now.ToString("yyyy-MM-dd");
            model.ModifiedUser = _userSession.UserName;
            if (ModelState.IsValid)
            {
                try
                {
                    //Send email
                    var strUrl = APIProvider.APIGenerator(ControllerName, APIConstant.ACTION_SEND);
                    
                    //Save template
                    if (model.Type == "2")
                    {
                        strUrl = APIProvider.APIGenerator(ControllerName, APIConstant.ACTION_INSERT);
                    }
                    var result = await APIProvider.DynamicTransaction<EmailMarketingViewModel, int>(model, strUrl, APIConstant.API_Resource_CORE);

                    if (result > 0)
                    {
                        TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.SUCCESS, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_SEND, RenderMessage.TypeResult.SUCCESS));
                        if (model.Type == "2")
                            TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.SUCCESS, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_INSERT, RenderMessage.TypeResult.SUCCESS));
                    }
                    else
                    {
                        TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.SUCCESS, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_SEND, RenderMessage.TypeResult.SUCCESS));
                        if (model.Type == "2")
                            TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.FAIL, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_INSERT, RenderMessage.TypeResult.FAIL));
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex);
                    TempData["Alert"] = RenderMessage.RenderResult(RenderMessage.TypeResult.ERROR, ApplicationHelper.GeneralActionMessage(ValueConstant.ACTION_INSERT, RenderMessage.TypeResult.ERROR));
                }
            }
            return RedirectToAction("Index");
        }

        public async Task<ActionResult> LoadTemplate(int id)
        {
            //Call API Provider get template by id
            var strUrl = ControllerName + APIProvider.APIGenerator(this, this.RouteData.Values["action"].ToString(), id);
            var model = await APIProvider.Get<EmailMarketingViewModel>(strUrl, APIConstant.API_Resource_CORE);

            //Call API Provider get all template
            var strUrl2 = ControllerName + APIProvider.APIGenerator(this, this.RouteData.Values["action"].ToString());
            var templates = await APIProvider.Get<List<EmailMarketingViewModel>>(strUrl2, APIConstant.API_Resource_CORE);
            ViewBag.Templates = templates;
            
            return Json(model, JsonRequestBehavior.AllowGet);
        }
    }
}