using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace PatientPortal.API.Identity.Models
{
    public class PermissionRoleStore:IDisposable
    {
        private bool _disposed;
        private PermissionRoleStoreBase _permissionRoleStore;
        public PermissionRoleStore(DbContext context)
        {
            if (context == null)
            {
                throw new ArgumentNullException(nameof(context));
            }
            this.Context = context;
            this._permissionRoleStore = new PermissionRoleStoreBase(context);
        }


        public IQueryable<PermissionRole> PermissionRoles
        {
            get
            {
                return this._permissionRoleStore.EntitySet;
            }
        }

        public DbContext Context
        {
            get;
            private set;
        }

        public virtual List<PermissionRole> GetAll()
        {
            this.ThrowIfDisposed();
            return this._permissionRoleStore.GetAll();
        }

        public virtual Task<List<PermissionRole>> GetAllAsync()
        {
            this.ThrowIfDisposed();
            return this._permissionRoleStore.GetAllAsync();
        }

        public virtual void Create(PermissionRole obj)
        {
            this.ThrowIfDisposed();
            if (obj == null)
            {
                throw new ArgumentNullException(nameof(obj));
            }
            this._permissionRoleStore.Create(obj);
            this.Context.SaveChanges();
        }

        public virtual async Task CreateAsync(PermissionRole obj)
        {
            try
            {
                this.ThrowIfDisposed();
                if (obj == null)
                {
                    throw new ArgumentNullException(nameof(obj));
                }
                this._permissionRoleStore.Create(obj);
                await this.Context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public virtual async Task DeleteAsync(PermissionRole obj)
        {
            this.ThrowIfDisposed();
            if (obj == null)
            {
                throw new ArgumentNullException(nameof(obj));
            }
            this._permissionRoleStore.Delete(obj);
            await this.Context.SaveChangesAsync();
        }

        public virtual void Delete(PermissionRole obj)
        {
            this.ThrowIfDisposed();
            if (obj == null)
            {
                throw new ArgumentNullException(nameof(obj));
            }
            this._permissionRoleStore.Delete(obj);
            this.Context.SaveChanges();
        }

        public Task<PermissionRole> FindByIdAsync(string id)
        {
            this.ThrowIfDisposed();
            return this._permissionRoleStore.GetByIdAsync(id);
        }

        public PermissionRole FindById(string id)
        {
            this.ThrowIfDisposed();
            return this._permissionRoleStore.GetById(id);
        }

        public virtual async Task UpdateAsync(PermissionRole obj)
        {
            this.ThrowIfDisposed();
            if (obj == null)
            {
                throw new ArgumentNullException(nameof(obj));
            }
            this._permissionRoleStore.Update(obj);
            await this.Context.SaveChangesAsync();
        }

        public virtual void Update(PermissionRole obj)
        {
            this.ThrowIfDisposed();
            if (obj == null)
            {
                throw new ArgumentNullException(nameof(obj));
            }
            this._permissionRoleStore.Update(obj);
            this.Context.SaveChanges();
        }


        // DISPOSE STUFF: ===============================================

        public bool DisposeContext
        {
            get;
            set;
        }


        private void ThrowIfDisposed()
        {
            if (this._disposed)
            {
                throw new ObjectDisposedException(this.GetType().Name);
            }
        }


        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }


        protected virtual void Dispose(bool disposing)
        {
            if (this.DisposeContext && disposing && this.Context != null)
            {
                this.Context.Dispose();
            }
            this._disposed = true;
            this.Context = null;
            this._permissionRoleStore = null;
        }
    }
}