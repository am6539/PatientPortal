using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace PatientPortal.API.Identity.Models
{
    public class PermissionStore:IDisposable
    {
        private bool _disposed;
        private PermissionStoreBase _permissionStore;
        public PermissionStore(DbContext context)
        {
            if (context == null)
            {
                throw new ArgumentNullException("context");
            }
            this.Context = context;
            this._permissionStore = new PermissionStoreBase(context);
        }


        public IQueryable<Permission> Permissions
        {
            get
            {
                return this._permissionStore.EntitySet;
            }
        }

        public DbContext Context
        {
            get;
            private set;
        }

        public virtual List<Permission> GetAll()
        {
            this.ThrowIfDisposed();
            return this._permissionStore.GetAll();
        }

        public virtual Task<List<Permission>> GetAllAsync()
        {
            this.ThrowIfDisposed();
            return this._permissionStore.GetAllAsync();
        }

        public virtual void Create(Permission obj)
        {
            this.ThrowIfDisposed();
            if (obj == null)
            {
                throw new ArgumentNullException("Permission");
            }
            this._permissionStore.Create(obj);
            this.Context.SaveChanges();
        }

        public virtual async Task CreateAsync(Permission obj)
        {
            this.ThrowIfDisposed();
            if (obj == null)
            {
                throw new ArgumentNullException("Permission");
            }
            this._permissionStore.Create(obj);
            await this.Context.SaveChangesAsync();
        }

        public virtual async Task DeleteAsync(Permission obj)
        {
            this.ThrowIfDisposed();
            if (obj == null)
            {
                throw new ArgumentNullException("Permission");
            }
            this._permissionStore.Delete(obj);
            await this.Context.SaveChangesAsync();
        }

        public virtual void Delete(Permission obj)
        {
            this.ThrowIfDisposed();
            if (obj == null)
            {
                throw new ArgumentNullException("Permission");
            }
            this._permissionStore.Delete(obj);
            this.Context.SaveChanges();
        }

        public Task<Permission> FindByIdAsync(string id)
        {
            this.ThrowIfDisposed();
            return this._permissionStore.GetByIdAsync(id);
        }

        public Permission FindById(string id)
        {
            this.ThrowIfDisposed();
            return this._permissionStore.GetById(id);
        }

        public Permission FindByName(string name)
        {
            this.ThrowIfDisposed();
            return _permissionStore.EntitySet.Where(p => p.Name.ToUpper() == name.ToUpper()).FirstOrDefault();
        }

        public Task<Permission> FindByNameAsync(string name)
        {
            this.ThrowIfDisposed();
            return QueryableExtensions
                .FirstOrDefaultAsync<Permission>(this._permissionStore.EntitySet,
                    (Permission u) => u.Name.ToUpper() == name.ToUpper());
        }

        public virtual async Task UpdateAsync(Permission obj)
        {
            this.ThrowIfDisposed();
            if (obj == null)
            {
                throw new ArgumentNullException("Permission");
            }
            this._permissionStore.Update(obj);
            await this.Context.SaveChangesAsync();
        }

        public virtual void Update(Permission obj)
        {
            this.ThrowIfDisposed();
            if (obj == null)
            {
                throw new ArgumentNullException("Permission");
            }
            this._permissionStore.Update(obj);
            this.Context.SaveChanges();
        }


        // DISPOSE STUFF: ===============================================

        public bool DisposeContext
        {
            get;
            set;
        }


        private void ThrowIfDisposed()
        {
            if (this._disposed)
            {
                throw new ObjectDisposedException(this.GetType().Name);
            }
        }


        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }


        protected virtual void Dispose(bool disposing)
        {
            if (this.DisposeContext && disposing && this.Context != null)
            {
                this.Context.Dispose();
            }
            this._disposed = true;
            this.Context = null;
            this._permissionStore = null;
        }
    }
}