using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.Owin;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace PatientPortal.API.Identity.Models
{
    public class PermissionManager
    {
        private PermissionStore _permissionStore;
        private ApplicationDbContext _db;
        private ApplicationUserManager _userManager;
        private ApplicationRoleManager _roleManager;

        public PermissionManager()
        {
            _db = HttpContext.Current
                .GetOwinContext().Get<ApplicationDbContext>();
            _userManager = HttpContext.Current
                .GetOwinContext().GetUserManager<ApplicationUserManager>();
            _roleManager = HttpContext.Current
                .GetOwinContext().Get<ApplicationRoleManager>();
            _permissionStore = new PermissionStore(_db);
        }

        public IQueryable<Permission> Permissions
        {
            get
            {
                return _permissionStore.Permissions;
            }
        }

        #region Permission
        /// <summary>
        /// Create new Permission Async
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public async Task<IdentityResult> CreatePermissionAsync(Permission obj)
        {
            await _permissionStore.CreateAsync(obj);
            return IdentityResult.Success;
        }


        /// <summary>
        /// Create new Permission
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public IdentityResult CreatePermission(Permission obj)
        {
            _permissionStore.Create(obj);
            return IdentityResult.Success;
        }

        public async Task<Permission> FindByIdAsync(string id)
        {
            return await _permissionStore.FindByIdAsync(id);
        }

        /// <summary>
        /// Find by Permission Id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public Permission FindById(string id)
        {
            return _permissionStore.FindById(id);
        }

        /// <summary>
        /// Set Permission Role by RoleName 
        /// </summary>
        /// <param name="permissionId"></param>
        /// <param name="roleNames"></param>
        /// <returns></returns>
        public IdentityResult SetPermissionRoles(string permissionId, params string[] roleNames)
        {
            // Clear all the roles associated with this group:
            var _permission = this.FindById(permissionId);
            _permission.PermissionRoles.Clear();
            _db.SaveChanges();

            // Add the new roles passed in:
            var newRoles = _roleManager.Roles.Where(r => roleNames.Any(n => n == r.Name));
            foreach (var role in newRoles)
            {
                _permission.PermissionRoles.Add(new PermissionRole
                {
                    PermissionId = permissionId,
                    RoleId = role.Id
                });
            }
            _db.SaveChanges();
            return IdentityResult.Success;
        }

        /// <summary>
        /// Delete Permission Async
        /// </summary>
        /// <param name="permissionId"></param>
        /// <returns></returns>
        public async Task<IdentityResult> DeletePermissionAsync(string permissionId)
        {
            var _permission = await this.FindByIdAsync(permissionId);
            if (_permission == null)
            {
                throw new ArgumentNullException("Permission");
            }

            // Remove the permission itself:
            if (!IsExistInRoles(permissionId))
            { 
                _db.Permissions.Remove(_permission);
                await _db.SaveChangesAsync();
                return IdentityResult.Success;
            }
            else
                return IdentityResult.Failed("Is used!");
        }

        /// <summary>
        /// Delete Permission
        /// </summary>
        /// <param name="permissionId"></param>
        /// <returns></returns>
        public IdentityResult DeletePermission(string permissionId)
        {
            var _permission = this.FindById(permissionId);
            if (_permission == null)
            {
                throw new ArgumentNullException("Permission");
            }

            // Remove the permission itself:
            if (!IsExistInRoles(permissionId))
            {
                _db.Permissions.Remove(_permission);
                _db.SaveChanges();
                return IdentityResult.Success;
            }
            else
                return IdentityResult.Failed("Is used!");
            
        }

        /// <summary>
        /// Update Permission Async
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public async Task<IdentityResult> UpdatePermissionAsync(Permission obj)
        {
            await _permissionStore.UpdateAsync(obj);
            return IdentityResult.Success;
        }

        /// <summary>
        /// Update Permission
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public IdentityResult UpdatePermission(Permission obj)
        {
            _permissionStore.Update(obj);
            return IdentityResult.Success;
        }
        #endregion

        #region PermissionRole

        /// <summary>
        /// Check Exist Permission
        /// </summary>
        /// <param name="permissionId"></param>
        /// <returns></returns>
        public bool IsExistInRoles(string permissionId)
        {
            var _ret = (from p in this.Permissions where p.PermissionRoles.Any(u => u.PermissionId == permissionId) select p.Id).Any();
            return _ret;
        }

        /// <summary>
        /// Get Permission Roles
        /// </summary>
        /// <param name="roleId"></param>
        /// <returns></returns>
        public IEnumerable<PermissionRole> GetPermissionRoles(string roleId)
        {
            List<PermissionRole> data = (from g in this.Permissions where g.PermissionRoles.Any(u => u.RoleId == roleId) select new PermissionRole {
                PermissionId = g.Id, RoleId = roleId
            }).ToList();
            return data;
        }
        /// <summary>
        /// Update Permission-Roles
        /// </summary>
        /// <param name="roleId"></param>
        /// <param name="permissionList"></param>
        /// <returns></returns>
        public async Task<IdentityResult> UpdatePermissionRolesAsync(string roleId, List<string> permissionList)
        {
            if(permissionList == null || permissionList.Count < 1)
                throw new ArgumentNullException("PermissionRoles");

            //Delete all Permission
            var _permissionRoles = GetPermissionRoles(roleId);
            if (_permissionRoles != null && _permissionRoles.Count() > 0)
            {
                try
                {
                    foreach(var item in _permissionRoles)
                    {
                        var _permission = await this.FindByIdAsync(item.PermissionId);
                        _permission.PermissionRoles.Remove(item);
                    }
                    await _db.SaveChangesAsync();
                }
                catch(Exception ex)
                {
                    return IdentityResult.Failed("Lỗi khi xóa danh sách quyền cũ",ex.Message);
                }
            }

            //Update Permission
            try { 
                foreach (var item in permissionList)
                {
                    var _permission = await this.FindByIdAsync(item);
                    _permission.PermissionRoles.Add(new PermissionRole
                    {
                        PermissionId = item,
                        RoleId = roleId
                    });
                }
                await _db.SaveChangesAsync();
                return IdentityResult.Success;
            }
            catch(Exception ex)
            {
                return IdentityResult.Failed("Lỗi khi cập nhật danh sách quyền",ex.Message);
            }
        }

        /// <summary>
        /// Update Permission-Roles
        /// </summary>
        /// <param name="roleId"></param>
        /// <param name="permissionList"></param>
        /// <returns></returns>
        public IdentityResult UpdatePermissionRoles(string roleId, List<string> permissionList)
        {
            if (permissionList == null || permissionList.Count < 1)
                throw new ArgumentNullException("PermissionRoles");

            //Delete all Permission
            var _permissionRoles = GetPermissionRoles(roleId);
            if (_permissionRoles != null && _permissionRoles.Count() > 0)
            {
                try
                {
                    foreach (var item in _permissionRoles)
                    {
                        var _permission = this.FindById(item.PermissionId);
                        _permission.PermissionRoles.Remove(item);
                    }
                    _db.SaveChanges();
                }
                catch (Exception ex)
                {
                    return IdentityResult.Failed("Lỗi khi xóa danh sách quyền cũ", ex.Message);
                }
            }

            //Update Permission
            try
            {
                foreach (var item in permissionList)
                {
                    var _permission = this.FindById(item);
                    _permission.PermissionRoles.Add(new PermissionRole
                    {
                        PermissionId = item,
                        RoleId = roleId
                    });
                }
                _db.SaveChanges();
                return IdentityResult.Success;
            }
            catch (Exception ex)
            {
                return IdentityResult.Failed("Lỗi khi cập nhật danh sách quyền", ex.Message);
            }
        }

        /// <summary>
        /// Set Permission Role by RoleName Async
        /// </summary>
        /// <param name="permissionId"></param>
        /// <param name="roleNames"></param>
        /// <returns></returns>
        public async Task<IdentityResult> SetPermissionRolesAsync(string permissionId, params string[] roleNames)
        {
            // Clear all the roles associated with this group:
            var _permission = await this.FindByIdAsync(permissionId);
            _permission.PermissionRoles.Clear();
            await _db.SaveChangesAsync();

            // Add the new roles passed in:
            var newRoles = _roleManager.Roles
                            .Where(r => roleNames.Any(n => n == r.Name));
            foreach (var role in newRoles)
            {
                _permission.PermissionRoles.Add(new PermissionRole
                {
                    PermissionId = permissionId,
                    RoleId = role.Id
                });
            }
            await _db.SaveChangesAsync();
            return IdentityResult.Success;
        }

        #endregion

    }
}