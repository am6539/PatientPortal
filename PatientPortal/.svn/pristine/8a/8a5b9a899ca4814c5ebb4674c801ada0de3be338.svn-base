using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.Owin;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using System.Web;
using System.Web.Http;
using System.Web.Http.Controllers;
using PatientPortal.IRepository.Authorize;
using System.Security.Claims;
using WebMatrix.WebData;
using PatientPortal.Provider.Common;

namespace PatientPortal.API.Core.Models
{
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, Inherited = true, AllowMultiple = true)]
    public class AuthorizeRolesAttribute : AuthorizeAttribute
    {
        public IUserAuthorizationRepo UserAuthorization { get; set; }

        //Custom named parameters for annotation
        public string ResourceKey { get; set; }
        public string OperationKey { get; set; }

        protected override bool IsAuthorized(HttpActionContext actionContext)
        {
            var authorize = true;
            var principalIdentity = actionContext.RequestContext.Principal.Identity;
            if (!principalIdentity.IsAuthenticated) return !authorize;
            
            var userId = principalIdentity.GetUserId();

            if (userId.Length > 0)
            {
                if (userId == null || userId.Length < 1)
                    return !authorize;
                //var rd = actionContext.Request.GetRouteData();
                if(actionContext.Request.Headers.Contains(APIConstant.XAuthorizeHeaderARS)) OperationKey = actionContext.Request.Headers.GetValues(APIConstant.XAuthorizeHeaderARS).FirstOrDefault();

                if (OperationKey == ARS.IgnoredARS) return authorize;

                if (OperationKey == null || OperationKey.Length < 1) OperationKey = actionContext.ActionDescriptor.ActionName;
                ResourceKey = actionContext.ControllerContext.ControllerDescriptor.ControllerName;

                //Check global action
                
                //if (APIConstant.ARS_Global.Where(x => string.Equals(OperationKey, x, StringComparison.OrdinalIgnoreCase)).Any()) return authorize;

                Dictionary<string, dynamic> para = new Dictionary<string, dynamic>();
                para.Add("UserId", userId);
                para.Add("OperationKey", OperationKey);
                para.Add("ResourceKey", ResourceKey);
                para.Add("DefaultRoleInitial", APIConstant.DefaultRoleInitial);

                // Get the request lifetime scope so you can resolve services.
                var requestScope = actionContext.Request.GetDependencyScope();

                // Resolve the service you want to use.
                var service = requestScope.GetService(typeof(IUserAuthorizationRepo)) as IUserAuthorizationRepo;
                //var task = service.CheckPermission(para);
                authorize = Task.Run(async () => await service.CheckPermission(para)).Result;

                
            }
            return authorize;
        }

        public override void OnAuthorization(HttpActionContext actionContext)
        {
            if(actionContext.Request.Headers.Authorization == null)
            {
                actionContext.Response = new System.Net.Http.HttpResponseMessage(System.Net.HttpStatusCode.Unauthorized);
            }
            else
                base.OnAuthorization(actionContext);
        }
    }
}