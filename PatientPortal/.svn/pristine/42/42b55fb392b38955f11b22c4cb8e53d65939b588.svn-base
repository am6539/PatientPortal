using PatientPortal.Domain.LogManager;
using PatientPortal.Internal.Models;
using PatientPortal.Provider.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web.Mvc;
using PatientPortal.Provider.Common;
using System.Threading;
using Microsoft.AspNet.Identity;
using static PatientPortal.Internal.Common.ValueConstant;

namespace PatientPortal.Internal.Controllers
{
    public class ArticleController : Controller
    {
        private static string controllerName = "QAMedical";
        // GET: Article
        public async Task<ActionResult> Index(byte type = 0)
        {
            var model = new List<ArticleViewModel>();
            try
            {
                //Call API Provider
                var list = await APIProvider.Get<List<ArticleViewModel>>(controllerName, APIConstant.API_Resource_CORE);

                if (type == 1 && list != null)
                {
                    //Get list Unanswer
                    list = list.Where(i => i.CountComments == 0).ToList();
                }
                ViewBag.TypePage = type;
                model = list != null ? list.OrderByDescending(i => i.Date).ToList() : model;
            }
            catch (Exception ex)
            {
                Logger.LogError(ex);
                throw ex.GetBaseException();
            }

            return View(model);
        }

        public async Task<ActionResult> Details(int id)
        {
            ArticlesModel model = new ArticlesModel();
            var article = await GetArticle(id);
            var comments = await GetArticleComment(id);

            model.ArticleViewModel = article;
            model.lstArticleCommentModel = comments;

            model.ArticleCommentModel = new ArticleCommentViewModel() {
                CreatedUser = GetUserId(),
                ArticleId = id
            };
            return View(model);
        }

        [HttpPost]
        public async Task<ActionResult> Details(ArticlesModel model)
        {
            var comment = model.ArticleCommentModel;
            comment.Status = (byte)ArticleStatus.JustCreated;
            comment.Date = DateTime.Now;
            if(ModelState.IsValid)
            {
                string strUrl = APIProvider.APIGenerator(controllerName + "/Comment", APIConstant.ACTION_INSERT);
                var result = await InvokeTransaction(comment, strUrl);
                if (result > 0)
                {
                    return RedirectToAction("Details", new { id = comment.ArticleId });
                }
                else
                {
                    model = await SetArticleComment(comment);
                    return View("Details", model);
                }
            }
            else
            {
                model = await SetArticleComment(comment);
                return View("Details", model);
            }
        }

        private async Task<ArticlesModel> SetArticleComment(ArticleCommentViewModel comment)
        {
            ArticlesModel articlecomment = new ArticlesModel();
            var article = await GetArticle(comment.ArticleId);
            var comments = await GetArticleComment(comment.ArticleId);

            articlecomment.ArticleViewModel = article;
            articlecomment.lstArticleCommentModel = comments;

            articlecomment.ArticleCommentModel = comment;

            return articlecomment;
        }

        private async Task<ArticleViewModel> GetArticle(int id)
        {
            var apiUrl = controllerName + APIProvider.APIGenerator(this, this.RouteData.Values["action"].ToString(), id);
            return await APIProvider.Get<ArticleViewModel>(apiUrl, APIConstant.API_Resource_CORE);
        }

        private async Task<List<ArticleCommentViewModel>> GetArticleComment(int id)
        {
            var apiUrl = controllerName + "/GetAllComment?idArticle=" + Convert.ToString(id);
            var model = await APIProvider.Get<List<ArticleCommentViewModel>>(apiUrl, APIConstant.API_Resource_CORE);
            return model;
        }
        private string GetUserId()
        {
            var identity = Thread.CurrentPrincipal.Identity;
            if (identity == null && HttpContext.User != null)
            {
                identity = HttpContext.User.Identity;
            }
            return identity.GetUserId();
        }
        private static async Task<int> InvokeTransaction(ArticleCommentViewModel model, string strUrl)
        {
            var result =
                await APIProvider.DynamicTransaction<ArticleCommentViewModel, int>(model, strUrl, APIConstant.API_Resource_CORE);
            return result;
        }
    }
}