using PatientPortal.Internal.Common;
using PatientPortal.Internal.Models;
using PatientPortal.Provider.Common;
using PatientPortal.Provider.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using PatientPortal.Utility.Application;
using PatientPortal.Domain.LogManager;
using PatientPortal.Utility.Files;
using PatientPortal.Domain.Models.AUTHEN;
using Microsoft.Owin.Security;
using static PatientPortal.Utility.Application.ApplicationGenerator;

namespace PatientPortal.Internal.Controllers
{
    [Authorize]
    [AppHandleError]
    public class DepartmentController : Controller
    {
        private static string controllerName = string.Empty;

        #region Authentication Manager
        private readonly IUserSession _userSession;
        private IAuthenticationManager AuthenticationManager
        {
            get
            {
                return HttpContext.GetOwinContext().Authentication;
            }
        }

        public DepartmentController(IUserSession userSession)
        {
            _userSession = userSession;
        }
        #endregion

        #region Get List
        // GET: Feature
        public async Task<ActionResult> Index()
        {
            var results = new DepartmentModel();
            try
            {
                var token = _userSession.BearerToken;
                //Call API Provider
                controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                var list = await APIProvider.Authorize_Get<List<DepartmentViewModel>>(token, controllerName, APIConstant.API_Resource_CORE, ARS.Get);

                var model = new DepartmentViewModel();

                results.lstDepartmentViewModel = (list == null? new List<DepartmentViewModel>() : list);
                results.DepartmentViewModel = model;

                TempData["Data"] = list;
            }
            catch (HttpException ex)
            {
                Logger.LogError(ex);
                int statusCode = ex.GetHttpCode();
                if (statusCode == 401)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(FuntionType.Department, APIConstant.ACTION_ACCESS);
                    return new HttpUnauthorizedResult();
                }
                
                throw ex;
            }
            return View(results);
        }
        #endregion

        #region Create
        [ValidateAntiForgeryToken]
        [HttpPost]
        public async Task<ActionResult> Create(DepartmentViewModel model, HttpPostedFileBase fileUpload)
        {
            if(!await APIProvider.Authorization(_userSession.BearerToken, ARS.Insert))
            {
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.FuntionType.Department, APIConstant.ACTION_INSERT);
                return RedirectToAction("Index");
            }
            else
            {
                if (ModelState.IsValid)
                {
                    if (fileUpload != null) model.Img = fileUpload.FileName;

                    //Call API Provider
                    string strUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_INSERT);
                    var result = await APIProvider.Authorize_DynamicTransaction<DepartmentViewModel, bool>(model, _userSession.BearerToken, strUrl, APIConstant.API_Resource_CORE, ARS.Insert);

                    if (result)
                    {
                        if (fileUpload != null)
                        {
                            FileManagement.UploadImage(fileUpload, ValueConstant.IMAGE_DEPARTMENT_PATH);
                        }

                        TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.SUCCESS));
                    }
                    else
                    {
                        TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.FAIL));
                    }
                    return RedirectToAction("Index");
                }
                else
                {
                    var department = new DepartmentModel();
                    department.lstDepartmentViewModel = (List<DepartmentViewModel>)TempData["Data"];

                    if (department.lstDepartmentViewModel == null) department.lstDepartmentViewModel = ApplicationGenerator.GetObject<List<DepartmentViewModel>>();
                    department.DepartmentViewModel = model;

                    //TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.FAIL));
                    return View("Index", department);
                }
            }
        }
        #endregion

        #region Edit

        [HttpGet]
        public async Task<ActionResult> Edit(short id)
        {
            if (!await APIProvider.Authorization(_userSession.BearerToken, ARS.Edit))
            {
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.FuntionType.Department, APIConstant.ACTION_UPDATE);
                return RedirectToAction("Index");
            }
            else
            {
                var model = new DepartmentViewModel();
                try
                {
                    //Call API Provider
                    string strUrl = APIProvider.APIGenerator(this, this.RouteData.Values["action"].ToString(), id);
                    model = await APIProvider.Authorize_Get<DepartmentViewModel>(_userSession.BearerToken, controllerName + strUrl, APIConstant.API_Resource_CORE, ARS.IgnoredARS);
                    ViewBag.Img = Path.Combine(ValueConstant.IMAGE_DEPARTMENT_PATH, model.Img);
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex);
                    throw ex;
                }
                return View(model);
            }
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public async Task<ActionResult> Edit(DepartmentViewModel model, HttpPostedFileBase fileUpload)
        {
            if (ModelState.IsValid)
            {
                if (fileUpload != null) model.Img = fileUpload.FileName;

                //Call API Provider
                string strUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_UPDATE);
                var result = await APIProvider.Authorize_DynamicTransaction<DepartmentViewModel, bool>(model, _userSession.BearerToken, strUrl, APIConstant.API_Resource_CORE, ARS.Edit);

                if (result)
                {
                    if (fileUpload != null)
                    {
                        FileManagement.UploadImage(fileUpload, ValueConstant.IMAGE_DEPARTMENT_PATH);
                    }

                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.FAIL));
                }
                return RedirectToAction("Index");
            }
            else
            {
               // TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ValueConstant.ACTION_UPDATE, ApplicationGenerator.TypeResult.FAIL));
                return View();
            }
        }
        #endregion

        #region Delete
        public async Task<ActionResult> Delete(DepartmentViewModel model)
        {
            //Call API Provider
            if (!await APIProvider.Authorization(_userSession.BearerToken, ARS.Delete))
            {
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.FuntionType.Department, APIConstant.ACTION_DELETE);
                return RedirectToAction("Index");
            }
            else
            {
                return PartialView("_Delete", model);
            }
        }

        [HttpPost]
        public async Task<ActionResult> Delete(short id)
        {
            try
            {
                var model = new DepartmentViewModel();
                model.Id = id;

                //Call API Provider
                string strUrl = APIProvider.APIGenerator(controllerName, APIConstant.ACTION_DELETE);
                var result = await APIProvider.Authorize_DynamicTransaction<DepartmentViewModel, bool>(model, _userSession.BearerToken, strUrl, APIConstant.API_Resource_CORE, ARS.IgnoredARS);

                if (result)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_DELETE, ApplicationGenerator.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_DELETE, ApplicationGenerator.TypeResult.FAIL));
                }

                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_DELETE, ApplicationGenerator.TypeResult.FAIL));
                Logger.LogError(ex);
                return RedirectToAction("Index");
            }
        }

        #endregion

        #region Check exist
        [HttpPost]
        [AllowAnonymous]
        public async Task<JsonResult> CheckExist(string name, short id)
        {

            //Call API Provider
            string strUrl = APIProvider.APIGenerator(controllerName, new List<string> { nameof(id), nameof(name) }, false , id, name.Trim());
            var isExist = await APIProvider.Authorize_Get<bool>(_userSession.BearerToken, strUrl, APIConstant.API_Resource_CORE, ARS.IgnoredARS);

            return Json(!isExist, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Services
        public async Task<ActionResult> Services(short departmentId)
        {
            var results = new DepartmentServicesModel();
            results.Services = new DepartmentServicesViewModel();
            try
            {
                //Call API Provider
                string strUrl = APIProvider.APIGenerator(controllerName, new List<string> { "id" }, false, departmentId);
                var department = await APIProvider.Authorize_Get<DepartmentViewModel>(_userSession.BearerToken, strUrl, APIConstant.API_Resource_CORE, ARS.Get);

                //Call API Provider
                strUrl = APIProvider.APIGenerator("DepartmentServices", new List<string> { nameof(departmentId) }, true, departmentId);
                var list = await APIProvider.Authorize_Get<List<DepartmentServicesViewModel>>(_userSession.BearerToken, strUrl, APIConstant.API_Resource_CORE,ARS.Get);
                if (list == null) list = new List<DepartmentServicesViewModel>();
                results.lstServices = list;
                ViewData["Department"] = department.Name;
            }
            catch (Exception ex)
            {
                Logger.LogError(ex);
                throw ex;
            }
            return View(results);
        }
        public async Task<ActionResult> ServicesCreate(DepartmentServicesViewModel model)
        {
            if (ModelState.IsValid)
            {
                //Call API Provider
                string strUrl = APIProvider.APIGenerator("DepartmentServices", APIConstant.ACTION_INSERT);
                var result = await APIProvider.Authorize_DynamicTransaction<DepartmentServicesViewModel, bool>(model, _userSession.BearerToken, strUrl, APIConstant.API_Resource_CORE, ARS.Insert);

                if (result)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_INSERT, ApplicationGenerator.TypeResult.FAIL));
                }
                return RedirectToAction("Services", new {departmentId = model.DepartmentId });
            }
            else
            {
                return View("Index", model);
            }
        }

        public async Task<ActionResult> ServicesDelete(DepartmentServicesViewModel model)
        {
            if (!await APIProvider.Authorization(_userSession.BearerToken, ARS.Delete))
            {
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.FuntionType.Department, APIConstant.ACTION_INSERT);
                return RedirectToAction("Index");
            }
            else
            {
                return PartialView("_ServicesDelete", model);
            }
        }

        [HttpPost]
        public async Task<ActionResult> ServicesDelete(short id, short departmentId)
        {
            try
            {
                var model = new DepartmentServicesViewModel();
                model.Id = id;
                model.DepartmentId = departmentId;

                //Call API Provider
                string strUrl = APIProvider.APIGenerator("DepartmentServices", APIConstant.ACTION_DELETE);
                var result = await APIProvider.Authorize_DynamicTransaction<DepartmentServicesViewModel, bool>(model, _userSession.BearerToken, strUrl, APIConstant.API_Resource_CORE, ARS.Delete);

                if (result)
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_DELETE, ApplicationGenerator.TypeResult.SUCCESS));
                }
                else
                {
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_DELETE, ApplicationGenerator.TypeResult.FAIL));
                }

                return RedirectToAction("Services", new { departmentId = departmentId });
            }
            catch (Exception ex)
            {
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(APIConstant.ACTION_DELETE, ApplicationGenerator.TypeResult.FAIL));
                Logger.LogError(ex);
                return RedirectToAction("Services", new { departmentId = departmentId });
            }
        }
        #endregion
    }
}