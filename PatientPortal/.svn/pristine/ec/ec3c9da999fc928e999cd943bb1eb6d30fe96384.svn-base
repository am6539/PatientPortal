using Microsoft.AspNet.Identity;
using Microsoft.Owin.Security;
using Newtonsoft.Json;
using PatientPortal.Domain.Common;
using PatientPortal.Domain.Models.AUTHEN;
using PatientPortal.Internal.Models.Account;
using PatientPortal.Provider.Common;
using PatientPortal.Provider.Models;
using PatientPortal.Utility.Application;
using ConstValInternal = PatientPortal.Internal.Common.ValueConstant;
using System;
using System.Collections.Generic;
using System.Security.Claims;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using WebMatrix.WebData;
using System.IO;
using PatientPortal.Utility.Files;
using PatientPortal.Domain.LogManager;
using PatientPortal.Internal.Models;

namespace PatientPortal.Internal.Controllers
{
    [Authorize]
    public class AccountController : Controller
    {
        private readonly IUserSession _userSession;
        private static string controllerName = string.Empty;
        private IAuthenticationManager AuthenticationManager
        {
            get
            {
                return HttpContext.GetOwinContext().Authentication;
            }
        }

        public AccountController(IUserSession userSession)
        {
            _userSession = userSession;
        }

        #region Get list user
        public ActionResult Index()
        {
            return View();
        }
        #endregion

        #region Create new Account
        public async Task<ActionResult> Create()
        {
            var token = _userSession.BearerToken;
            var listRole = await APIProvider.Authorize_Get<List<RoleViewModel>>(token, ConstValInternal.GET_ROLE, ConstValInternal.AUTHEN_TAG);
            if (listRole != null)
                ViewBag.Role = listRole;
            else
                ViewBag.Role = new List<RoleViewModel>();

            return View();
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public async Task<ActionResult> Create(RegisterViewModel model, HttpPostedFileBase fileUpload)
        {
            string strUrl = controllerName + ConstValInternal.REGISTER;
            var token = _userSession.BearerToken;

            if (ModelState.IsValid)
            {
                //Call API Provider
                try
                {
                    string name = string.Empty;
                    if (fileUpload != null)
                    {
                        string imagePath = CreateFolder();
                        FileManagement.UploadImage(fileUpload, imagePath, ref name);
                    }
                    else
                    {
                        name = ConstValInternal.PATH_IMAGE_DEFAULT;
                    }

                    model.RegisterBindingModel.Image = name;
                    var result = await APIProvider.Authorize_DynamicTransaction<RegisterBindingModel, bool>(model.RegisterBindingModel, token, strUrl, ConstValInternal.AUTHEN_TAG);

                    var roles = model.UserRoleBindingModel.RoleId;

                    if (Response.StatusCode == 200)
                    {
                        TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(ConstValInternal.ACTION_INSERT, ApplicationGenerator.TypeResult.SUCCESS));
                    }
                    else
                    {
                        TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ConstValInternal.ACTION_INSERT, ApplicationGenerator.TypeResult.FAIL));
                        return View();
                    }
                    return RedirectToAction("Index");
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex);
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.ERROR, ApplicationGenerator.GeneralActionMessage(ConstValInternal.ACTION_INSERT, ApplicationGenerator.TypeResult.ERROR));
                    throw ex;
                }
            }
            else
            {
                var listRole = await APIProvider.Authorize_Get<List<RoleViewModel>>(token, ConstValInternal.GET_ROLE, ConstValInternal.AUTHEN_TAG);
                if (listRole != null)
                    ViewBag.Role = listRole;
                else
                    ViewBag.Role = new List<RoleViewModel>();

                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ConstValInternal.ACTION_INSERT, ApplicationGenerator.TypeResult.FAIL));
                return View(model);
            }
        }

        private string CreateFolder()
        {
            try
            {
                //string nameFolder = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00");
                //string path = ValueConstant.IMAGE_PATH + ValueConstant.IMAGE_POST_PATH + nameFolder;
                string mapPath = Server.MapPath(ConstValInternal.PATH_AVATAR);
                if (!Directory.Exists(mapPath))
                {
                    Directory.CreateDirectory(mapPath);
                    return ConstValInternal.PATH_AVATAR;
                }
                else
                    return ConstValInternal.PATH_AVATAR;
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        #endregion

        #region Edit account
        public async Task<ActionResult> Edit(Guid id)
        {
            var model = new RegisterViewModel();
            try
            {
                //Call API Provider
                var token = _userSession.BearerToken;
                controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                //Call API Provider
                string strUrl = controllerName + "/GetInfoEdit?id=" + id;
                model.RegisterBindingModel = await APIProvider.Authorize_Get<RegisterBindingModel>(token, strUrl, APIConstant.API_Resource_Authencation);
                if (model != null)
                    return View(model);
                else
                    return View(model);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex);
                throw ex;
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Edit(RegisterViewModel model, HttpPostedFileBase fileUpload)
        {
            if (ModelState.IsValid)
            {
                //Call API Provider
                string strUrl = controllerName + ConstValInternal.UPDATE_USER;
                var token = _userSession.BearerToken;

                try
                {
                    string name = string.Empty;
                    if (fileUpload != null)
                    {
                        string imagePath = CreateFolder();
                        FileManagement.UploadImage(fileUpload, imagePath, ref name);
                    }
                    else
                    {
                        name = ConstValInternal.PATH_IMAGE_DEFAULT;
                    }

                    model.RegisterBindingModel.Image = name;
                    var result = await APIProvider.Authorize_DynamicTransaction<RegisterBindingModel, bool>(model.RegisterBindingModel, token, strUrl, ConstValInternal.AUTHEN_TAG);
                    if (Response.StatusCode == 200)
                    {
                        TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.SUCCESS, ApplicationGenerator.GeneralActionMessage(ConstValInternal.ACTION_INSERT, ApplicationGenerator.TypeResult.SUCCESS));
                    }
                    else
                    {
                        TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ConstValInternal.ACTION_INSERT, ApplicationGenerator.TypeResult.FAIL));
                        return View();
                    }
                    return RedirectToAction("Index");
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex);
                    TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.ERROR, ApplicationGenerator.GeneralActionMessage(ConstValInternal.ACTION_INSERT, ApplicationGenerator.TypeResult.ERROR));
                    throw ex;
                }
            }
            else
            {
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.FAIL, ApplicationGenerator.GeneralActionMessage(ConstValInternal.ACTION_INSERT, ApplicationGenerator.TypeResult.FAIL));
                return View(model);
            }
        }

        #endregion

        #region Login
        // GET: /Account/Login
        [AllowAnonymous]
        public ActionResult Login()
        {
            controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
            if (WebSecurity.IsAuthenticated)
            {
                return RedirectToAction("Index", "Home");
            }
            else
            {
                Session.Abandon();
            }
            //Session["SessionId"] = HttpContext.Session.SessionID;
            return View();
        }

        // POST: /Account/Login
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Login(LoginModel model, string returnUrl)
        {
            var token = AuthenAPIHelper.GetToken(model.UserName, model.Password);
            if (string.IsNullOrEmpty(token.AccessToken))
            {
                var error = JsonConvert.DeserializeObject<dynamic>(token.Json.ToString());
                ModelState.AddModelError(string.Empty, error.error_description.ToString());
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.LOGINERROR,
                    ApplicationGenerator.GeneralActionMessage(null, ApplicationGenerator.TypeResult.LOGINERROR));

                return View(model);
            }
            var tokenDynamic = JsonConvert.DeserializeObject<dynamic>(token.Json.ToString());
            string username = tokenDynamic.userName;
            string access_token = tokenDynamic.access_token;

            //Get Secret User Info
            UserSecretInfoViewModel info = await APIProvider.Authorize_Get<UserSecretInfoViewModel>(access_token, controllerName, "GetSecretInfo", null, APIConstant.API_Resource_Authencation);
            if (info == null)
            {
                ModelState.AddModelError(string.Empty, "Không tìm thấy thông tin tài khoản");
                TempData["Alert"] = ApplicationGenerator.RenderResult(ApplicationGenerator.TypeResult.ERROR,
                    ApplicationGenerator.GeneralActionMessage(null, ApplicationGenerator.TypeResult.USER_NOT_EXIST));

                return View(model);
            }


            var claims = new List<Claim> {
                new Claim(ClaimTypes.NameIdentifier,info.NameIdentifier , ClaimValueTypes.String),
                new Claim(ClaimTypes.Email,info.Email , ClaimValueTypes.String),
                new Claim(ClaimTypes.Name,info.Name , ClaimValueTypes.String),
                new Claim("UserName", username, ClaimValueTypes.String),
                new Claim(ValueConstant.TOKEN, string.Format("{0}", access_token), ClaimValueTypes.String)
            };
            var claimsIdentity = new ClaimsIdentity(claims, DefaultAuthenticationTypes.ApplicationCookie);

            AuthenticationManager.SignIn(new AuthenticationProperties() { IsPersistent = false }, claimsIdentity);

            HttpContext.User = AuthenticationManager.AuthenticationResponseGrant.Principal;

            if (returnUrl == null || returnUrl.Length < 1) return RedirectToAction("Index", "Home");

            return RedirectToAction(returnUrl);
        }
        #endregion

        // GET: /Account/LogOff
        public ActionResult LogOff()
        {
            AuthenticationManager.SignOut();
            Session.Abandon();
            return RedirectToAction("Index", "Home");
        }
    }
}