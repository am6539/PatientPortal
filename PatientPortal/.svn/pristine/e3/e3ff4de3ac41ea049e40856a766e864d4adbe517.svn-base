using PatientPortal.DataAccess.Repo.CORE;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Transactions;
using PatientPortal.DataAccess.Dapper;
using Dapper;
using PatientPortal.Domain.Utilities;
using PatientPortal.Domain.Models.CORE;
using PatientPortal.DataAccess.Repo.Wrapper;
using PatientPortal.Domain.Common;

namespace PatientPortal.DataAccess.CORE
{
    public class GroupImpl : IGroup
    {
        private readonly IAdapterPattern _adapterPattern;

        public GroupImpl(IAdapterPattern adapterPattern)
        {
            this._adapterPattern = adapterPattern;
        }

        public async Task<List<Group>> Query(Dictionary<string, object> param)
        {
            try
            {
                var data = await _adapterPattern.ExecuteQuery<Group>(param, "usp_Group", DataConfiguration.instanceCore);
                return data.ToList();
            }
            catch (Exception ex)
            {
                LogHelper.WriteLog("Execute Appointment get data: " + ex.Message);
                return null;
            }
        }

        public bool Transaction(List<Group> data, char action)
        {
            using (TransactionScope scope = new TransactionScope())
            {
                try
                {
                    var val = new Lib.DataGenerator().CommitData<Group>(data, "usp_Group_Transaction", action, 2);
                    scope.Complete();
                    return val;
                }
                catch (Exception ex)
                {
                    LogHelper.WriteLog("Execute Appointment Transaction: " + ex.Message);
                    return false;
                }
            }
        }
    }
}
