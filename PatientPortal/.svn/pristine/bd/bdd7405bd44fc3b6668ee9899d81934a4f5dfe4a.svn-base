using AutoMapper;
using PatientPortal.API.SPA.Common;
using PatientPortal.API.SPA.ViewModels;
using PatientPortal.IRepository.SPA;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Web.Http;
using System.Web.Http.Results;
using WebApiContrib.Formatting;

namespace PatientPortal.API.SPA.Controllers
{
    public class DepartmentController : ApiController
    {
        private readonly string PATH_IMG_POST = ConfigurationManager.AppSettings["fullPathPost"];


        readonly IDepartmentRepo _iDepartmentRepo;

        public DepartmentController(IDepartmentRepo iDepartmentRepo)
        {
            this._iDepartmentRepo = iDepartmentRepo;
        }

        [HttpGet]
        public HttpResponseMessage GetDepartment(int id)
        {
            try
            {
                if(id == 0)
                {
                    var data = _iDepartmentRepo.GetDepartment(id);
                    var results = Mapper.Map<List<DepartmentViewModel>>(data);
                    return Request.CreateResponse(HttpStatusCode.OK, results);
                }
                else
                {
                    var data = _iDepartmentRepo.GetDepartment(id);
                    var item = Mapper.Map<List<DepartmentViewModel>>(data).FirstOrDefault();
                    var results = new List<FileDeptViewModel>();
                    if (item != null)
                    {
                        var files = ListFiles(item.Handler).ToList();
                        if(files != null)
                        {
                            foreach (var file in files)
                            {
                                var fileDept = new FileDeptViewModel()
                                {
                                    Id = item.Id,
                                    Name = item.Name,
                                    Description = item.Description,
                                    Url = file.Url
                                };
                                results.Add(fileDept);
                            }
                        }
                    }

                    return Request.CreateResponse(HttpStatusCode.OK, results);
                }
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        private IEnumerable<FileViewModel> ListFiles(string path)
        {
            using (var httpClient = new HttpClient())
            {
                try
                {
                    Uri _baseAddress = new Uri(PATH_IMG_POST);
                    var urlService = PATH_IMG_POST + "/" + ValueConstants.SERVICE_LIST_FILE + path;
                    httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/x-protobuf"));
                    httpClient.BaseAddress = _baseAddress;

                    var response = httpClient.GetAsync(urlService).Result;

                    var data = response.Content.ReadAsAsync<IEnumerable<FileViewModel>>(new[] { new ProtoBufFormatter() }).Result;

                    return data;
                }
                catch (Exception ex)
                {
                    throw;
                } 
            }
        }
    }
}
