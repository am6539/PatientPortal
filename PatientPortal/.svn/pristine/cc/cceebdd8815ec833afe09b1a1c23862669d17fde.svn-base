using Microsoft.AspNet.Identity;
using Microsoft.Owin;
using PatientPortal.Domain.Common;
using PatientPortal.Domain.LogManager;
using PatientPortal.Domain.Models.AUTHEN;
using PatientPortal.Internal.Models;
using PatientPortal.Provider.Common;
using PatientPortal.Provider.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;

namespace PatientPortal.Internal.Controllers
{
    [Authorize]
    public class RoleController : Controller
    {
        private readonly IUserSession _userSession;
        private static string controllerName = string.Empty;

        public RoleController(IUserSession userSession)
        {
            _userSession = userSession;
        }

        // GET: Role
        public async Task<ActionResult> Index()
        {
            var results = new RoleModel();
            try
            {
                //Call API Provider
                controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();


                //IOwinContext ctx = Request.GetOwinContext();
                //ClaimsPrincipal user = ctx.Authentication.User;
                //IEnumerable<Claim> claims = user.Claims;
                //var claimsIdentity = new ClaimsIdentity(claims, DefaultAuthenticationTypes.ApplicationCookie);

                //var a = Request.Cookies["AspnetAuthenticationCookie"];
                //a = Request.Cookies["AspnetAuthenticationCookie"].Value;
                //a = Request.Cookies[".AspNet.ApplicationCookie"].Value;
                //FormsAuthenticationTicket ticket = FormsAuthentication.Decrypt(a.Value);


                var token = _userSession.BearerToken;
                var list = await APIProvider.Authorize_Get<List<RoleViewModel>>(token,controllerName, "GetAll",null, APIConstant.API_Resource_Authencation);

                var role = new RoleViewModel();

                results.lstRoleViewModel = list;
                results.RoleViewModel = role;

                TempData["Data"] = list;
            }
            catch (Exception ex)
            {
                Logger.LogError(ex);
                throw ex;
            }
            return View(results);
        }


    }
}