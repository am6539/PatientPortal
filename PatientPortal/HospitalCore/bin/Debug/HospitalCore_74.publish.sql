/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The column [dbo].[Department].[Img] on table [dbo].[Department] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Department])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Starting rebuilding table [dbo].[Department]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Department] (
    [Id]          SMALLINT       IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (50)  NOT NULL,
    [Description] NVARCHAR (250) NOT NULL,
    [Handler]     NVARCHAR (256) NOT NULL,
    [Img]         VARCHAR (256)  NOT NULL,
    [Sort]        TINYINT        NOT NULL,
    [IsUsed]      BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Department])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Department] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Department] ([Id], [Name], [Description], [Handler], [Sort], [IsUsed])
        SELECT   [Id],
                 [Name],
                 [Description],
                 [Handler],
                 [Sort],
                 [IsUsed]
        FROM     [dbo].[Department]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Department] OFF;
    END

DROP TABLE [dbo].[Department];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Department]', N'Department';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[DoctorProfile]...';


GO
CREATE TABLE [dbo].[DoctorProfile] (
    [UserId]     NVARCHAR (128) NOT NULL,
    [Speciality] NVARCHAR (150) NOT NULL,
    [Degrees]    NVARCHAR (150) NOT NULL,
    [Training]   NVARCHAR (500) NOT NULL,
    [Office]     NVARCHAR (150) NOT NULL,
    [Workdays]   NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Altering [dbo].[usp_Department_Transaction]...';


GO
ALTER PROC [dbo].[usp_Department_Transaction](
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1,
	@Name NVARCHAR(50) = '',
	@Description NVARCHAR(250) = '',
	@Handler NVARCHAR(256) = '',
	@Img VARCHAR(256) = '',
	@Sort TINYINT = 1,
	@IsUsed BIT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			INSERT [dbo].[Department] ([Name], [Description], [Handler], [Img], [Sort], [IsUsed])
			VALUES(@Name, @Description, @Handler, @Img, @Sort, @IsUsed)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[Department]
			SET [Name] = @Name, [Description] = @Description, [Handler] = @Handler, [Img] = @Img, [IsUsed] = @IsUsed, [Sort] = @Sort
			WHERE [Id] = @Id  
		END

		IF @Action = 'D' --DELETE
		BEGIN
			DELETE FROM [dbo].[Department]
			WHERE [Id] = @Id
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Creating [dbo].[usp_DoctorProfile]...';


GO
CREATE PROCEDURE [dbo].[usp_DoctorProfile]
	@UserId NVARCHAR(128) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[DoctorProfile]
		WHERE [UserId] = @UserId
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_DoctorProfile_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_DoctorProfile_Transaction]
(
	@Action CHAR(1) = 'I',
	@UserId NVARCHAR(128),
	@Speciality NVARCHAR(150) = '',
	@Degrees NVARCHAR(150) = '',
	@Training NVARCHAR(500) = '',
	@Office NVARCHAR(150) = '',
	@Workdays NVARCHAR(50) = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[DoctorProfile] VALUES(@UserId, @Speciality, @Degrees, @Training, @Office, @Workdays)

				SET @return = 1
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[DoctorProfile]
				SET [Speciality] = @Speciality, [Degrees] = @Degrees, [Training] = @Training, [Office] = @Office, [Workdays] = @Workdays
				WHERE [UserId] = @UserId

				SET @return = 1
			END

			IF @Action = 'D' --DELETE
			BEGIN
				SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_spa_DepartmentServices]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_DepartmentServices]
	@Id SMALLINT = 1, @DepartmentId SMALLINT = 1
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[DepartmentServices]
			WHERE [Id] = @Id AND [DepartmentId] = @DepartmentId
			
		ELSE
			SELECT * FROM [dbo].[DepartmentServices] WHERE [DepartmentId] = @DepartmentId ORDER BY [Name]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Refreshing [dbo].[usp_Department]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Department]';


GO
PRINT N'Refreshing [dbo].[usp_Department_Available]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Department_Available]';


GO
PRINT N'Refreshing [dbo].[usp_Department_CheckExistName]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Department_CheckExistName]';


GO
PRINT N'Refreshing [dbo].[usp_spa_Department]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_spa_Department]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Update complete.';


GO
