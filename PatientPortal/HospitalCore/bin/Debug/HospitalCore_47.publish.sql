/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The column [dbo].[Appointment].[ModifedUser] on table [dbo].[Appointment] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Appointment])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Setting].[AppointmentIntervalTime] on table [dbo].[Setting] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Setting].[IsSaveCanceledAppointment] on table [dbo].[Setting] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Setting])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Rename refactoring operation with key 8235811f-308f-462f-b73e-593f36c7c9d4, 34b54559-7b25-4a9e-b544-731268a4d7bc, eb5b5512-5238-40e5-9532-bb444bcdddf7 is skipped, element [dbo].[Setting].[IsKeepCanceledAppointment] (SqlSimpleColumn) will not be renamed to IsSaveCanceledAppointment';


GO
PRINT N'Rename refactoring operation with key c673adeb-34fe-457f-854c-3c90046b4f76 is skipped, element [dbo].[Setting].[IntervalAppointmentTime] (SqlSimpleColumn) will not be renamed to AppointmentIntervalTime';


GO
PRINT N'Dropping [dbo].[Appointment].[idxAppointmentPatient]...';


GO
DROP INDEX [idxAppointmentPatient]
    ON [dbo].[Appointment];


GO
PRINT N'Dropping [dbo].[Appointment].[idxAppointmentPhysician]...';


GO
DROP INDEX [idxAppointmentPhysician]
    ON [dbo].[Appointment];


GO
PRINT N'Dropping [dbo].[FK_Article_Users]...';


GO
ALTER TABLE [dbo].[Article] DROP CONSTRAINT [FK_Article_Users];


GO
PRINT N'Dropping [dbo].[FK_Message_Receiver]...';


GO
ALTER TABLE [dbo].[Message] DROP CONSTRAINT [FK_Message_Receiver];


GO
PRINT N'Dropping [dbo].[FK_Message_Sender]...';


GO
ALTER TABLE [dbo].[Message] DROP CONSTRAINT [FK_Message_Sender];


GO
PRINT N'Dropping [dbo].[FK_MessageRecipient_Users]...';


GO
ALTER TABLE [dbo].[MessageRecipient] DROP CONSTRAINT [FK_MessageRecipient_Users];


GO
PRINT N'Dropping [dbo].[FK_OfferAdvise_Users]...';


GO
ALTER TABLE [dbo].[OfferAdvise] DROP CONSTRAINT [FK_OfferAdvise_Users];


GO
PRINT N'Dropping [dbo].[FK_Permission_Role]...';


GO
ALTER TABLE [dbo].[Permission] DROP CONSTRAINT [FK_Permission_Role];


GO
PRINT N'Dropping [dbo].[FK_Schedule_User]...';


GO
ALTER TABLE [dbo].[Schedule] DROP CONSTRAINT [FK_Schedule_User];


GO
PRINT N'Altering [dbo].[Appointment]...';


GO
ALTER TABLE [dbo].[Appointment] ALTER COLUMN [PatientId] NVARCHAR (128) NOT NULL;

ALTER TABLE [dbo].[Appointment] ALTER COLUMN [PhysicianId] NVARCHAR (128) NOT NULL;


GO
ALTER TABLE [dbo].[Appointment]
    ADD [ModifedUser] NVARCHAR (128) NOT NULL;


GO
PRINT N'Creating [dbo].[Appointment].[idxAppointmentPatient]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentPatient]
    ON [dbo].[Appointment]([PatientId] ASC);


GO
PRINT N'Creating [dbo].[Appointment].[idxAppointmentPhysician]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentPhysician]
    ON [dbo].[Appointment]([PhysicianId] ASC);


GO
PRINT N'Altering [dbo].[Setting]...';


GO
ALTER TABLE [dbo].[Setting]
    ADD [IsSaveCanceledAppointment] BIT     NOT NULL,
        [AppointmentIntervalTime]   TINYINT NOT NULL;


GO
PRINT N'Creating [dbo].[usp_spa_Schedule]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_Schedule]
	@Id INT = 0,
	@UserId INT = 0,
	@Start DATETIME,
	@End DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF(@Id > 0)
			SELECT *
			FROM [dbo].Schedule
			WHERE Id = @Id
			AND UserId = @UserId
		ELSE
			SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND [Start] 
			BETWEEN CAST(@Start AS DateTime)
			AND CAST(@End + '23:59:59:999' AS DateTime)
			AND IsExamine = 1
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_ScheduleExamine]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_ScheduleExamine]
	@UserId INT = 0,
	@Start DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND [Start] 
			BETWEEN CAST(@Start AS DateTime)
			AND CAST(@Start + '23:59:59:999' AS DateTime)
			AND [IsExamine] = 1
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_User]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_User]
	@Id int = 0,
	@Type tinyint = 0,
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
	IF(@Id > 0)
		SELECT * FROM [dbo].[Users]
		WHERE Id = @Id
	ELSE
	BEGIN
		IF(@Type = 1)
			SELECT * FROM [dbo].[Users]
			WHERE IsAdmin = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
		IF(@Type = 2)
			SELECT * FROM [dbo].[Users]
			WHERE IsDoctor = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
							   AND (Tags like '%' + @Search + '%' OR @Search is null)
	END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_User_HasScheduleExamine]...';


GO
CREATE PROCEDURE [dbo].usp_spa_User_HasScheduleExamine
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT DISTINCT 
				dbo.Users.*
		FROM    dbo.Schedule INNER JOIN
				dbo.Users ON dbo.Schedule.UserId = dbo.Users.Id
		WHERE   (dbo.Users.IsDoctor = 1)
				AND (Name like '%' + @Search + '%' OR @Search is null)
				AND (Tags like '%' + @Search + '%' OR @Search is null)
				AND IsExamine = 1
				AND GETDATE() >= [Start]

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_User_HasScheduleExamine]...';


GO
CREATE PROCEDURE [dbo].[usp_User_HasScheduleExamine]
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT DISTINCT 
				dbo.Users.*
		FROM    dbo.Schedule INNER JOIN
				dbo.Users ON dbo.Schedule.UserId = dbo.Users.Id
		WHERE   (dbo.Users.IsDoctor = 1)
				AND (Name like '%' + @Search + '%' OR @Search is null)
				AND (Tags like '%' + @Search + '%' OR @Search is null)
				AND IsExamine = 1
				AND GETDATE() >= [Start]

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Refreshing [dbo].[usp_Appointment]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Appointment]';


GO
PRINT N'Refreshing [dbo].[usp_Appointment_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Appointment_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_Setting]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Setting]';


GO
PRINT N'Refreshing [dbo].[usp_Setting_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Setting_Transaction]';


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8235811f-308f-462f-b73e-593f36c7c9d4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8235811f-308f-462f-b73e-593f36c7c9d4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '34b54559-7b25-4a9e-b544-731268a4d7bc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('34b54559-7b25-4a9e-b544-731268a4d7bc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'eb5b5512-5238-40e5-9532-bb444bcdddf7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('eb5b5512-5238-40e5-9532-bb444bcdddf7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c673adeb-34fe-457f-854c-3c90046b4f76')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c673adeb-34fe-457f-854c-3c90046b4f76')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Update complete.';


GO
