/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The column [dbo].[SurveyQuestions].[IsRequired] is being dropped, data loss could occur.

The column [dbo].[SurveyQuestions].[IsRequireds] on table [dbo].[SurveyQuestions] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[SurveyQuestions])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping [dbo].[FK_SurveyAnswers_SurveyQuestions]...';


GO
ALTER TABLE [dbo].[SurveyAnswers] DROP CONSTRAINT [FK_SurveyAnswers_SurveyQuestions];


GO
PRINT N'Dropping [dbo].[FK_SurveyQuestions_Survey]...';


GO
ALTER TABLE [dbo].[SurveyQuestions] DROP CONSTRAINT [FK_SurveyQuestions_Survey];


GO
PRINT N'Altering [dbo].[Setting]...';


GO
ALTER TABLE [dbo].[Setting] ALTER COLUMN [DefaultRole] NVARCHAR (128) NOT NULL;


GO
PRINT N'Starting rebuilding table [dbo].[SurveyQuestions]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_SurveyQuestions] (
    [Id]          VARCHAR (128)  NOT NULL,
    [SurveyId]    VARCHAR (128)  NOT NULL,
    [Question]    NVARCHAR (300) NOT NULL,
    [Type]        TINYINT        NOT NULL,
    [IsRequireds] BIT            NOT NULL,
    [IsRandomize] BIT            NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_SurveyQuestions1] PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[SurveyQuestions])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_SurveyQuestions] ([Id], [SurveyId], [Question], [Type], [IsRandomize])
        SELECT   [Id],
                 [SurveyId],
                 [Question],
                 [Type],
                 [IsRandomize]
        FROM     [dbo].[SurveyQuestions]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[SurveyQuestions];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_SurveyQuestions]', N'SurveyQuestions';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_SurveyQuestions1]', N'PK_SurveyQuestions', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[FK_SurveyAnswers_SurveyQuestions]...';


GO
ALTER TABLE [dbo].[SurveyAnswers] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyAnswers_SurveyQuestions] FOREIGN KEY ([QuestionId]) REFERENCES [dbo].[SurveyQuestions] ([Id]);


GO
PRINT N'Creating [dbo].[FK_SurveyQuestions_Survey]...';


GO
ALTER TABLE [dbo].[SurveyQuestions] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyQuestions_Survey] FOREIGN KEY ([SurveyId]) REFERENCES [dbo].[Survey] ([Id]);


GO
PRINT N'Altering [dbo].[usp_Setting_Transaction]...';


GO
ALTER PROC [dbo].[usp_Setting_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Title NVARCHAR(70) = '',
	@Description NVARCHAR(150) = '',
	@Keyword NVARCHAR(150) = '',
	@Membership BIT = 1,
	@DefaultRole NVARCHAR(128) = '',
	@LoginURL VARCHAR(256) = '',
	@LockedIPNoteDefault NVARCHAR(150) = '',
	@IsSaveCanceledAppointment BIT = 1,
	@AppointmentIntervalTime INT = 15,
	@AppointmentStartTime INT = 8,
	@AppointmentEndTime INT = 5
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF EXISTS(SELECT TOP 1 1 FROM [dbo].[Setting])
		BEGIN
			UPDATE 
				[dbo].[Setting]
			SET 
				[Title] = @Title, 
				[Keyword] = @Keyword, 
				[Description] =  @Description, 
				[Membership] = @Membership,
				[DefaultRole] = @DefaultRole,
				[LoginURL] = @LoginURL,
				[LockedIPNoteDefault] = @LockedIPNoteDefault,
				[IsSaveCanceledAppointment] = @IsSaveCanceledAppointment,
				[AppointmentIntervalTime] = @AppointmentIntervalTime,
				[AppointmentStartTime] = @AppointmentStartTime,
				[AppointmentEndTime] = @AppointmentEndTime
			--WHERE [Id] = 1
		END
		ELSE
		BEGIN
			INSERT INTO 
				[dbo].[Setting] 
			VALUES(
				@Title, 
				@Description, 
				@Keyword, 
				@Membership, 
				@DefaultRole, 
				@LoginURL, 
				@LockedIPNoteDefault,
				@IsSaveCanceledAppointment,
				@AppointmentIntervalTime,
				@AppointmentStartTime,
				@AppointmentEndTime)
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_SurveyQuestions_Transaction]...';


GO
ALTER PROC [dbo].[usp_SurveyQuestions_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id VARCHAR(128) = '',
	@SurveyId VARCHAR(128) = '',
	@Question NVARCHAR(300) = '',
	@Type TINYINT,
	@IsRequireds BIT = 0,
	@IsRandomize BIT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[SurveyQuestions] VALUES(@Id, @SurveyId, @Question, @Type, @IsRequireds, @IsRandomize)

				SET @return = 1
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[SurveyQuestions]
				SET [SurveyId] = @SurveyId, [Question] = @Question, [Type] = @Type, [IsRequireds] = @IsRequireds, [IsRandomize] = @IsRandomize
				WHERE [Id] = @Id  

				SET @return = 1
			END

			IF @Action = 'D' --DELETE
			BEGIN
				BEGIN
					DELETE FROM [dbo].[SurveyQuestions]
					WHERE [Id] = @Id

					SET @return = 1
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Altering [dbo].[usp_Schedule]...';


GO
ALTER PROCEDURE [dbo].[usp_Schedule]
	@Id INT = 0,
	@UserId NVARCHAR(128) = '',
	@Start DATETIME,
	@End DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF(@Id > 0)
			SELECT *
			FROM [dbo].Schedule
			WHERE Id = @Id
			AND UserId = @UserId
		ELSE
			SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND DATEDIFF(DAY,@Start , [start])>= 0
			AND DATEDIFF(DAY, [End], @End)>= 0
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_ScheduleExamine]...';


GO
ALTER PROCEDURE [dbo].[usp_ScheduleExamine]
	@UserId NVARCHAR(128) = '',
	@Start DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND DATEDIFF(DAY,@Start , [start])>= 0
			AND DATEDIFF(DAY, [start], DATEADD(day,2,getdate()))>= 0
			AND [IsExamine] = 1
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_spa_Schedule]...';


GO
ALTER PROCEDURE [dbo].[usp_spa_Schedule]
	@Id INT = 0,
	@UserId NVARCHAR(128) = '',
	@Start DATETIME,
	@End DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF(@Id > 0)
			SELECT *
			FROM [dbo].Schedule
			WHERE Id = @Id
			AND UserId = @UserId
		ELSE
			SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND DATEDIFF(DAY,@Start , [start])>= 0
			AND DATEDIFF(DAY, [End], @End)>= 0
			AND IsExamine = 1
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_spa_ScheduleExamine]...';


GO
ALTER PROCEDURE [dbo].[usp_spa_ScheduleExamine]
	@UserId NVARCHAR(128) = '',
	@Start DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND DATEDIFF(DAY,@Start , [start])>= 0
			AND DATEDIFF(DAY, [start], DATEADD(day,2,getdate()))>= 0
			AND [IsExamine] = 1
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_spa_User_HasScheduleExamine]...';


GO
ALTER PROCEDURE [dbo].usp_spa_User_HasScheduleExamine
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		
		DECLARE @bod DATETIME2
		SET @bod = cast (GETDATE() AS DATE) 
		SELECT DISTINCT 
				dbo.Users.*
		FROM    dbo.Schedule INNER JOIN
				dbo.Users ON dbo.Schedule.UserId = dbo.Users.Id
		WHERE   (dbo.Users.IsDoctor = 1)
				AND (Name like '%' + @Search + '%' OR @Search is null)
				AND (Tags like '%' + @Search + '%' OR @Search is null)
				AND IsExamine = 1
				AND DATEDIFF(DAY, GETDATE(), [start])>= 0
				AND DATEDIFF(DAY, [start], DATEADD(day,2,getdate()))>= 0

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_Survey]...';


GO
ALTER PROCEDURE [dbo].[usp_Survey]
	@Id VARCHAR(128)
AS
	IF(@Id <> '')
	BEGIN
		SELECT * FROM [dbo].[Survey]
		WHERE [Id] = @Id
	END
	ELSE
	BEGIN
		SELECT * FROM [dbo].[Survey]
	END
RETURN 0
GO
PRINT N'Altering [dbo].[usp_Survey_Transaction]...';


GO
ALTER PROC [dbo].[usp_Survey_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id VARCHAR(128) = '',
	@Title NVARCHAR(150) = '',
	@Description NVARCHAR(MAX) = '',
	@Message NVARCHAR(300) = '',
	@IsBranding BIT = 1,
	@Logo VARCHAR(256) = '',
	@Url VARCHAR(256) = '',
	@IsSurveyInvite BIT = 0,
	@IsPublic BIT = 0,
	@IsActive BIT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Survey] VALUES(@Id, @Title, @Description, @Message, @IsBranding, @Logo, @Url, @IsSurveyInvite, @IsPublic, @IsActive)

				SET @return = 1
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[Survey]
				SET [Title] = @Title, [Description] = @Description, [Message] = @Message, [IsBranding] = @IsBranding, [Logo] = @Logo, [Url] = @Url, [IsSurveyInvite] = @IsSurveyInvite, [IsPublic] = @IsPublic, [IsActive] = @IsActive
				WHERE [Id] = @Id  

				SET @return = 1
			END

			IF @Action = 'D' --DELETE
			BEGIN
				BEGIN
					--Xóa câu trả lời của từng câu hỏi.
					DELETE FROM [dbo].[SurveyAnswers] WHERE [QuestionId] IN (SELECT q.[Id] FROM [dbo].[SurveyQuestions] q WHERE q.[SurveyId] = @Id)

					--Xóa từng câu hỏi của khảo sát.
					DELETE FROM [dbo].[SurveyQuestions] WHERE [SurveyId] = @Id
					
					--Xóa khảo sát
					DELETE FROM [dbo].[Survey] WHERE [Id] = @Id

					SET @return = 1
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Altering [dbo].[usp_User_HasScheduleExamine]...';


GO
ALTER PROCEDURE [dbo].[usp_User_HasScheduleExamine]
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT DISTINCT 
				dbo.Users.*
		FROM    dbo.Schedule INNER JOIN
				dbo.Users ON dbo.Schedule.UserId = dbo.Users.Id
		WHERE   (dbo.Users.IsDoctor = 1)
				AND (Name like '%' + @Search + '%' OR @Search is null)
				AND (Tags like '%' + @Search + '%' OR @Search is null)
				AND IsExamine = 1
				AND DATEDIFF(DAY, GETDATE(), [start])>= 0
				AND DATEDIFF(DAY, [start], DATEADD(day,2,getdate()))>= 0

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_AppointmentLog_ApprovedBook]...';


GO
CREATE PROC [dbo].[usp_AppointmentLog_ApprovedBook]
(
	@Id VARCHAR(MAX),
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)

	BEGIN TRY
		BEGIN TRAN;
			-- Confirm accept
			IF @Status = 2
			BEGIN
				SET @ModifiedDate = [dbo].[ufnGetDate]()
				SET @CreatedDate = @ModifiedDate

				DECLARE @Ids VARCHAR(50)
				DECLARE IDs CURSOR FOR
				SELECT VALUE
				FROM   [dbo].[ufn_SpitString](@Id,',')
				OPEN IDs
				FETCH next FROM IDs INTO @Ids
				WHILE @@FETCH_STATUS = 0
				BEGIN

				--Get item by id
				SELECT * INTO #AppointmentLogById
				FROM [dbo].[AppointmentLog] l
				WHERE l.Id = @Ids

				--Post data to Appointment
				DECLARE @ColectionId INT
				INSERT [dbo].[Appointment]([PhysicianId], [PatientId], [Symptom], [CreatedDate], [ModifiedDate], [ModifedUser])
				SELECT item.PhysicianId, item.PatientId, item.Symptom, @CreatedDate, @ModifiedDate, N'Patient Test' FROM #AppointmentLogById item
				SET @ColectionId = (SELECT SCOPE_IDENTITY())

				--Generation Number
				SELECT TOP 1 s.AppointmentIntervalTime, s.AppointmentStartTime INTO #GenerationTime
				FROM [dbo].[Setting] s

				DECLARE @AppointmentNo INT
				DECLARE @IntervalTime INT
				DECLARE @StartTime INT
				DECLARE @Time INT

				SET @IntervalTime = (SELECT t.AppointmentIntervalTime FROM #GenerationTime t)
				SET @StartTime = (SELECT t.AppointmentStartTime FROM #GenerationTime t)
				SET @Time = (SELECT t.[Time] FROM [dbo].[AppointmentLog] t WHERE t.Id = @Ids )

				SET @AppointmentNo = [dbo].[ufnGenerationNumber](@Time, @IntervalTime, @StartTime)

				--Post data to AppointmentCollection
				INSERT [dbo].[AppointmentCollection]([Id], [Date], [Time], [AppointmentNo], [PatientName], [PatientAddress], [PatientEmail], [PatientPhone], [PatientGender], [PatientDoB], [Status])
				SELECT @ColectionId, item.[Date], item.[Time], @AppointmentNo, ISNULL(item.PatientName, N'NA'), ISNULL(item.PatientAddress, N'NA'), item.PatientEmail, item.PatientPhone, item.PatientGender, item.PatientDoB, 2 FROM #AppointmentLogById item

				UPDATE [dbo].[AppointmentLog] SET [Status] = 2 WHERE [Id] = @Ids

				-- DROP Temp Table
				DROP TABLE #AppointmentLogById
				DROP TABLE #GenerationTime

				
				FETCH next FROM IDs INTO @Ids
				END
				CLOSE IDs
				DEALLOCATE IDs

				SET @return = 1
			END

			-- Confirm cancel
			IF @Status = 3
			BEGIN
				DECLARE @isCheck BIT
				SET @isCheck = (SELECT TOP 1 s.IsSaveCanceledAppointment FROM [dbo].[Setting] s)
				IF @isCheck = 1
				BEGIN
					UPDATE [dbo].[AppointmentLog]
					SET [Status] = 3
					WHERE [Id] IN (@Id)

					SET @return = 1
				END
				ELSE
				BEGIN
					DELETE FROM [dbo].[AppointmentLog] WHERE [Id] IN (@Id)

					SET @return = 1
				END
			END
		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_SurveyAnswers]...';


GO
CREATE PROCEDURE [dbo].[usp_SurveyAnswers]
	@QuestionId VARCHAR(128)
AS
	IF(@QuestionId <> '')
	BEGIN
		SELECT * FROM [dbo].[SurveyAnswers]
		WHERE [QuestionId] = @QuestionId
	END
RETURN 0
GO
PRINT N'Creating [dbo].[usp_SurveyQuestions]...';


GO
CREATE PROCEDURE [dbo].[usp_SurveyQuestions]
	@SurveyId VARCHAR(128)
AS
	IF(@SurveyId <> '')
	BEGIN
		SELECT * FROM [dbo].[SurveyQuestions]
		WHERE [SurveyId] = @SurveyId
	END
RETURN 0
GO
PRINT N'Refreshing [dbo].[usp_AppointmentLog_Confirm]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_AppointmentLog_Confirm]';


GO
PRINT N'Refreshing [dbo].[usp_Setting]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Setting]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[SurveyAnswers] WITH CHECK CHECK CONSTRAINT [FK_SurveyAnswers_SurveyQuestions];

ALTER TABLE [dbo].[SurveyQuestions] WITH CHECK CHECK CONSTRAINT [FK_SurveyQuestions_Survey];


GO
PRINT N'Update complete.';


GO
