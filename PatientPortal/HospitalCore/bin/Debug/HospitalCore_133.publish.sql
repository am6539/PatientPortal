/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Creating [dbo].[IntList]...';


GO
CREATE TYPE [dbo].[IntList] AS TABLE (
    [Item] INT NOT NULL PRIMARY KEY CLUSTERED ([Item] ASC));


GO
PRINT N'Creating [dbo].[Appointment]...';


GO
CREATE TABLE [dbo].[Appointment] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [PhysicianId]  NVARCHAR (128) NOT NULL,
    [PatientId]    NVARCHAR (128) NOT NULL,
    [Symptom]      NVARCHAR (MAX) NOT NULL,
    [CreatedDate]  VARCHAR (20)   NOT NULL,
    [ModifiedDate] VARCHAR (20)   NOT NULL,
    [ModifedUser]  NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_Appointment] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Appointment].[idxAppointmentPatient]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentPatient]
    ON [dbo].[Appointment]([PatientId] ASC);


GO
PRINT N'Creating [dbo].[Appointment].[idxAppointmentPhysician]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentPhysician]
    ON [dbo].[Appointment]([PhysicianId] ASC);


GO
PRINT N'Creating [dbo].[AppointmentCollection]...';


GO
CREATE TABLE [dbo].[AppointmentCollection] (
    [Id]             INT            NOT NULL,
    [Date]           DATE           NOT NULL,
    [Time]           INT            NOT NULL,
    [AppointmentNo]  SMALLINT       NOT NULL,
    [PatientName]    NVARCHAR (50)  NOT NULL,
    [PatientAddress] NVARCHAR (150) NOT NULL,
    [PatientEmail]   VARCHAR (256)  NULL,
    [PatientPhone]   VARCHAR (20)   NULL,
    [PatientGender]  TINYINT        NOT NULL,
    [PatientDoB]     DATE           NULL,
    [Status]         TINYINT        NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AppointmentCollection].[idxAppointmentCollection]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentCollection]
    ON [dbo].[AppointmentCollection]([Date] ASC, [AppointmentNo] ASC, [PatientName] ASC);


GO
PRINT N'Creating [dbo].[AppointmentLog]...';


GO
CREATE TABLE [dbo].[AppointmentLog] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [Date]           DATE             NOT NULL,
    [Time]           INT              NOT NULL,
    [PhysicianId]    NVARCHAR (128)   NOT NULL,
    [PatientId]      NVARCHAR (128)   NOT NULL,
    [Symptom]        NVARCHAR (MAX)   NOT NULL,
    [PatientName]    NVARCHAR (50)    NULL,
    [PatientAddress] NVARCHAR (150)   NULL,
    [PatientEmail]   VARCHAR (256)    NULL,
    [PatientPhone]   VARCHAR (20)     NULL,
    [PatientGender]  TINYINT          NULL,
    [PatientDoB]     DATE             NULL,
    [CreatedDate]    VARCHAR (20)     NOT NULL,
    [ModifiedDate]   VARCHAR (20)     NOT NULL,
    [Status]         TINYINT          NOT NULL,
    CONSTRAINT [PK_AppointmentLog] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AppointmentLog].[idxAppointmentLogDate]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentLogDate]
    ON [dbo].[AppointmentLog]([Date] ASC);


GO
PRINT N'Creating [dbo].[AppointmentLog].[idxAppointmentLogPatient]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentLogPatient]
    ON [dbo].[AppointmentLog]([PatientId] ASC);


GO
PRINT N'Creating [dbo].[AppointmentLog].[idxAppointmentLogPhysician]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentLogPhysician]
    ON [dbo].[AppointmentLog]([PhysicianId] ASC);


GO
PRINT N'Creating [dbo].[Article]...';


GO
CREATE TABLE [dbo].[Article] (
    [Id]        INT             IDENTITY (1, 1) NOT NULL,
    [Date]      SMALLDATETIME   NOT NULL,
    [Title]     NVARCHAR (150)  NOT NULL,
    [Detail]    NVARCHAR (1000) NOT NULL,
    [PatientId] NVARCHAR (128)  NOT NULL,
    [Status]    TINYINT         NOT NULL,
    [IsClosed]  BIT             NOT NULL,
    CONSTRAINT [PK_Article] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ArticleComment]...';


GO
CREATE TABLE [dbo].[ArticleComment] (
    [Id]          SMALLINT        NOT NULL,
    [ArticleId]   INT             NOT NULL,
    [Date]        SMALLDATETIME   NOT NULL,
    [Detail]      NVARCHAR (1000) NOT NULL,
    [CreatedUser] NVARCHAR (128)  NOT NULL,
    [Status]      TINYINT         NOT NULL,
    CONSTRAINT [PK_ArticleComment] PRIMARY KEY CLUSTERED ([Id] ASC, [ArticleId] ASC)
);


GO
PRINT N'Creating [dbo].[BlockedIpHandler]...';


GO
CREATE TABLE [dbo].[BlockedIpHandler] (
    [Id]       INT            IDENTITY (1, 1) NOT NULL,
    [IP]       VARCHAR (50)   NOT NULL,
    [Note]     NVARCHAR (150) NOT NULL,
    [IsLocked] BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Department]...';


GO
CREATE TABLE [dbo].[Department] (
    [Id]          SMALLINT       IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (50)  NOT NULL,
    [Description] NVARCHAR (250) NOT NULL,
    [Handler]     NVARCHAR (256) NOT NULL,
    [Img]         VARCHAR (256)  NOT NULL,
    [Sort]        TINYINT        NOT NULL,
    [IsUsed]      BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DepartmentServices]...';


GO
CREATE TABLE [dbo].[DepartmentServices] (
    [Id]           SMALLINT        NOT NULL,
    [DepartmentId] SMALLINT        NOT NULL,
    [Name]         NVARCHAR (80)   NOT NULL,
    [Price]        NUMERIC (13, 3) NOT NULL,
    [Category]     TINYINT         NOT NULL,
    CONSTRAINT [PK_DepartmentServices] PRIMARY KEY CLUSTERED ([Id] ASC, [DepartmentId] ASC)
);


GO
PRINT N'Creating [dbo].[DoctorProfile]...';


GO
CREATE TABLE [dbo].[DoctorProfile] (
    [UserId]       NVARCHAR (128) NOT NULL,
    [Speciality]   NVARCHAR (MAX) NOT NULL,
    [Degrees]      NVARCHAR (MAX) NOT NULL,
    [Training]     NVARCHAR (MAX) NOT NULL,
    [Office]       NVARCHAR (200) NOT NULL,
    [Workdays]     NVARCHAR (MAX) NOT NULL,
    [DepartmentId] SMALLINT       NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [dbo].[EmailMarketing]...';


GO
CREATE TABLE [dbo].[EmailMarketing] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (128) NOT NULL,
    [Detail]       NVARCHAR (MAX) NOT NULL,
    [IsUsed]       BIT            NULL,
    [CreatedUser]  NVARCHAR (128) NOT NULL,
    [CreatedDate]  VARCHAR (20)   NOT NULL,
    [ModifiedUser] NVARCHAR (128) NOT NULL,
    [ModifiedDate] VARCHAR (20)   NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Group]...';


GO
CREATE TABLE [dbo].[Group] (
    [Id]         TINYINT       IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (50) NOT NULL,
    [IsReadOnly] BIT           NOT NULL,
    CONSTRAINT [PK_Group] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MailSetting]...';


GO
CREATE TABLE [dbo].[MailSetting] (
    [Id]    TINYINT        IDENTITY (1, 1) NOT NULL,
    [Name]  NVARCHAR (256) NOT NULL,
    [Email] VARCHAR (256)  NOT NULL,
    [Pwd]   VARCHAR (60)   NOT NULL,
    [Host]  VARCHAR (150)  NOT NULL,
    [Port]  INT            NOT NULL,
    [IsSSL] BIT            NOT NULL,
    CONSTRAINT [PK_MailConfig] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Message]...';


GO
CREATE TABLE [dbo].[Message] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [FolderId]   TINYINT        NOT NULL,
    [Subject]    NVARCHAR (250) NOT NULL,
    [Date]       SMALLDATETIME  NOT NULL,
    [SenderId]   NVARCHAR (128) NOT NULL,
    [ReceiverId] NVARCHAR (128) NOT NULL,
    [IsRead]     BIT            NOT NULL,
    [IsSend]     BIT            NOT NULL,
    [IsPriority] BIT            NOT NULL,
    CONSTRAINT [PK_Message] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Message].[idxMessageFolder]...';


GO
CREATE NONCLUSTERED INDEX [idxMessageFolder]
    ON [dbo].[Message]([FolderId] ASC);


GO
PRINT N'Creating [dbo].[Message].[idxMessageSender]...';


GO
CREATE NONCLUSTERED INDEX [idxMessageSender]
    ON [dbo].[Message]([SenderId] ASC);


GO
PRINT N'Creating [dbo].[Message].[idxMessageReceiver]...';


GO
CREATE NONCLUSTERED INDEX [idxMessageReceiver]
    ON [dbo].[Message]([ReceiverId] ASC);


GO
PRINT N'Creating [dbo].[MessageContent]...';


GO
CREATE TABLE [dbo].[MessageContent] (
    [MessageId] INT            NOT NULL,
    [Detail]    NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_MessageContent] PRIMARY KEY CLUSTERED ([MessageId] ASC)
);


GO
PRINT N'Creating [dbo].[MessageFolder]...';


GO
CREATE TABLE [dbo].[MessageFolder] (
    [Id]   TINYINT        IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (50)  NOT NULL,
    [Path] NVARCHAR (256) NOT NULL,
    CONSTRAINT [PK_MessageFolder] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MessageRecipient]...';


GO
CREATE TABLE [dbo].[MessageRecipient] (
    [MessageId]  INT            NOT NULL,
    [ReceiverId] NVARCHAR (128) NOT NULL,
    [IsUsed]     BIT            NOT NULL,
    CONSTRAINT [PK_MessageRecipient] PRIMARY KEY CLUSTERED ([MessageId] ASC, [ReceiverId] ASC)
);


GO
PRINT N'Creating [dbo].[Module]...';


GO
CREATE TABLE [dbo].[Module] (
    [Id]        SMALLINT       NOT NULL,
    [Title]     NVARCHAR (128) NOT NULL,
    [Handler]   NVARCHAR (256) NOT NULL,
    [Sort]      TINYINT        NOT NULL,
    [ParentId]  SMALLINT       NOT NULL,
    [Group]     CHAR (1)       NOT NULL,
    [ClassName] VARCHAR (50)   NULL,
    CONSTRAINT [PK_Module] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Module].[idxModuleGroup]...';


GO
CREATE NONCLUSTERED INDEX [idxModuleGroup]
    ON [dbo].[Module]([Group] ASC);


GO
PRINT N'Creating [dbo].[OfferAdvise]...';


GO
CREATE TABLE [dbo].[OfferAdvise] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Date]      SMALLDATETIME  NOT NULL,
    [Detail]    NVARCHAR (MAX) NOT NULL,
    [PatientId] NVARCHAR (128) NOT NULL,
    [Tag]       NVARCHAR (150) NOT NULL,
    [Status]    TINYINT        NOT NULL,
    [Message]   NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_OfferAdvise] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[OfferAdvise].[IX_OfferAdvise_PatientId]...';


GO
CREATE NONCLUSTERED INDEX [IX_OfferAdvise_PatientId]
    ON [dbo].[OfferAdvise]([PatientId] ASC);


GO
PRINT N'Creating [dbo].[Organization]...';


GO
CREATE TABLE [dbo].[Organization] (
    [Id]       SMALLINT       IDENTITY (1, 1) NOT NULL,
    [ParentId] SMALLINT       NULL,
    [Name]     NVARCHAR (150) NOT NULL,
    [Phone]    VARCHAR (50)   NULL,
    [Fax]      VARCHAR (50)   NULL,
    [Email]    VARCHAR (256)  NULL,
    [Address]  NVARCHAR (150) NULL,
    CONSTRAINT [PK_Organization] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[PatientProfile]...';


GO
CREATE TABLE [dbo].[PatientProfile] (
    [Id]                NVARCHAR (128) NOT NULL,
    [PatientKey]        INT            NOT NULL,
    [BloodGroup_Id]     INT            NULL,
    [PersonalId]        VARCHAR (25)   NULL,
    [MedicalHistory]    NVARCHAR (500) NULL,
    [SmokingHistory]    NVARCHAR (500) NULL,
    [History]           NVARCHAR (500) NULL,
    [Chronic]           NVARCHAR (500) NULL,
    [InheritedDiseases] NVARCHAR (500) NULL,
    [Appointed]         NVARCHAR (500) NULL,
    [Tobacco]           NVARCHAR (500) NULL,
    [Activities]        NVARCHAR (500) NULL,
    [Alcohol]           NVARCHAR (500) NULL,
    [Cocaine]           NVARCHAR (500) NULL,
    [Tea]               NVARCHAR (500) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[QA]...';


GO
CREATE TABLE [dbo].[QA] (
    [Id]         INT             IDENTITY (1, 1) NOT NULL,
    [Date]       SMALLDATETIME   NOT NULL,
    [Title]      NVARCHAR (150)  NOT NULL,
    [Question]   NVARCHAR (1000) NOT NULL,
    [Name]       NVARCHAR (32)   NOT NULL,
    [Email]      VARCHAR (256)   NULL,
    [Phone]      VARCHAR (20)    NULL,
    [DoctorId]   NVARCHAR (128)  NOT NULL,
    [Answer]     NVARCHAR (MAX)  NOT NULL,
    [Department] NVARCHAR (100)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[RegisterMailLetter]...';


GO
CREATE TABLE [dbo].[RegisterMailLetter] (
    [Id]    VARCHAR (128) NOT NULL,
    [Email] VARCHAR (256) NOT NULL,
    [Date]  SMALLDATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Schedule]...';


GO
CREATE TABLE [dbo].[Schedule] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Title]     NVARCHAR (50)  NOT NULL,
    [Priority]  TINYINT        NOT NULL,
    [Detail]    NVARCHAR (300) NOT NULL,
    [IsAlarm]   BIT            NOT NULL,
    [Start]     DATETIME       NOT NULL,
    [End]       DATETIME       NOT NULL,
    [Color]     VARCHAR (6)    NOT NULL,
    [IsExamine] BIT            NOT NULL,
    [UserId]    NVARCHAR (128) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Setting]...';


GO
CREATE TABLE [dbo].[Setting] (
    [Id]                        TINYINT        IDENTITY (1, 1) NOT NULL,
    [Title]                     NVARCHAR (70)  NOT NULL,
    [Description]               NVARCHAR (150) NOT NULL,
    [Keyword]                   NVARCHAR (150) NOT NULL,
    [Membership]                BIT            NOT NULL,
    [DefaultRole]               NVARCHAR (128) NOT NULL,
    [LoginURL]                  VARCHAR (256)  NOT NULL,
    [LockedIPNoteDefault]       NVARCHAR (150) NOT NULL,
    [IsSaveCanceledAppointment] BIT            NOT NULL,
    [AppointmentIntervalTime]   TINYINT        NOT NULL,
    [AppointmentStartTime]      INT            NOT NULL,
    [AppointmentEndTime]        INT            NOT NULL,
    CONSTRAINT [PK_Setting] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[SupportOnline]...';


GO
CREATE TABLE [dbo].[SupportOnline] (
    [Id]          TINYINT        IDENTITY (1, 1) NOT NULL,
    [Code]        VARCHAR (50)   NOT NULL,
    [Name]        NVARCHAR (50)  NOT NULL,
    [WelcomeNote] NVARCHAR (150) NOT NULL,
    [IsUsed]      BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Survey]...';


GO
CREATE TABLE [dbo].[Survey] (
    [Id]             VARCHAR (128)  NOT NULL,
    [Title]          NVARCHAR (150) NOT NULL,
    [Description]    NVARCHAR (MAX) NOT NULL,
    [Message]        NVARCHAR (300) NOT NULL,
    [IsBranding]     BIT            NULL,
    [Logo]           VARCHAR (256)  NULL,
    [Url]            VARCHAR (256)  NULL,
    [IsSurveyInvite] BIT            NULL,
    [IsPublic]       BIT            NULL,
    [IsActive]       BIT            NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[SurveyAnswers]...';


GO
CREATE TABLE [dbo].[SurveyAnswers] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [QuestionId] VARCHAR (128)  NOT NULL,
    [Answer]     NVARCHAR (150) NULL,
    [LowScore]   NVARCHAR (128) NULL,
    [HightScore] NVARCHAR (128) NULL,
    PRIMARY KEY CLUSTERED ([QuestionId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[SurveyAnswers].[IX_SurveyAnswers_QuestionId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyAnswers_QuestionId]
    ON [dbo].[SurveyAnswers]([QuestionId] ASC);


GO
PRINT N'Creating [dbo].[SurveyQuestions]...';


GO
CREATE TABLE [dbo].[SurveyQuestions] (
    [Id]          VARCHAR (128)  NOT NULL,
    [SurveyId]    VARCHAR (128)  NOT NULL,
    [Question]    NVARCHAR (300) NOT NULL,
    [Type]        TINYINT        NOT NULL,
    [IsRequireds] BIT            NOT NULL,
    [IsRandomize] BIT            NOT NULL,
    CONSTRAINT [PK_SurveyQuestions] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[SystemNotification]...';


GO
CREATE TABLE [dbo].[SystemNotification] (
    [Id]       INT            IDENTITY (1, 1) NOT NULL,
    [Detail]   NVARCHAR (300) NOT NULL,
    [Date]     VARCHAR (10)   NOT NULL,
    [Time]     VARCHAR (8)    NOT NULL,
    [SendFrom] NVARCHAR (128) NOT NULL,
    [Link]     NVARCHAR (256) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[SystemNotificationUsers]...';


GO
CREATE TABLE [dbo].[SystemNotificationUsers] (
    [Id]     INT            NOT NULL,
    [UserId] NVARCHAR (128) NOT NULL,
    [IsRead] BIT            NOT NULL,
    CONSTRAINT [PK_SystemNotificationUsers] PRIMARY KEY CLUSTERED ([Id] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [dbo].[UserNotification]...';


GO
CREATE TABLE [dbo].[UserNotification] (
    [Id]     VARCHAR (128)  NOT NULL,
    [Detail] NVARCHAR (300) NOT NULL,
    [Date]   VARCHAR (10)   NOT NULL,
    [Time]   VARCHAR (8)    NOT NULL,
    [UserId] NVARCHAR (128) NOT NULL,
    [IsRead] BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[EmailMarketing]...';


GO
ALTER TABLE [dbo].[EmailMarketing]
    ADD DEFAULT 1 FOR [IsUsed];


GO
PRINT N'Creating unnamed constraint on [dbo].[MessageRecipient]...';


GO
ALTER TABLE [dbo].[MessageRecipient]
    ADD DEFAULT 1 FOR [IsUsed];


GO
PRINT N'Creating unnamed constraint on [dbo].[Survey]...';


GO
ALTER TABLE [dbo].[Survey]
    ADD DEFAULT 1 FOR [IsBranding];


GO
PRINT N'Creating unnamed constraint on [dbo].[Survey]...';


GO
ALTER TABLE [dbo].[Survey]
    ADD DEFAULT 0 FOR [IsSurveyInvite];


GO
PRINT N'Creating unnamed constraint on [dbo].[Survey]...';


GO
ALTER TABLE [dbo].[Survey]
    ADD DEFAULT 0 FOR [IsPublic];


GO
PRINT N'Creating unnamed constraint on [dbo].[Survey]...';


GO
ALTER TABLE [dbo].[Survey]
    ADD DEFAULT 0 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[SurveyAnswers]...';


GO
ALTER TABLE [dbo].[SurveyAnswers]
    ADD DEFAULT 0 FOR [LowScore];


GO
PRINT N'Creating unnamed constraint on [dbo].[SurveyAnswers]...';


GO
ALTER TABLE [dbo].[SurveyAnswers]
    ADD DEFAULT 0 FOR [HightScore];


GO
PRINT N'Creating [dbo].[FK_ArticleComment_Article]...';


GO
ALTER TABLE [dbo].[ArticleComment] WITH NOCHECK
    ADD CONSTRAINT [FK_ArticleComment_Article] FOREIGN KEY ([ArticleId]) REFERENCES [dbo].[Article] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Message_MessageFolder]...';


GO
ALTER TABLE [dbo].[Message] WITH NOCHECK
    ADD CONSTRAINT [FK_Message_MessageFolder] FOREIGN KEY ([FolderId]) REFERENCES [dbo].[MessageFolder] ([Id]);


GO
PRINT N'Creating [dbo].[FK_MessageContent_Message]...';


GO
ALTER TABLE [dbo].[MessageContent] WITH NOCHECK
    ADD CONSTRAINT [FK_MessageContent_Message] FOREIGN KEY ([MessageId]) REFERENCES [dbo].[Message] ([Id]);


GO
PRINT N'Creating [dbo].[FK_MessageRecipient_Message]...';


GO
ALTER TABLE [dbo].[MessageRecipient] WITH NOCHECK
    ADD CONSTRAINT [FK_MessageRecipient_Message] FOREIGN KEY ([MessageId]) REFERENCES [dbo].[Message] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Organization_Organization]...';


GO
ALTER TABLE [dbo].[Organization] WITH NOCHECK
    ADD CONSTRAINT [FK_Organization_Organization] FOREIGN KEY ([ParentId]) REFERENCES [dbo].[Organization] ([Id]);


GO
PRINT N'Creating [dbo].[FK_SurveyAnswers_SurveyQuestions]...';


GO
ALTER TABLE [dbo].[SurveyAnswers] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyAnswers_SurveyQuestions] FOREIGN KEY ([QuestionId]) REFERENCES [dbo].[SurveyQuestions] ([Id]);


GO
PRINT N'Creating [dbo].[FK_SurveyQuestions_Survey]...';


GO
ALTER TABLE [dbo].[SurveyQuestions] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyQuestions_Survey] FOREIGN KEY ([SurveyId]) REFERENCES [dbo].[Survey] ([Id]);


GO
PRINT N'Creating [dbo].[ufnGenerationNumber]...';


GO
CREATE FUNCTION [dbo].[ufnGenerationNumber](
	@Time INT,
	@IntervalTime INT,
	@StartTime INT
)
RETURNS INT
AS
BEGIN
	DECLARE @STT INT = 1
	WHILE (@StartTime+@IntervalTime <= @Time)
	BEGIN
		SET @STT = @STT + 1
		SET @StartTime = @StartTime + @IntervalTime
	END
	RETURN @STT
END
GO
PRINT N'Creating [dbo].[ufnGetDate]...';


GO
CREATE FUNCTION [dbo].[ufnGetDate]()
RETURNS VARCHAR(20)
AS
BEGIN
	RETURN CONVERT(VARCHAR, GETDATE(), 103)
END
GO
PRINT N'Creating [dbo].[ufn_SpitString]...';


GO
CREATE FUNCTION [dbo].[ufn_SpitString]
(
	@Text       VARCHAR(MAX),
	@Separator  VARCHAR(MAX)
)
RETURNS @tableOut TABLE(VALUE VARCHAR(MAX))
AS
BEGIN
	DECLARE @value  VARCHAR(MAX),
	        @Pos    INT
	
	SET @Text = LTRIM(RTRIM(@Text)) + @Separator
	SET @Pos = CHARINDEX(@Separator, @Text, LEN(@Separator))
	
	IF REPLACE(@Text, @Separator, '') <> ''
	BEGIN
	    WHILE @Pos > 0
	    BEGIN
	        SET @value = LTRIM(RTRIM(LEFT(@Text, @Pos - 1)))
	        IF @value <> ''
	        BEGIN
	            INSERT INTO @tableOut(VALUE) VALUES(@value)
	        END
	        
	        SET @Text = RIGHT(@Text, LEN(@Text) -(@Pos + LEN(@Separator) - 1))
	        SET @Pos = CHARINDEX(@Separator, @Text, LEN(@Separator))
	    END
	END
	
	RETURN;
END
GO
PRINT N'Creating [dbo].[usp_Appointment]...';


GO
CREATE PROC [dbo].[usp_Appointment](
	@Id INT = 0,
	@Date DATE = '',
	@AppointmentNo INT = 0,
	@PatientName NVARCHAR(50) = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF (@Id > 0)
		BEGIN
			SELECT a.*,
				b.[Date], b.[Time], b.[AppointmentNo],
				b.[PatientName], b.[PatientAddress], b.[PatientEmail], b.[PatientPhone],
				b.[PatientGender], b.[PatientDoB], b.[Status]
			FROM [dbo].[Appointment] a  RIGHT JOIN [dbo].[AppointmentCollection] b 
			ON a.[Id] = b.[Id] WHERE a.[Id] = @Id
		END
		ELSE
		BEGIN
			DECLARE @SQLString NVARCHAR(500);
			DECLARE @ParmDefinition nvarchar(500); 

			SET @ParmDefinition = N'@Appointment_Date DATE, @Appointment_No INT,@Patient_Name NVARCHAR(50)';
			SET @SQLString = N'SELECT a.*,
				b.[Date], b.[Time], b.[AppointmentNo],
				b.[PatientName], b.[PatientAddress], b.[PatientEmail], b.[PatientPhone],
				b.[PatientGender], b.[PatientDoB], b.[Status]
			FROM [dbo].[Appointment] a  WITH(INDEX(idxAppointmentPhysician)) RIGHT JOIN [dbo].[AppointmentCollection] b 
			ON a.[Id] = b.[Id] WHERE b.[Date] = @Appointment_Date AND b.[AppointmentNo] = @Appointment_No';
			IF @PatientName != ''
				SET @SQLString = @SQLString + N' AND b.[PatientName]  LIKE N''%@Patient_Name%''';

			EXECUTE sp_executesql @SQLString, @ParmDefinition, @Appointment_Date = @Date, @Appointment_No = @AppointmentNo, @Patient_Name = @PatientName
		END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Appointment_Dashboard]...';


GO
CREATE PROC [dbo].[usp_Appointment_Dashboard]
	@UserId NVARCHAR(128)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT TOP 5
			   a.[PhysicianId], b.[Name] AS [PhysicianName],
			   c.[Date] AS [Date], c.[Time] AS [Time], c.[AppointmentNo] AS [No],
			   e.[Name] AS [DepartmentName]
		FROM [dbo].[Appointment] a
			 LEFT JOIN [dbo].[Users] b ON a.[PhysicianId] = b.[Id]
			 LEFT JOIN [dbo].[AppointmentCollection] c ON a.[Id] = c.[Id]
			 LEFT JOIN [dbo].[DoctorProfile] d ON b.[Id] = d.[UserId]
			 LEFT JOIN [dbo].[Department] e ON d.[DepartmentId] = e.[Id]
		WHERE a.[PatientId] = @UserId ORDER BY c.[Date], c.[Time]  DESC
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Appointment_Transaction]...';


GO
CREATE PROC [dbo].[usp_Appointment_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,--Appointment
	@Date DATE = '',
	@Time int = 8,
	@PhysicianId NVARCHAR(128) = '',
	@PatientId NVARCHAR(128) = '',
	@Symptom NVARCHAR(300) = '',
	@AppointmentNo SMALLINT = 0,
	@PatientName NVARCHAR(50) = '',
	@PatientAddress NVARCHAR(150) = '',
	@PatientEmail VARCHAR(256) = '',
	@PatientPhone VARCHAR(20) = '',
	@PatientGender TINYINT = 1,
	@PatientDoB DATE = '',
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)

	BEGIN TRY
		BEGIN TRAN;

			SET @ModifiedDate = [dbo].[ufnGetDate]()

			IF @Action = 'I' --INSERT
			BEGIN
				
				SET @CreatedDate = @ModifiedDate

				INSERT [dbo].[Appointment]
				VALUES(@PhysicianId, @PatientId, @Symptom, @CreatedDate, @ModifiedDate, @PatientId)

				SET @return = SCOPE_IDENTITY()

				INSERT [dbo].[AppointmentCollection] 
				VALUES(@Id, @Date, @Time, @AppointmentNo, @PatientName, @PatientAddress, @PatientEmail, @PatientPhone, @PatientGender, @PatientDoB, @Status)
				
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				--STATUS: 0 - Just Created/Pending, 1 - Approved, 2 - Canceled
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[Appointment] WHERE [Id] = @Id)
				BEGIN
					UPDATE [dbo].[Appointment]
					SET [PhysicianId] = @PhysicianId, [PatientId] = @PatientId, [Symptom] = @Symptom, [ModifiedDate] = @ModifiedDate
					WHERE [Id] = @Id  

					UPDATE [dbo].[AppointmentCollection]
					SET [AppointmentNo] = @AppointmentNo, [PatientName] = @PatientName, [PatientEmail] = @PatientEmail,
					[PatientAddress] = @PatientAddress, [PatientPhone] = @PatientPhone ,[PatientGender] = @PatientGender, [PatientDoB] =  @PatientDoB, [Status] = @Status
					WHERE [Id] = @Id  

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[Appointment] WHERE [Id] = @Id)
				BEGIN
					DELETE FROM [dbo].[AppointmentCollection]
					WHERE [Id] = @Id

					DELETE FROM [dbo].[Appointment]
					WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_AppointmentLog]...';


GO
CREATE PROC [dbo].[usp_AppointmentLog](
	@Id UniqueIdentifier
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	--cast(cast(0 as binary) as uniqueidentifier) convert zero to uniqueidentifier
	BEGIN TRY
		IF (@Id IS NOT NULL)
		BEGIN
			SELECT l.*,
				us.Name PhysicianName
				--un.Name PatientName,
			FROM [dbo].[AppointmentLog] l
				LEFT JOIN [dbo].[Users] us ON us.Id = l.PhysicianId
			WHERE l.Id = @Id
		END
		ELSE
		BEGIN
			SELECT l.*,
				us.Name PhysicianName
				--un.Name PatientName,
			FROM [dbo].[AppointmentLog] l
				LEFT JOIN [dbo].[Users] us ON us.Id = l.PhysicianId
		END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_AppointmentLog_ApprovedBook]...';


GO
CREATE PROC [dbo].[usp_AppointmentLog_ApprovedBook]
(
	@Id VARCHAR(MAX),
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)

	BEGIN TRY
		BEGIN TRAN;
			-- Confirm accept
			IF @Status = 2
			BEGIN
				SET @ModifiedDate = [dbo].[ufnGetDate]()
				SET @CreatedDate = @ModifiedDate

				DECLARE @Ids VARCHAR(50)
				DECLARE IDs CURSOR FOR
				SELECT VALUE
				FROM   [dbo].[ufn_SpitString](@Id,',')
				OPEN IDs
				FETCH next FROM IDs INTO @Ids
				WHILE @@FETCH_STATUS = 0
				BEGIN

				--Get item by id
				SELECT * INTO #AppointmentLogById
				FROM [dbo].[AppointmentLog] l
				WHERE l.Id = @Ids

				--Post data to Appointment
				DECLARE @ColectionId INT
				INSERT [dbo].[Appointment]([PhysicianId], [PatientId], [Symptom], [CreatedDate], [ModifiedDate], [ModifedUser])
				SELECT item.PhysicianId, item.PatientId, item.Symptom, @CreatedDate, @ModifiedDate, N'Patient Test' FROM #AppointmentLogById item
				SET @ColectionId = (SELECT SCOPE_IDENTITY())

				--Generation Number
				SELECT TOP 1 s.AppointmentIntervalTime, s.AppointmentStartTime INTO #GenerationTime
				FROM [dbo].[Setting] s

				DECLARE @AppointmentNo INT
				DECLARE @IntervalTime INT
				DECLARE @StartTime INT
				DECLARE @Time INT

				SET @IntervalTime = (SELECT t.AppointmentIntervalTime FROM #GenerationTime t)
				SET @StartTime = (SELECT t.AppointmentStartTime FROM #GenerationTime t)
				SET @Time = (SELECT t.[Time] FROM [dbo].[AppointmentLog] t WHERE t.Id = @Ids )

				SET @AppointmentNo = [dbo].[ufnGenerationNumber](@Time, @IntervalTime, @StartTime)

				--Post data to AppointmentCollection
				INSERT [dbo].[AppointmentCollection]([Id], [Date], [Time], [AppointmentNo], [PatientName], [PatientAddress], [PatientEmail], [PatientPhone], [PatientGender], [PatientDoB], [Status])
				SELECT @ColectionId, item.[Date], item.[Time], @AppointmentNo, ISNULL(item.PatientName, N'NA'), ISNULL(item.PatientAddress, N'NA'), item.PatientEmail, item.PatientPhone, item.PatientGender, item.PatientDoB, 2 FROM #AppointmentLogById item

				UPDATE [dbo].[AppointmentLog] SET [Status] = 2 WHERE [Id] = @Ids

				-- DROP Temp Table
				DROP TABLE #AppointmentLogById
				DROP TABLE #GenerationTime

				
				FETCH next FROM IDs INTO @Ids
				END
				CLOSE IDs
				DEALLOCATE IDs

				SET @return = 1
			END

			-- Confirm cancel
			IF @Status = 3
			BEGIN
				DECLARE @isCheck BIT
				SET @isCheck = (SELECT TOP 1 s.IsSaveCanceledAppointment FROM [dbo].[Setting] s)
				IF @isCheck = 1
				BEGIN
					UPDATE [dbo].[AppointmentLog]
					SET [Status] = 3
					WHERE [Id] IN (@Id)

					SET @return = 1
				END
				ELSE
				BEGIN
					DELETE FROM [dbo].[AppointmentLog] WHERE [Id] IN (@Id)

					SET @return = 1
				END
			END
		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_AppointmentLog_Confirm]...';


GO
CREATE PROC [dbo].[usp_AppointmentLog_Confirm]
(
	@Action CHAR(1) = 'I',
	@Id UNIQUEIDENTIFIER,
	@Date DATE = '',
	@Time int = 480,
	@PhysicianId NVARCHAR(128) = '',
	@PatientId NVARCHAR(128) = '',
	@Symptom NVARCHAR(300) = '',
	@PatientName NVARCHAR(50) = '',
	@PatientAddress NVARCHAR(150) = '',
	@PatientEmail VARCHAR(256) = '',
	@PatientPhone VARCHAR(20) = '',
	@PatientGender TINYINT = 1,
	@PatientDoB DATE = NULL,
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)

	BEGIN TRY
		BEGIN TRAN;
			-- Confirm accept
			IF @Status = 2
			BEGIN
				SET @ModifiedDate = [dbo].[ufnGetDate]()
				SET @CreatedDate = @ModifiedDate

				SELECT * INTO #AppointmentLogById
				FROM [dbo].[AppointmentLog] l
				WHERE l.Id = @Id

				--Post data to Appointment
				DECLARE @ColectionId INT
				INSERT [dbo].[Appointment]([PhysicianId], [PatientId], [Symptom], [CreatedDate], [ModifiedDate], [ModifedUser])
				SELECT item.PhysicianId, item.PatientId, item.Symptom, @CreatedDate, @ModifiedDate, N'Patient Test' FROM #AppointmentLogById item
				SET @ColectionId = (SELECT SCOPE_IDENTITY())

				--Generation Number
				SELECT TOP 1 s.AppointmentIntervalTime, s.AppointmentStartTime INTO #GenerationTime
				FROM [dbo].[Setting] s
				--
				DECLARE @AppointmentNo INT
				DECLARE @IntervalTime INT
				DECLARE @StartTime INT
				SET @IntervalTime = (SELECT t.AppointmentIntervalTime FROM #GenerationTime t)
				SET @StartTime = (SELECT t.AppointmentStartTime FROM #GenerationTime t)
				SET @AppointmentNo = [dbo].[ufnGenerationNumber](@Time, @IntervalTime, @StartTime)

				--Post data to AppointmentCollection
				INSERT [dbo].[AppointmentCollection]([Id], [Date], [Time], [AppointmentNo], [PatientName], [PatientAddress], [PatientEmail], [PatientPhone], [PatientGender], [PatientDoB], [Status])
				SELECT @ColectionId, item.[Date], item.[Time], @AppointmentNo, ISNULL(item.PatientName, N'NA'), ISNULL(item.PatientAddress, N'NA'), item.PatientEmail, item.PatientPhone, item.PatientGender, item.PatientDoB, 2 FROM #AppointmentLogById item

				UPDATE [dbo].[AppointmentLog] SET [Status] = 2 WHERE [Id] = @Id

				-- DROP Temp Table
				DROP TABLE #AppointmentLogById
				DROP TABLE #GenerationTime

				SET @return = 1
			END

			-- Confirm cancel
			IF @Status = 3
			BEGIN
				DECLARE @isCheck BIT
				SET @isCheck = (SELECT TOP 1 s.IsSaveCanceledAppointment FROM [dbo].[Setting] s)
				IF @isCheck = 1
				BEGIN
					UPDATE [dbo].[AppointmentLog]
					SET [Status] = 3
					WHERE [Id] = @Id

					SET @return = 1
				END
				ELSE
				BEGIN
					DELETE FROM [dbo].[AppointmentLog] WHERE [Id] = @Id

					SET @return = 1
				END
			END
		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_AppointmentLog_Search]...';


GO
CREATE PROC [dbo].[usp_AppointmentLog_Search](
	@Status INT = 0,
	@FromDate DATE = '',
	@ToDate DATE = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	BEGIN TRY
		SELECT * FROM [dbo].[AppointmentLog] l
		WHERE 
			(l.[Status] = @Status OR @Status IS NULL)
			AND
			(
				(l.[Date] BETWEEN @FromDate AND @ToDate)
				OR
				(@FromDate IS NULL AND @ToDate IS NULL)
				OR
				(@FromDate IS NULL AND l.[Date] <= @ToDate)
				OR
				(@ToDate IS NULL AND l.[Date] >= @FromDate)
			)
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_AppointmentLog_Transaction]...';


GO
CREATE PROC [dbo].[usp_AppointmentLog_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id UNIQUEIDENTIFIER,
	@Date DATE = '',
	@Time int = 8,
	@PhysicianId NVARCHAR(128) = '',
	@PatientId NVARCHAR(128) = '',
	@Symptom NVARCHAR(300) = '',
	@PatientName NVARCHAR(50) = '',
	@PatientAddress NVARCHAR(150) = '',
	@PatientEmail VARCHAR(256) = '',
	@PatientPhone VARCHAR(20) = '',
	@PatientGender TINYINT = 1,
	@PatientDoB DATE = NULL,
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)

	BEGIN TRY
		BEGIN TRAN;

			SET @ModifiedDate = [dbo].[ufnGetDate]()
			IF @Action = 'I' --INSERT
			BEGIN
				SET @Id = NEWID(); 
				SET @CreatedDate = @ModifiedDate
					INSERT [dbo].[AppointmentLog]
					VALUES(@Id, @Date, @Time, @PhysicianId, @PatientId, @Symptom,@PatientName,@PatientAddress,@PatientEmail,@PatientPhone,@PatientGender,@PatientDoB, @CreatedDate, @ModifiedDate, @Status)
				END
			ELSE
			BEGIN
				INSERT [dbo].[AppointmentLog]
				VALUES(@Id, @Date, @Time, @PhysicianId, @PatientId, @Symptom,@PatientName,@PatientAddress,@PatientEmail,@PatientPhone,@PatientGender,@PatientDoB, @CreatedDate, @ModifiedDate, @Status)
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				--STATUS: 0 - Just Created/Pending, 1 - Approved, 2 - Canceled
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[AppointmentLog] WHERE [Id] = @Id)
				BEGIN
					UPDATE [dbo].[AppointmentLog]
					SET [Date] = @Date, [Time] = @Time, [PhysicianId] = @PhysicianId, 
					[PatientId] = @PatientId, [Symptom] = @Symptom,
					[PatientName] = @PatientName, [PatientAddress] = @PatientAddress, [PatientEmail] = @PatientEmail, [PatientPhone] = @PatientPhone,
					[PatientGender] = @PatientGender, [PatientDoB] = @PatientDoB,
					[ModifiedDate] = @ModifiedDate, [Status] = @Status
					WHERE [Id] = @Id  

				END
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[AppointmentLog] WHERE [Id] = @Id)
				BEGIN
					DELETE FROM [dbo].[AppointmentLog]
					WHERE [Id] = @Id
				END

			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_Article]...';


GO
CREATE PROC [dbo].[usp_Article]
	@Id int,
	@patientId NVARCHAR(128) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id = 0 
			SELECT	a.*, u.Name as AuthorName, u.[Image] as ImageProfile,  (SELECT COUNT(b.Id) from ArticleComment b where ArticleId = a.Id) as CountComments
			FROM	[dbo].[Article] a inner join
					[dbo].[Users] u on a.PatientId = u.Id
			WHERE	a.PatientId = @patientId OR @patientId is NULL OR @patientId = ''
			
		ELSE
			SELECT  a.*, u.Name as AuthorName, u.[Image] as ImageProfile , (SELECT COUNT(b.Id) from ArticleComment b where ArticleId = a.Id) as CountComments
			FROM	[dbo].[Article] a inner join
					[dbo].[Users] u on a.PatientId = u.Id
			WHERE	a.Id = @Id
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Article_Transaction]...';


GO
CREATE PROC [dbo].[usp_Article_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Date datetime,
	@Title NVARCHAR(150) = '',
	@Detail NVARCHAR(1000) = '',
	@PatientId NVARCHAR(128) = 0,
	@Status TINYINT = 1,
	@IsClosed BIT
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0
	DECLARE @CurrentDate SMALLDATETIME

	BEGIN TRY
		BEGIN TRAN;
			SET @CurrentDate = GETDATE()

			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Article]
				VALUES(@CurrentDate, @Title, @Detail, @PatientId, @Status, @IsClosed)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN
					UPDATE [dbo].[Article]
					SET [Title] = @Title, [Detail] = @Detail, [Status] = @Status, [IsClosed] = @IsClosed
					WHERE [Id] = @Id  

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN	
					-- Article Comment Table
					DELETE FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id

					-- Article Table
					DELETE FROM [dbo].[Article] WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		DECLARE @ErrorSeverity INT,
				@ErrorNumber   INT,
				@ErrorMessage nvarchar(4000),
				@ErrorState INT,
				@ErrorLine  INT,
				@ErrorProc nvarchar(200)
		-- Grab error information from SQL functions
		SET @ErrorSeverity = ERROR_SEVERITY()
		SET @ErrorNumber   = ERROR_NUMBER()
		SET @ErrorMessage  = ERROR_MESSAGE()
		SET @ErrorState    = ERROR_STATE()
		SET @ErrorLine     = ERROR_LINE()
		SET @ErrorProc     = ERROR_PROCEDURE()
		SET @ErrorMessage  = 'Problem updating''s information.' + CHAR(13) + 'SQL Server Error Message is: ' + CAST(@ErrorNumber AS VARCHAR(10)) + ' in procedure: ' + @ErrorProc + ' Line: ' + CAST(@ErrorLine AS VARCHAR(10)) + ' Error text: ' + @ErrorMessage
		-- Not all errors generate an error state, to set to 1 if it's zero
		IF @ErrorState  = 0
		SET @ErrorState = 1
		-- If the error renders the transaction as uncommittable or we have open transactions, we may want to rollback
		IF @@TRANCOUNT > 0
		BEGIN
				-- Print 'Rollback transaction'
				ROLLBACK TRANSACTION
		END
		RAISERROR (@ErrorMessage , @ErrorSeverity, @ErrorState, @ErrorNumber)
		SET  @return = 0
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_ArticleComment]...';


GO
CREATE PROC [dbo].[usp_ArticleComment] (
	@TypeGet tinyint = 0, -- 0: get all comment by ArticleId ; 1: Get comment by Id
	@Id INT = 0,
	@ArticleId INT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @TypeGet = 0
			SELECT	a.*, u.Name AS Author, u.[Image] as ImageProfile 
			FROM	[dbo].[ArticleComment] a INNER JOIN
					[dbo].[Users] u ON a.CreatedUser = u.Id
			WHERE [ArticleId] = @ArticleId
		ELSE If @TypeGet = 1
			SELECT	a.*, u.Name AS Author, u.[Image] as ImageProfile 
			FROM	[dbo].[ArticleComment] a INNER JOIN
					[dbo].[Users] u ON a.CreatedUser = u.Id
			WHERE	a.[Id] = @Id AND [ArticleId] = @ArticleId

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_ArticleComment_Transaction]...';


GO
CREATE PROC [dbo].[usp_ArticleComment_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@ArticleId SMALLINT = 1,
	@Date datetime,
	@Detail NVARCHAR(1000) ='',
	@CreatedUser NVARCHAR(128) = 0,
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0
	DECLARE @CurrentDate SMALLDATETIME

	BEGIN TRY
		BEGIN TRAN;
			SET @CurrentDate = GETDATE()

			IF @Action = 'I' --INSERT
			BEGIN				
				SELECT @Id = ISNULL(MAX([Id]),0) + 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @ArticleId
				INSERT [dbo].[ArticleComment]
				VALUES(@Id, @ArticleId, @CurrentDate, @Detail, @CreatedUser, @Status)

				--SET @return = SCOPE_IDENTITY()
				SET @return = @Id
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF @ArticleId > 0 AND @Id > 0
				BEGIN

					UPDATE [dbo].[ArticleComment]
					SET [Detail] = @Detail, [Status] = @Status, [Date] = @CurrentDate
					WHERE [Id] = @Id  AND [ArticleId] = @ArticleId
					
					SET @return = @Id
					print @return
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF @ArticleId > 0 AND @Id > 0
				BEGIN
					DELETE FROM [dbo].[ArticleComment]
					WHERE [Id] = @Id  AND [ArticleId] = @ArticleId

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_CheckPermission]...';


GO
CREATE PROCEDURE [dbo].[usp_CheckPermission]
	@UserId NVARCHAR(128) = '',
	@OperationKey VARCHAR(70) = '',
	@ResourceKey VARCHAR(70) = '',
	@DefaultRoleInitial NVARCHAR(256) = ''
AS
BEGIN
   SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @Permission NVARCHAR(128)
	DECLARE @PermissionName NVARCHAR(30)
	SET @PermissionName = RTRIM(@ResourceKey) + '.' + RTRIM(@OperationKey)

	--CHECK ADMIN
	IF EXISTS(SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Id] = @UserId AND  [IsAdmin] = 1)
	BEGIN
		PRINT 'OKEY ADMIN'
		SELECT 1
		RETURN(1)
	END
	--CHECK USER IN ROLES
	IF EXISTS(SELECT TOP 1 1 FROM [dbo].[UserRole] a LEFT JOIN [dbo].[Role] b ON a.[RoleId] = b.[Id]
	WHERE [UserId] = @UserId AND b.[Name] = @DefaultRoleInitial)
	BEGIN
		PRINT 'OKEY ADMIN 2'
		SELECT 1
		RETURN(1)
	END

	-- CHECK PERMISSION
	IF EXISTS(SELECT TOP 1 1 FROM [dbo].[UserRole] WHERE [UserId] = @UserId AND [RoleId] IN (
	SELECT [RoleId] FROM [dbo].[PermissionRoles] a LEFT JOIN [dbo].[Permissions] b
	ON a.[PermissionId] = b.[Id] WHERE b.[Name] = @PermissionName))
	BEGIN
		PRINT 'OKEY ALLOWED'
		SELECT 1
		RETURN(1)
	END

	SELECT 0
	RETURN(0)
END
GO
PRINT N'Creating [dbo].[usp_Department]...';


GO
CREATE PROC [dbo].[usp_Department]
	@Id SMALLINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Department]
			WHERE [Id] = @Id
			ORDER BY [Id]
		ELSE
			SELECT * FROM [dbo].[Department]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Department_Available]...';


GO
CREATE PROC [dbo].[usp_Department_Available]
	@Id SMALLINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Department]
			WHERE [Id] = @Id
			ORDER BY [Id]
		ELSE
			SELECT * FROM [dbo].[Department] WHERE [IsUsed] = 1
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Department_CheckExistName]...';


GO
CREATE PROCEDURE [dbo].[usp_Department_CheckExistName]
	@Name  NVARCHAR(50),
	@Id SMALLINT
AS
BEGIN
	DECLARE @return BIT = 0

	print @Id
	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Department] WHERE [Name] = @Name))
			SET @return = 1
	ELSE
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Department] WHERE [Name] = @Name and Id <> @Id))
			SET @return = 1
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Department_Transaction]...';


GO
CREATE PROC [dbo].[usp_Department_Transaction](
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1,
	@Name NVARCHAR(50) = '',
	@Description NVARCHAR(250) = '',
	@Handler NVARCHAR(256) = '',
	@Img VARCHAR(256) = '',
	@Sort TINYINT = 1,
	@IsUsed BIT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			INSERT [dbo].[Department] ([Name], [Description], [Handler], [Img], [Sort], [IsUsed])
			VALUES(@Name, @Description, @Handler, @Img, @Sort, @IsUsed)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[Department]
			SET [Name] = @Name, [Description] = @Description, [Handler] = @Handler, [Img] = @Img, [IsUsed] = @IsUsed, [Sort] = @Sort
			WHERE [Id] = @Id  
		END

		IF @Action = 'D' --DELETE
		BEGIN
			DELETE FROM [dbo].[Department]
			WHERE [Id] = @Id
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Creating [dbo].[usp_DepartmentServices]...';


GO
CREATE PROC [dbo].[usp_DepartmentServices]
	@Id SMALLINT = 1, @DepartmentId SMALLINT = 1
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[DepartmentServices]
			WHERE [Id] = @Id AND [DepartmentId] = @DepartmentId
			
		ELSE
			SELECT * FROM [dbo].[DepartmentServices] WHERE [DepartmentId] = @DepartmentId ORDER BY [Name]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_DepartmentServices_CheckExistName]...';


GO
CREATE PROCEDURE [dbo].[usp_DepartmentServices_CheckExistName]
	@Name  NVARCHAR(50),
	@Id SMALLINT, @DepartmentId SMALLINT
AS
BEGIN
	DECLARE @return BIT = 0

	print @Id
	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[DepartmentServices] WHERE [DepartmentId] = @DepartmentId AND [Name] = @Name))
			SET @return = 1
	ELSE
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[DepartmentServices] WHERE [DepartmentId] = @DepartmentId AND [Name] = @Name and Id <> @Id))
			SET @return = 1
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_DepartmentServices_Transaction]...';


GO
CREATE PROC [dbo].[usp_DepartmentServices_Transaction](
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1, @DepartmentId SMALLINT = 1,
	@Name NVARCHAR(80)= '',
	@Price NUMERIC(13,3) = 0,
	@Category TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			SELECT @Id = ISNULL(MAX(id),0) + 1  FROM [dbo].[DepartmentServices] WHERE [DepartmentId] = @DepartmentId
			INSERT [dbo].[DepartmentServices] (Id, DepartmentId, Name, Price, Category)
			VALUES(@Id, @DepartmentId, @Name, @Price, @Category)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[DepartmentServices]
			SET [Name] = @Name, [Price] = @Price, [Category] = @Category
			WHERE [Id] = @Id  AND [DepartmentId] = @DepartmentId
		END

		IF @Action = 'D' --DELETE
		BEGIN
			DELETE FROM [dbo].[DepartmentServices]
			WHERE [Id] = @Id AND [DepartmentId] = @DepartmentId
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Creating [dbo].[usp_DoctorProfile]...';


GO
CREATE PROCEDURE [dbo].[usp_DoctorProfile]
	@UserId NVARCHAR(128) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @UserId <> N''
			SELECT p.*, u.[Name], u.[Image] 
			FROM  [dbo].[Users] u Left JOIN [dbo].[DoctorProfile] p 
			ON p.UserId = u.Id
			WHERE [UserId] = @UserId
		ELSE
			SELECT p.*, u.[Name], u.[Image] 
			FROM  [dbo].[Users] u  Left JOIN [dbo].[DoctorProfile] p
			ON p.UserId = u.Id
			WHERE u.[IsDoctor] = 1
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_DoctorProfile_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_DoctorProfile_Transaction]
(
	@Action CHAR(1) = 'I',
	@UserId NVARCHAR(128),
	@Speciality NVARCHAR(150) = '',
	@Degrees NVARCHAR(150) = '',
	@Training NVARCHAR(500) = '',
	@Office NVARCHAR(150) = '',
	@Workdays NVARCHAR(50) = '',
	@DepartmentId SMALLINT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;

		IF @Action = 'I' --INSERT
		BEGIN
			IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[DoctorProfile] WHERE [UserId] = @UserId) --insert
			BEGIN
				INSERT [dbo].[DoctorProfile] VALUES(@UserId, @Speciality, @Degrees, @Training, @Office, @Workdays, @DepartmentId)
			END
			ELSE
			BEGIN
				UPDATE [dbo].[DoctorProfile]
				SET [Speciality] = @Speciality, [Degrees] = @Degrees, [Training] = @Training, [Office] = @Office, [Workdays] = @Workdays,[DepartmentId] =  @DepartmentId
				WHERE [UserId] = @UserId
			END

			SET @return = 1
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[DoctorProfile]
			SET [Speciality] = @Speciality, [Degrees] = @Degrees, [Training] = @Training, [Office] = @Office, [Workdays] = @Workdays,[DepartmentId] =  @DepartmentId
			WHERE [UserId] = @UserId

			SET @return = 1
		END

		IF @Action = 'D' --DELETE
		BEGIN
			SET @return = 0
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_EmailMarketing]...';


GO
CREATE PROCEDURE [dbo].[usp_EmailMarketing]
	@Id INT
AS
	IF(@Id > 0)
	BEGIN
		SELECT * FROM [dbo].[EmailMarketing]
		WHERE [Id] = @Id
	END
	ELSE
	BEGIN
		SELECT * FROM [dbo].[EmailMarketing]
	END
RETURN 0
GO
PRINT N'Creating [dbo].[usp_EmailMarketing_Transaction]...';


GO
CREATE PROC [dbo].[usp_EmailMarketing_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Name NVARCHAR(128) = '',
	@Detail NVARCHAR(MAX) = '',
	@IsUsed BIT = 0,
	@CreatedUser NVARCHAR(128),
	@CreatedDate VARCHAR(20),
	@ModifiedUser NVARCHAR(128),
	@ModifiedDate VARCHAR(20)
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[EmailMarketing] VALUES(@Name, @Detail, @IsUsed, @CreatedUser, @CreatedDate, @ModifiedUser, @ModifiedDate)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[EmailMarketing]
				SET [Name] = @Name, [Detail] = @Detail, [IsUsed] = @IsUsed, [CreatedUser] = @CreatedUser, [CreatedDate] = @CreatedDate
				WHERE [Id] = @Id  

				SET @return = @Id
			END

			IF @Action = 'D' --DELETE
			BEGIN
				BEGIN
					DELETE FROM [dbo].[EmailMarketing]
					WHERE [Id] = @Id

					SET @return = @Id
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_Group]...';


GO
CREATE PROC [dbo].[usp_Group]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[Group]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Group_Transaction]...';


GO
CREATE PROC [dbo].[usp_Group_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Name NVARCHAR(150) = '',
	@IsReadOnly BIT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Group] VALUES(@Name, @IsReadOnly)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[Group]
				SET [Name] = @Name, [IsReadOnly] = @IsReadOnly
				WHERE [Id] = @Id  

				SET @return = @Id
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[UserGroup] WHERE [GroupId] = @Id)
				BEGIN
					DELETE FROM [dbo].[Group]
					WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_Internal_Dashboard]...';


GO
CREATE PROC [dbo].[usp_Internal_Dashboard]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT COUNT([Id]) AS [Count] FROM [dbo].[Users] WHERE [Id] NOT IN (SELECT DISTINCT [UserId] FROM [dbo].[UserRole])-- Just Created & No Role
		UNION ALL
		SELECT COUNT([Id]) FROM [dbo].[Article] WHERE [Status] = 1 AND [Id] NOT IN (SELECT DISTINCT [ArticleId] FROM [dbo].[ArticleComment]) -- Just Created & No Comment
		UNION ALL
		SELECT COUNT([Id]) FROM [dbo].[OfferAdvise] WHERE [Status] = 1 -- Just Created
		UNION ALL
		SELECT COUNT([Id]) FROM [dbo].[AppointmentLog] WHERE [Status] = 1 -- Just Created
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Login]...';


GO
CREATE PROCEDURE [dbo].[usp_Login]
	@Email NVARCHAR(256),
	@PasswordHash VARCHAR(60)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT u.Name, 
			g.Name as GroupName, 
			r.Name as RoleName,
			p.IsRead, 
			p.IsWrite, 
			p.IsCreate, 
			p.IsModify, 
			p.IsDestroy, 
			p.IsPrint
		FROM [dbo].Users u, [dbo].UserRole ur, [dbo].UserGroup ug,
		[dbo].[Role] r,[dbo].Permission p, [dbo].[Group] g, [dbo].Module m
		WHERE u.Email = @Email
		AND u.PasswordHash = @PasswordHash
		AND u.Id = ur.RoleId
		AND u.Id = ug.UserId
		AND ur.RoleId = r.Id
		AND ug.GroupId = g.Id
		AND r.Id = p.RoleId
		AND p.ModuleId = m.Id
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_MailSetting]...';


GO
CREATE PROC [dbo].[usp_MailSetting]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT TOP 1 * FROM [dbo].[MailSetting]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_MailSetting_Transaction]...';


GO
CREATE PROC [dbo].[usp_MailSetting_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Name NVARCHAR(256) = '',
	@Email VARCHAR(256) = '',
	@Pwd VARCHAR(60) = '',
	@Host VARCHAR(150) = '',
	@Port NUMERIC(3,0) = '',
	@IsSSL BIT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[MailSetting] VALUES(@Name, @Email, @Pwd, @Host, @Port, @IsSSL)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[MailSetting]
				SET [Name] = @Name, [Email] = @Email, [Pwd] = @Pwd, [Host] = @Host, [Port] = @Port, [IsSSL] = @IsSSL
				WHERE [Id] = @Id  

				SET @return = @Id
			END

			IF @Action = 'D' --DELETE
			BEGIN
				
				DELETE FROM [dbo].[MailSetting]
				WHERE [Id] = @Id

				SET @return = @Id
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_Message]...';


GO
CREATE PROC [dbo].[usp_Message]
(
	@FolderId TINYINT = 1,
	@UserId NVARCHAR(128) = '',
	@PageIndex INT,
	@NumberInPage INT,
	@TotalItem INT OUT
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		-- Folder: Inbox, Sent, Draff, Trash
		SELECT *, ROW_NUMBER() OVER (ORDER BY [Date],[Id] DESC) AS RowNumb 
		INTO #DataTMP
		FROM (SELECT * FROM [dbo].[Message]
		WHERE [FolderId] = @FolderId AND ([SenderId] = @UserId OR [ReceiverId] = @UserId)) AS Tmp

		SELECT @TotalItem = COUNT([Id]) FROM #DataTMP

		-- Paging
		SELECT * FROM #DataTMP
		WHERE RowNum BETWEEN (@PageIndex - 1) * @NumberInPage + 1
				AND @PageIndex * @NumberInPage ;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Message_Transaction]...';


GO
CREATE PROC [dbo].[usp_Message_Transaction]
(
	@Action CHAR(1) = 'I',
	--Message
	@Id INT,
	@FolderId TINYINT = 1,
	@Subject NVARCHAR(250) = '',
	@Date SMALLDATETIME,
	@SenderId NVARCHAR(128) = '',
	@ReceiverId NVARCHAR(128) = '',
	@IsRead BIT = 0,
	@IsSend BIT = 0,
	@IsPrioriry BIT = 0,
	--MessageContent
	@Detail NVARCHAR(MAX) = '',
	--MessageRecipient
	@ListReceiverId INTLIST READONLY
)
AS BEGIN


	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
		
			-- Local Variable
			DECLARE @item INT

			IF @Action = 'I' --INSERT
			BEGIN
				SET @Date = GETDATE()

				-- Message Table
				INSERT [dbo].[Message] VALUES(@FolderId, @Subject, @Date, @SenderId, @ReceiverId, @IsRead, @IsSend, @IsPrioriry)
				SET @Id = SCOPE_IDENTITY()

				-- Message Content Table
				INSERT [dbo].[MessageContent] VALUES(@Id, @Detail)

				-- Message Recipient Table
				DECLARE cursorListReceiver CURSOR READ_ONLY FOR SELECT [Item] FROM @ListReceiverId WHERE [Item] > 0
				
				OPEN cursorListReceiver
				FETCH NEXT FROM cursorListReceiver INTO @Item
				
				WHILE @@FETCH_STATUS = 0
				BEGIN
					INSERT INTO [dbo].[MessageRecipient] VALUES(@Id, @item, 1) --Default IsUsed = True
					FETCH NEXT FROM cursorListReceiver INTO @Item
				END
				
				CLOSE cursorListReceiver
				DEALLOCATE cursorListReceiver

				SET @return = @Id
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF @IsSend = 0 -- AVAILABLE UPDATE WHEN EMAIL IS NOT SENT
				BEGIN
					-- Message Table
					UPDATE [dbo].[Message]
					SET [FolderId] = @FolderId, [Subject] = @Subject, [ReceiverId] = @ReceiverId, [IsPriority]  = @IsPrioriry
					WHERE [Id] = @Id  

					-- Message Content Table
					UPDATE [dbo].[MessageContent] SET [Detail] = @Detail WHERE [MessageId] = @Id

					-- Message Recipient Table
					DELETE FROM [dbo].[MessageRecipient] WHERE [MessageId] = @Id
				
					DECLARE cursorListReceiver CURSOR READ_ONLY FOR SELECT [Item] FROM @ListReceiverId WHERE [Item] > 0
				
					OPEN cursorListReceiver
					FETCH NEXT FROM cursorListReceiver INTO @Item
				
					WHILE @@FETCH_STATUS = 0
					BEGIN
						INSERT INTO [dbo].[MessageRecipient] VALUES(@Id, @item, 1) --Default IsUsed = True
						FETCH NEXT FROM cursorListReceiver INTO @Item
					END
				
					CLOSE cursorListReceiver
					DEALLOCATE cursorListReceiver

					SET @return = @Id
				END
			END

			IF @Action = 'D' --DELETE
			BEGIN
				-- Message Content Table
				DELETE FROM [dbo].[MessageContent] WHERE  [MessageId] = @Id

				-- Message Recipient Table
				DELETE FROM [dbo].[MessageRecipient] WHERE [MessageId] = @Id

				-- Message Table
				DELETE FROM [dbo].[Message] WHERE [Id] = @Id

				SET @return = @Id
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_MessageFolder]...';


GO
CREATE PROC [dbo].[usp_MessageFolder]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[MessageFolder]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_MessageFolder_Transaction]...';


GO
CREATE PROC [dbo].[usp_MessageFolder_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Name NVARCHAR(50) = '',
	@Path NVARCHAR(256) = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[MessageFolder] VALUES(@Name, @Path)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[MessageFolder]
				SET [Name] = @Name, [Path] = @Path
				WHERE [Id] = @Id  

				SET @return = @Id
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[Message] WITH(INDEX(idxMessageFolder)) WHERE [FolderId] = @Id)
				BEGIN
					DELETE FROM [dbo].[MessageFolder] WHERE [Id] = @Id

					SET @return = @Id
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_MessageRecipient_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_MessageRecipient_Transaction]
	@MessageId INT,
	@ReceiverId NVARCHAR(128) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN
			IF @MessageId > 0 AND @ReceiverId > 0
				IF NOT EXISTS (SELECT TOP 1 * FROM [dbo].MessageRecipient WHERE MessageId = @MessageId AND ReceiverId = @ReceiverId)
					BEGIN
						INSERT INTO [dbo].MessageRecipient
						VALUES(@MessageId, @ReceiverId, 1)

						SET @return = @MessageId
					END
				ELSE
					SET @return = 0
			ELSE
				SET @return = 0
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Module]...';


GO
CREATE PROC [dbo].[usp_Module]
( 
	@Id SMALLINT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	--DEFAULT: 1 - CMS, 2 - Patient Services, 3 - Internal Services
	BEGIN TRY
		IF(@Id > 0)
			SELECT * FROM [dbo].[Module] WHERE [Id] = @Id
		ELSE
			SELECT * FROM [dbo].[Module]-- WITH(INDEX(idxModuleGroup)) WHERE [Group] = @GroupId
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Module_CheckExistTitle]...';


GO
CREATE PROCEDURE [dbo].[usp_Module_CheckExistTitle]
	@Title  NVARCHAR(128),
	@Id SMALLINT
AS
BEGIN
	DECLARE @return BIT = 0

	print @Id
	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Module] WHERE [Title] = @Title))
			SET @return = 1
	ELSE
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Module] WHERE [Title] = @Title and Id <> @Id))
			SET @return = 1
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Module_CheckIsUsed]...';


GO
CREATE PROCEDURE [dbo].[usp_Module_CheckIsUsed]
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0
	IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Module] WHERE [ParentId] = @Id) )
		SET @return = 1
	
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Module_Initial]...';


GO
CREATE PROC [dbo].[usp_Module_Initial]
( 
	@Group CHAR(1) = '1',
	@UserId NVARCHAR(128) = '',
	@DefaultRoleInitial NVARCHAR(256) = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	--DEFAULT: 1 - CMS, 2 - Patient Services, 3 - Internal Services
	BEGIN TRY

		--CHECK ADMIN
		IF EXISTS(SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Id] = @UserId AND  [IsAdmin] = 1)
		BEGIN
			SELECT * FROM [dbo].[Module] WHERE [Group] = @Group
		END
		ELSE
		BEGIN
			--CHECK USER IN ROLES
			IF EXISTS(SELECT TOP 1 1 FROM [dbo].[UserRole] a LEFT JOIN [dbo].[Role] b ON a.[RoleId] = b.[Id]
			WHERE [UserId] = @UserId AND b.[Name] = @DefaultRoleInitial)
			BEGIN
				SELECT * FROM [dbo].[Module] WHERE [Group] = @Group
			END
			ELSE
			BEGIN
				--GET ROLE 
				SELECT DISTINCT [PermissionId] INTO #PerRole FROM [dbo].[PermissionRoles] a LEFT JOIN (SELECT [RoleId] FROM [dbo].[UserRole] WHERE [UserId] = @UserId) b
				ON a.[RoleId] = b.[RoleId] 

				--GET PERMISSION
				SELECT CONVERT(NVARCHAR(256), SUBSTRING([Name],1,CHARINDEX('.', [Name])-1)) AS Handler INTO #Per FROM [dbo].[Permissions] a
				LEFT JOIN #PerRole b ON a.[Id] = b.[PermissionId]
				WHERE [Name] LIKE '%.Access%' 

				--CHECK DATA
				IF @@ROWCOUNT = 0
				BEGIN
					DROP TABLE #PerRole
					DROP TABLE #Per
					RETURN NULL
				END
		
				SELECT a.*  INTO #DraftModule FROM [dbo].[Module] a RIGHT JOIN #Per b ON a.[Handler] = b.[Handler] WHERE [Group] = @Group

				SELECT *  FROM [dbo].[Module] WHERE [Id] IN (SELECT [ParentId] FROM #DraftModule) AND [ParentId] = 0
				UNION ALL SELECT * FROM #DraftModule
				
				DROP TABLE #PerRole
				DROP TABLE #Per
				DROP TABLE #DraftModule
			END
		END
		
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Module_Transaction]...';


GO
CREATE PROC [dbo].[usp_Module_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1,
	@Title NVARCHAR(128) = '',
	@Handler NVARCHAR(256) = '',
	@Sort TINYINT = 1,
	@ParentId SMALLINT = 1,
	@Group CHAR(1)  = '1',
	@ClassName VARCHAR(50) = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			IF @Action = 'I' --INSERT
			BEGIN
				SELECT @Id = ISNULL(MAX(Id),0) + 1 FROM dbo.[Module]
				INSERT [dbo].[Module] VALUES(@Id, @Title, @Handler, @Sort, @ParentId, @Group, @ClassName)

				SET @return = 1
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[Module]
				SET [Title] = @Title, [Handler] = @Handler, [Sort] = @Sort, [ParentId] = @ParentId, [Group] = @Group, [ClassName] = @ClassName
				WHERE [Id] = @Id  

				SET @return = 1
			END

			IF @Action = 'D' --DELETE
			BEGIN
				DELETE FROM [dbo].[Module]
				WHERE [Id] = @Id

				SET @return = 1
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_OfferAdvise]...';


GO
CREATE PROCEDURE [dbo].[usp_OfferAdvise]
	@Id TINYINT,
	@PatientId NVARCHAR(128) = '',
	@Status BIT = 0
AS
	IF(@Id > 0)
	BEGIN
		SELECT * FROM [dbo].[OfferAdvise]
		WHERE [Id] = @Id
	END
	ELSE
	BEGIN
		IF (@PatientId <> '')
			SELECT * FROM [dbo].[OfferAdvise] WITH(INDEX(IX_OfferAdvise_PatientId)) WHERE [PatientId] = @PatientId ORDER BY [Id]
		ELSE
			SELECT * FROM [dbo].[OfferAdvise] WHERE [Status] = @Status ORDER BY [Id]
	END
RETURN 0
GO
PRINT N'Creating [dbo].[usp_OfferAdvise_Transaction]...';


GO
CREATE PROC [dbo].[usp_OfferAdvise_Transaction]
(
	@Action CHAR(1) = 'I',
	@Date SMALLDATETIME,
	@Id INT = 1,
	@Detail NVARCHAR(MAX) = '',
	@PatientId NVARCHAR(128),
	@Tag NVARCHAR(150),
	@Status TINYINT = 0,
	@Message NVARCHAR(MAX) = '',
	@IdNotificate NVARCHAR(128)
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			--DECLARE @Date SMALLDATETIME

			IF @Action = 'I' --INSERT
			BEGIN
				SET @Date = GETDATE()

				INSERT [dbo].[OfferAdvise] ([Date], Detail, PatientId, Tag,[Status], [Message])
				VALUES(@Date, @Detail, @PatientId, @Tag, @Status, @Message)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[OfferAdvise]
				SET [Detail] = @Detail, Tag = @Tag,
				[Status] = @Status,
				[Message] = @Message
				WHERE [Id] = @Id  

				SET @return = @Id

				---insert Notification if OfferAdvise is not approved
				IF(@Status = 3)
				BEGIN
					INSERT [dbo].[UserNotification](Id, Detail, [Date],[Time], [UserId], [IsRead])
					VALUES(@IdNotificate, @Message, CONVERT(VARCHAR(10), GETDATE(), 103), convert(VARCHAR(8), GETDATE(), 108), @PatientId, 0)
				END
			END

			IF @Action = 'D' --DELETE
			BEGIN
				BEGIN
					DELETE FROM [dbo].[OfferAdvise]
					WHERE [Id] = @Id

					SET @return = @Id
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_Organization]...';


GO
CREATE PROC [dbo].[usp_Organization]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[Organization]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Organization_Transaction]...';


GO
CREATE PROC [dbo].[usp_Organization_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1,
	@ParentId SMALLINT,
	@Name NVARCHAR(150) = '',
	@Phone VARCHAR(50) = '',
	@Fax VARCHAR(50) = '',
	@Email VARCHAR(256) ='',
	@Address NVARCHAR(150) = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Organization] VALUES(@ParentId, @Name, @Phone, @Fax, @Email, @Address)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[Organization]
				SET [Name] = @Name, [ParentId] = @ParentId, [Phone] = @Phone, [Fax] = @Fax, [Address] = @Address
				WHERE [Id] = @Id  

				SET @return = @Id
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[Users] WHERE [OrganizationId] = @Id)
				BEGIN
					DELETE FROM [dbo].[Organization]
					WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_Permission_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Permission_Transaction]
	@Action CHAR(1) = 'I',
	@RoleId SMALLINT,
	@ModuleId SMALLINT,
	@IsRead BIT,
	@IsWrite BIT,
	@IsCreate BIT,
	@IsModify BIT,
	@IsDestroy BIT,
	@IsPrint BIT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				IF NOT EXISTS (SELECT TOP 1 * FROM [dbo].Permission WHERE RoleId = @RoleId AND ModuleId = @ModuleId)
					INSERT INTO [dbo].Permission
					VALUES(@RoleId, @ModuleId, @IsRead, @IsWrite, @IsCreate, @IsModify, @IsDestroy, @IsPrint)
				ELSE
					SET @return = 0
			IF @Action = 'U'
				IF NOT EXISTS (SELECT TOP 1 * FROM [dbo].Permission WHERE RoleId = @RoleId AND ModuleId = @ModuleId)
					UPDATE [dbo].Permission
					SET IsRead = @IsRead,
					IsWrite = @IsWrite,
					IsCreate = @IsCreate,
					IsModify = @IsModify,
					IsDestroy = @IsDestroy,
					IsPrint = @IsPrint
					WHERE RoleId = @RoleId
					AND ModuleId = @ModuleId
				ELSE
					SET @return = 0
			IF @Action = 'D'
				IF NOT EXISTS (SELECT TOP 1 * FROM [dbo].Permission WHERE RoleId = @RoleId AND ModuleId = @ModuleId)
					DELETE FROM [dbo].Permission
					WHERE RoleId = @RoleId
					AND ModuleId = @ModuleId
				ELSE
					SET @return = 0
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0	
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_QA]...';


GO
CREATE PROC [dbo].[usp_QA]
	@Id INT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[QA]
			WHERE [Id] = @Id
		ELSE
			SELECT * FROM [dbo].[QA]
			ORDER BY [Id]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_QA_Transaction]...';


GO

CREATE PROC [dbo].[usp_QA_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Title NVARCHAR(150) = '',
	@Question NVARCHAR(1000) = '',
	@Name NVARCHAR(32) = '',
	@Email VARCHAR(256),
	@Phone VARCHAR(20),
	@DoctorId NVARCHAR(128) = '',
	@Answer NVARCHAR(MAX) = '',
	@Department NVARCHAR(100) = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			DECLARE @Date SMALLDATETIME

			IF @Action = 'I' --INSERT
			BEGIN
				SET @Date = GETDATE()

				INSERT [dbo].[QA] VALUES(@Date, @Title, @Question, @Name, @Email, @Phone, @DoctorId, @Answer, @Department)

				SET @return = 1
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[QA]
				SET [Title] = @Title, [Question] = @Question, [Name] = @Name, [Email] = @Email, [Phone] = @Phone, [DoctorId] = @DoctorId, [Answer] =  @Answer, [Department] = @Department
				WHERE [Id] = @Id  

				SET @return = 1
			END

			IF @Action = 'D' --DELETE
			BEGIN
				BEGIN
					DELETE FROM [dbo].[QA]
					WHERE [Id] = @Id

					SET @return = 1
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_Role]...';


GO
CREATE PROC [dbo].[usp_Role]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT TOP 1 * FROM [dbo].[Role]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Role_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Role_Transaction]
	@Action CHAR(1) = 'I',
	@Id NVARCHAR(128),
	@Name NVARCHAR(128)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				SET @Id = CAST(NEWID() as NVARCHAR(128));
				IF NOT EXISTS (SELECT TOP 1 * FROM [dbo].[Role] WHERE Name = @Name)
					INSERT INTO [dbo].[Role]
					VALUES(@Id, @Name)
				ELSE
					SET @return = 0
			IF @Action = 'U'
				IF EXISTS (SELECT TOP 1 * FROM [dbo].[Role] WHERE Id = @Id)
					UPDATE [dbo].[Role]
					SET Name = @Name
					WHERE Id = @Id
				ELSE
					SET @return = 0
			IF @Action = 'D'
				IF EXISTS (SELECT TOP 1 * FROM [dbo].[Role] WHERE Id = @Id)
					DELETE FROM [dbo].[Role]
					WHERE Id = @Id
				ELSE
					SET @return = 0
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Schedule]...';


GO
CREATE PROCEDURE [dbo].[usp_Schedule]
	@Id INT = 0,
	@UserId NVARCHAR(128) = '',
	@Start DATETIME,
	@End DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF(@Id > 0)
			SELECT *
			FROM [dbo].Schedule
			WHERE Id = @Id
			AND UserId = @UserId
		ELSE
			SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND DATEDIFF(DAY,@Start , [start])>= 0
			AND DATEDIFF(DAY, [End], @End)>= 0
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Schedule_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Schedule_Transaction]
	@Action CHAR(1) = 'I',
	@Id INT,
	@Title NVARCHAR(50),
	@Priority TINYINT,
	@Detail NVARCHAR(300),
	@IsAlarm BIT,
	@Start DATETIME,
	@End DATETIME,
	@Color VARCHAR(6),
	@IsExamine BIT,
	@UserId NVARCHAR(128) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
			BEGIN
				INSERT INTO [dbo].Schedule
				VALUES(@Title, @Priority, @Detail, @IsAlarm, @Start, @End, @Color, @IsExamine, @UserId)
				SET @return = SCOPE_IDENTITY()
				END
			IF @Action = 'U'
			BEGIN
				UPDATE [dbo].Schedule
				SET Title = @Title,
				[Priority] = @Priority,
				Detail = @Detail,
				IsAlarm = @IsAlarm,
				[Start] = @Start,
				[End] = @End,
				Color = @Color,
				IsExamine = @IsExamine,
				UserId = @UserId
				WHERE Id = @Id

				SET @return = @Id
				END
			IF @Action = 'D'
				BEGIN
					IF EXISTS (SELECT TOP 1 1 FROM [dbo].Schedule WHERE Id = @Id)
						BEGIN
							DELETE FROM [dbo].Schedule
							WHERE Id = @Id

							SET @return = @Id
						END
					ELSE
						SET @return = 0
					END
		COMMIT TRAN
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_ScheduleExamine]...';


GO
CREATE PROCEDURE [dbo].[usp_ScheduleExamine]
	@UserId NVARCHAR(128) = '',
	@Start DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND DATEDIFF(DAY,@Start , [start])>= 0
			AND DATEDIFF(DAY, [start], DATEADD(day,2,getdate()))>= 0
			AND [IsExamine] = 1
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Setting]...';


GO
CREATE PROC [dbo].[usp_Setting]
	@Id TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT TOP 1 * FROM [dbo].[Setting]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Setting_Transaction]...';


GO
CREATE PROC [dbo].[usp_Setting_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Title NVARCHAR(70) = '',
	@Description NVARCHAR(150) = '',
	@Keyword NVARCHAR(150) = '',
	@Membership BIT = 1,
	@DefaultRole NVARCHAR(128) = '',
	@LoginURL VARCHAR(256) = '',
	@LockedIPNoteDefault NVARCHAR(150) = '',
	@IsSaveCanceledAppointment BIT = 1,
	@AppointmentIntervalTime INT = 15,
	@AppointmentStartTime INT = 8,
	@AppointmentEndTime INT = 5
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF EXISTS(SELECT TOP 1 1 FROM [dbo].[Setting])
		BEGIN
			UPDATE 
				[dbo].[Setting]
			SET 
				[Title] = @Title, 
				[Keyword] = @Keyword, 
				[Description] =  @Description, 
				[Membership] = @Membership,
				[DefaultRole] = @DefaultRole,
				[LoginURL] = @LoginURL,
				[LockedIPNoteDefault] = @LockedIPNoteDefault,
				[IsSaveCanceledAppointment] = @IsSaveCanceledAppointment,
				[AppointmentIntervalTime] = @AppointmentIntervalTime,
				[AppointmentStartTime] = @AppointmentStartTime,
				[AppointmentEndTime] = @AppointmentEndTime
			--WHERE [Id] = 1
		END
		ELSE
		BEGIN
			INSERT INTO 
				[dbo].[Setting] 
			VALUES(
				@Title, 
				@Description, 
				@Keyword, 
				@Membership, 
				@DefaultRole, 
				@LoginURL, 
				@LockedIPNoteDefault,
				@IsSaveCanceledAppointment,
				@AppointmentIntervalTime,
				@AppointmentStartTime,
				@AppointmentEndTime)
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_spa_Department]...';


GO
CREATE PROC [dbo].[usp_spa_Department]
	@Id SMALLINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Department]
			WHERE [Id] = @Id
			ORDER BY [Id]
		ELSE
			SELECT * FROM [dbo].[Department] WHERE [IsUsed] = 1
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_DepartmentServices]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_DepartmentServices]
	@Id SMALLINT = 1, @DepartmentId SMALLINT = 1
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[DepartmentServices]
			WHERE [Id] = @Id AND [DepartmentId] = @DepartmentId
			
		ELSE
			SELECT * FROM [dbo].[DepartmentServices] WHERE [DepartmentId] = @DepartmentId ORDER BY [Name]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_QA]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_QA]
	@pageIndex TINYINT = 1, 
	@numberInPage TINYINT = 10, 
	@Search nvarchar(250) = '',
	@totalItem int out
AS BEGIN
	BEGIN TRY
	SET NOCOUNT ON
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED

		BEGIN
				SELECT  *, ROW_NUMBER() OVER (ORDER BY [Date]) AS RowNum INTO #tmpPost FROM (
					
				SELECT 
					q.*,
					u.[Name] AS DoctorName
				FROM 
					[dbo].QA q, 
					[dbo].Users u
				WHERE 
					q.DoctorId = u.Id
					AND ((q.Title like '%' + @Search + '%' OR  @Search is null OR @Search = '')
					OR (q.Question like N'%' + @Search +'%' OR  @Search is null OR @Search = ''))

				) AS tmp
				

				set @totalItem = (SELECT count(*) FROM #tmpPost)
				SELECT  *
				FROM	#tmpPost
				WHERE   RowNum BETWEEN (@PageIndex - 1) * @numberInPage + 1
						AND @PageIndex * @numberInPage ;
			END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_Schedule]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_Schedule]
	@Id INT = 0,
	@UserId NVARCHAR(128) = '',
	@Start DATETIME,
	@End DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF(@Id > 0)
			SELECT *
			FROM [dbo].Schedule
			WHERE Id = @Id
			AND UserId = @UserId
		ELSE
			SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND DATEDIFF(DAY,@Start , [start])>= 0
			AND DATEDIFF(DAY, [End], @End)>= 0
			AND IsExamine = 1
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_ScheduleExamine]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_ScheduleExamine]
	@UserId NVARCHAR(128) = '',
	@Start DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND DATEDIFF(DAY,@Start , [start])>= 0
			AND DATEDIFF(DAY, [start], DATEADD(day,2,getdate()))>= 0
			AND [IsExamine] = 1
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_User]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_User]
	@Id NVARCHAR(128) = '',
	@Type tinyint = 0,
	@pageIndex TINYINT = 1, 
	@numberInPage TINYINT = 10, 
	@Search nvarchar(250) = '',
	@totalItem int out
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
	IF(@Id <> '')
		SELECT * FROM [dbo].[Users]
		WHERE Id = @Id
	ELSE
	BEGIN
		IF(@Type = 1)
			SELECT * FROM [dbo].[Users]
			WHERE IsAdmin = 1 AND (Name like '%' + @Search + '%' OR @Search is null OR @Search = N'''')
		IF(@Type = 2)
			SELECT *, ROW_NUMBER() OVER (ORDER BY UserName) AS RowNum INTO #tmpPost FROM (
				SELECT 
					up.* , u.Name, u.[Image], u.UserName 
				FROM 
					[dbo].[UserProfile] up
					INNER JOIN [dbo].[Users] u ON up.UserId = u.Id 
				WHERE 
					IsDoctor = 1 
					AND (u.Name like '%' + @Search + '%' OR @Search is null OR @Search = N'''')
					AND (u.Tags like '%' + @Search + '%' OR @Search is null OR @Search = N'''')
			) AS tmp

			SET @totalItem = (SELECT count(*) FROM #tmpPost)
				SELECT  *
				FROM	#tmpPost
				WHERE   RowNum BETWEEN (@PageIndex - 1) * @numberInPage + 1
						AND @PageIndex * @numberInPage ;
	END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_User_HasScheduleExamine]...';


GO
CREATE PROCEDURE [dbo].usp_spa_User_HasScheduleExamine
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		
		DECLARE @bod DATETIME2
		SET @bod = cast (GETDATE() AS DATE) 
		SELECT DISTINCT 
				dbo.Users.*
		FROM    dbo.Schedule INNER JOIN
				dbo.Users ON dbo.Schedule.UserId = dbo.Users.Id
		WHERE   (dbo.Users.IsDoctor = 1)
				AND (Name like '%' + @Search + '%' OR @Search is null)
				AND (Tags like '%' + @Search + '%' OR @Search is null)
				AND IsExamine = 1
				AND DATEDIFF(DAY, GETDATE(), [start])>= 0
				AND DATEDIFF(DAY, [start], DATEADD(day,2,getdate()))>= 0

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Survey]...';


GO
CREATE PROCEDURE [dbo].[usp_Survey]
	@Id VARCHAR(128)
AS
	IF(@Id <> '')
	BEGIN
		SELECT * FROM [dbo].[Survey]
		WHERE [Id] = @Id
	END
	ELSE
	BEGIN
		SELECT * FROM [dbo].[Survey]
	END
RETURN 0
GO
PRINT N'Creating [dbo].[usp_Survey_Transaction]...';


GO
CREATE PROC [dbo].[usp_Survey_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id VARCHAR(128) = '',
	@Title NVARCHAR(150) = '',
	@Description NVARCHAR(MAX) = '',
	@Message NVARCHAR(300) = '',
	@IsBranding BIT = 1,
	@Logo VARCHAR(256) = '',
	@Url VARCHAR(256) = '',
	@IsSurveyInvite BIT = 0,
	@IsPublic BIT = 0,
	@IsActive BIT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Survey] VALUES(@Id, @Title, @Description, @Message, @IsBranding, @Logo, @Url, @IsSurveyInvite, @IsPublic, @IsActive)

				SET @return = 1
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[Survey]
				SET [Title] = @Title, [Description] = @Description, [Message] = @Message, [IsBranding] = @IsBranding, [Logo] = @Logo, [Url] = @Url, [IsSurveyInvite] = @IsSurveyInvite, [IsPublic] = @IsPublic, [IsActive] = @IsActive
				WHERE [Id] = @Id  

				SET @return = 1
			END

			IF @Action = 'D' --DELETE
			BEGIN
				BEGIN
					--Xóa câu trả lời của từng câu hỏi.
					DELETE FROM [dbo].[SurveyAnswers] WHERE [QuestionId] IN (SELECT q.[Id] FROM [dbo].[SurveyQuestions] q WHERE q.[SurveyId] = @Id)

					--Xóa từng câu hỏi của khảo sát.
					DELETE FROM [dbo].[SurveyQuestions] WHERE [SurveyId] = @Id
					
					--Xóa khảo sát
					DELETE FROM [dbo].[Survey] WHERE [Id] = @Id

					SET @return = 1
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_SurveyAnswers]...';


GO
CREATE PROCEDURE [dbo].[usp_SurveyAnswers]
	@QuestionId VARCHAR(128)
AS
	IF(@QuestionId <> '')
	BEGIN
		SELECT * FROM [dbo].[SurveyAnswers]
		WHERE [QuestionId] = @QuestionId
	END
RETURN 0
GO
PRINT N'Creating [dbo].[usp_SurveyAnswers_Transaction]...';


GO
CREATE PROC [dbo].[usp_SurveyAnswers_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id TINYINT = 0,
	@QuestionId VARCHAR(128) = '',
	@Answer NVARCHAR(150) = '',
	@LowScore NVARCHAR(128) = '',
	@HightScore NVARCHAR(128) = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[SurveyAnswers] VALUES(@QuestionId, @Answer, @LowScore, @HightScore)

				SET @return = 1
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[SurveyAnswers]
				SET [QuestionId] = @QuestionId, [Answer] = @Answer, [LowScore] = @LowScore, [HightScore] = @HightScore
				WHERE [Id] = @Id  

				SET @return = 1
			END

			IF @Action = 'D' --DELETE
			BEGIN
				BEGIN
					DELETE FROM [dbo].[SurveyAnswers]
					WHERE [Id] = @Id

					SET @return = 1
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_SurveyQuestions]...';


GO
CREATE PROCEDURE [dbo].[usp_SurveyQuestions]
	@SurveyId VARCHAR(128)
AS
	IF(@SurveyId <> '')
	BEGIN
		SELECT * FROM [dbo].[SurveyQuestions]
		WHERE [SurveyId] = @SurveyId
	END
RETURN 0
GO
PRINT N'Creating [dbo].[usp_SurveyQuestions_Transaction]...';


GO
CREATE PROC [dbo].[usp_SurveyQuestions_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id VARCHAR(128) = '',
	@SurveyId VARCHAR(128) = '',
	@Question NVARCHAR(300) = '',
	@Type TINYINT,
	@IsRequireds BIT = 0,
	@IsRandomize BIT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[SurveyQuestions] VALUES(@Id, @SurveyId, @Question, @Type, @IsRequireds, @IsRandomize)

				SET @return = 1
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[SurveyQuestions]
				SET [SurveyId] = @SurveyId, [Question] = @Question, [Type] = @Type, [IsRequireds] = @IsRequireds, [IsRandomize] = @IsRandomize
				WHERE [Id] = @Id  

				SET @return = 1
			END

			IF @Action = 'D' --DELETE
			BEGIN
				BEGIN
					DELETE FROM [dbo].[SurveyQuestions]
					WHERE [Id] = @Id

					SET @return = 1
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_SystemNotification]...';


GO
CREATE PROCEDURE [dbo].[usp_SystemNotification]
	@Id INT = 0,
	@UserId NVARCHAR(128) = '',
	@SendFrom NVARCHAR(128) = '',
	@NumTop TINYINT = 0,
	@PageIndex TINYINT = 1, 
	@NumberInPage TINYINT = 10,
	@TotalItem int out
AS
BEGIN
	IF(@Id <> 0)
	BEGIN
		SELECT sysNot.Id, sysNot.Detail, sysNot.[Date], sysNot.[Time], sysNot.SendFrom, sysNot.Link, sysNotUser.IsRead 
		FROM	[dbo].[SystemNotification] sysNot, [SystemNotificationUsers] sysNotUser
		WHERE	sysNot.Id = @Id
	END
	ELSE
	BEGIN
		IF(@NumTop <> 0)--SELECT TOP
		BEGIN
			SELECT TOP (@NumTop) 
					sysNot.Id, sysNot.Detail, sysNot.[Date], sysNot.[Time], sysNot.SendFrom, sysNot.Link, sysNotUser.IsRead
			FROM	[dbo].[SystemNotification] sysNot, [SystemNotificationUsers] sysNotUser
			WHERE	sysNot.Id = sysNotUser.Id 
					AND (sysNotUser.UserId = @UserId OR @UserId = '')
					AND (sysNot.SendFrom = @SendFrom OR @SendFrom = ''  OR @SendFrom = null)
			ORDER BY [Date]
		END
		ELSE
		BEGIN--PAGING
			SELECT  *, ROW_NUMBER() OVER (ORDER BY [Date]) AS RowNum INTO #tmpNotify FROM (
				SELECT  sysNot.Id, sysNot.Detail, sysNot.[Date], sysNot.[Time], sysNot.SendFrom, sysNot.Link, sysNotUser.IsRead
				FROM	[dbo].[SystemNotification] sysNot, [SystemNotificationUsers] sysNotUser
				WHERE	sysNot.Id = sysNotUser.Id 
						AND (sysNotUser.UserId = @UserId OR @UserId = '')
						AND (sysNot.SendFrom = @SendFrom OR @SendFrom = '' OR @SendFrom = null)
			)AS #tmp

			set @totalItem = (SELECT COUNT(Id) FROM #tmpNotify)
			SELECT  *
			FROM	#tmpNotify
			WHERE   RowNum BETWEEN (@PageIndex - 1) * @NumberInPage + 1
					AND @PageIndex * @NumberInPage ;
		END
	END
END
GO
PRINT N'Creating [dbo].[usp_SystemNotification_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_SystemNotification_Transaction]
	@Action CHAR(1) = 'I',
	@Id INT,
	@Detail NVARCHAR(300) = '',
	@Date VARCHAR(10),
	@Time VARCHAR(8),
	@SendFrom NVARCHAR(128),
	@Link NVARCHAR(256) = ''
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @result INT = 0
	SET @Date = [dbo].[ufnGetDate]()
	SET @Time = CONVERT(VARCHAR(8),GETDATE(),108)
	DECLARE @currentUserId NVARCHAR(128)
	BEGIN TRY
		BEGIN TRAN;
			IF(@Action = 'I')
				BEGIN
					INSERT INTO [dbo].[SystemNotification](Detail, [Date], [Time], [SendFrom], [Link]) 
					VALUES(@Detail, @Date, @Time, @SendFrom, @Link)

					SET @currentUserId = SCOPE_IDENTITY()

					INSERT INTO [dbo].SystemNotificationUsers
					SELECT @currentUserId, [Id], 0
					FROM [dbo].Users
					WHERE [Id] <> @SendFrom
					AND [PatientId] IS NULL

					SET @result = 1
				END
			ELSE
				BEGIN
					UPDATE [dbo].[SystemNotification]
					SET		Detail = @Detail, [Date] = @Date,
					[Time] = @Time, [SendFrom] = @SendFrom, [Link] = @Link
					WHERE Id = @Id
					SET @result = 1
				END
		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
		BEGIN
			ROLLBACK TRAN;
			SELECT
			error_message() as errormessage,
			error_number() as erronumber,
			error_state() as errorstate,
			error_procedure() as errorprocedure,
			error_line() as errorline;
			SET @result = 0
		END
	END CATCH
	SELECT @result;
END
GO
PRINT N'Creating [dbo].[usp_SystemNotificationUsers_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_SystemNotificationUsers_Transaction]
	@Action CHAR(1) = 'I',
	@Id INT,
	@UserId NVARCHAR(128),
	@IsRead BIT = 0
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			INSERT [dbo].[SystemNotificationUsers](Id, UserId, IsRead)
			VALUES(@Id, @UserId, @IsRead)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[SystemNotificationUsers]
			SET IsRead = @IsRead
			WHERE [Id] = @Id  AND [UserId] = @UserId
		END

		IF @Action = 'D' --DELETE
		BEGIN
			DELETE FROM [dbo].[SystemNotificationUsers] WHERE [Id] = @Id  AND [UserId] = @UserId
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Creating [dbo].[usp_User]...';


GO
CREATE PROC [dbo].[usp_User]
	@Id NVARCHAR(128) = '',
	@Type tinyint = 0,
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
	IF(@Id <> '')
		SELECT * FROM [dbo].[Users]
		WHERE Id = @Id
	ELSE
	BEGIN
		IF(@Type = 1)
			SELECT * FROM [dbo].[Users]
			WHERE IsAdmin = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
		IF(@Type = 2)
			SELECT * FROM [dbo].[Users]
			WHERE IsDoctor = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
							   AND (Tags like '%' + @Search + '%' OR @Search is null)
	END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_User_ByGroupType]...';


GO
CREATE PROCEDURE [dbo].[usp_User_ByGroupType]
	@GroupType NVARCHAR(128)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		-- là Bệnh nhân
		IF @GroupType = N'BenhNhan'
		BEGIN
			SELECT DISTINCT *
			FROM   [dbo].Users u
			WHERE  u.PatientId IS NOT NULL
		END

		-- là Bác sĩ
		IF @GroupType = N'BacSi'
		BEGIN
			SELECT DISTINCT *
			FROM   [dbo].Users u
			WHERE  u.IsDoctor = 1
		END

		-- là Nội bộ
		IF @GroupType = N'NoiBo'
		BEGIN
			SELECT DISTINCT *
			FROM   [dbo].Users u
			WHERE  u.PatientId = NULL
		END

		-- Tất cả
		IF @GroupType = N'TatCa'
		BEGIN
			SELECT DISTINCT *
			FROM   [dbo].Users u
		END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_User_ChangePassword]...';


GO
CREATE PROCEDURE [dbo].[usp_User_ChangePassword]
	@Id INT,
	@Email NVARCHAR(256),
	@NewPassword VARCHAR(60)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN
			IF EXISTS (SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Email] = @Email)
				BEGIN
					UPDATE [dbo].[Users]
					SET [PasswordHash] = @NewPassword
					WHERE [Email] = @Email
				END
			ELSE
				SET @return = 0
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_User_FindByEmail]...';


GO
CREATE PROCEDURE [dbo].[usp_User_FindByEmail]
	@email NVARCHAR(256) = ''
AS 
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	BEGIN TRY
		SELECT Id FROM [dbo].[Users]
		WHERE Email = @email
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_User_HasScheduleExamine]...';


GO
CREATE PROCEDURE [dbo].[usp_User_HasScheduleExamine]
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT DISTINCT 
				dbo.Users.*
		FROM    dbo.Schedule INNER JOIN
				dbo.Users ON dbo.Schedule.UserId = dbo.Users.Id
		WHERE   (dbo.Users.IsDoctor = 1)
				AND (Name like '%' + @Search + '%' OR @Search is null)
				OR (Tags like '%' + @Search + '%' OR @Search is null)
				AND IsExamine = 1
				AND DATEDIFF(DAY, GETDATE(), [start])>= 0
				AND DATEDIFF(DAY, [start], DATEADD(day,2,getdate()))>= 0

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_User_Query]...';


GO
CREATE PROC [dbo].[usp_User_Query]
	@Id NVARCHAR(128) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
	IF(@Id <> '')
		SELECT * FROM [dbo].[Users]
		WHERE Id = @Id
	ELSE
	BEGIN
		SELECT * FROM [dbo].[Users]
	END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_UserGroup_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_UserGroup_Transaction]
	@Action CHAR(1) = 'I',
	@UserId NVARCHAR(128) = '',
	@GroupId TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN

			IF @Action = 'I' -- INSERT
				IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[UserGroup] WHERE [UserId] = @UserId AND [GroupId] = @GroupId)
					INSERT INTO [dbo].[UserGroup] VALUES(@UserId, @GroupId)
				ELSE
					SET @return = 0

			IF @Action = 'U' -- UPDATE
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].[UserGroup] WHERE [UserId] = @UserId AND [GroupId] = @GroupId)
					UPDATE [dbo].[UserGroup]
					SET [UserId] = @UserId, [GroupId] = @GroupId
					WHERE [UserId] = @UserId
					AND [GroupId] = @GroupId
			ELSE
				SET @return = 0

			IF @Action = 'D' -- DELETE
				IF EXISTS(SELECT TOP 1 1 FROM [dbo].[UserGroup] WHERE [UserId] = @UserId AND [GroupId] = @GroupId)
				BEGIN
					IF @UserId <> 0 AND @GroupId <> 0
						DELETE [dbo].[UserGroup]
						WHERE [UserId] = @UserId
						AND [GroupId] = @GroupId
					ELSE
						SET @return = 0;
				END
				ELSE
					SET @return = 0;
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_UserNotification]...';


GO
CREATE PROCEDURE [dbo].[usp_UserNotification]
	@Id VARCHAR(128) = '',
	@UserId NVARCHAR(128) = '',
	@NumTop TINYINT = 0,
	@PageIndex TINYINT = 1, 
	@NumberInPage TINYINT = 10,
	@TotalItem int out
AS
BEGIN
	IF(@Id <> '')
	BEGIN
		SELECT * FROM [dbo].[UserNotification] WHERE Id = @Id
	END
	ELSE
	BEGIN
		IF(@NumTop <> 0)--SELECT TOP
		BEGIN
			SELECT TOP (@NumTop) *
			FROM [dbo].[UserNotification] WHERE [UserId] = @UserId
			ORDER BY [Date]
		END
		ELSE
		BEGIN--PAGING
			SELECT  *, ROW_NUMBER() OVER (ORDER BY [Date]) AS RowNum INTO #tmpNotify FROM (
				SELECT * FROM [dbo].[UserNotification] 
				WHERE [UserId] = @UserId
			)AS #tmp

			set @totalItem = (SELECT COUNT(Id) FROM #tmpNotify)
			SELECT  *
			FROM	#tmpNotify
			WHERE   RowNum BETWEEN (@PageIndex - 1) * @NumberInPage + 1
					AND @PageIndex * @NumberInPage ;
		END
	END
END
GO
PRINT N'Creating [dbo].[usp_UserNotification_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_UserNotification_Transaction]
	@Action CHAR(1) = 'I',
	@Id varchar(128),
	@Detail nvarchar(300),
	@Date varchar(10),
	@Time varchar(8),
	@UserId nvarchar(128),
	@IsRead bit
AS
BEGIN
DECLARE @return bit = 0
BEGIN TRY
	BEGIN TRAN;
	IF(@Action = 'I')
	BEGIN
		INSERT INTO [dbo].[UserNotification](Id, Detail, [Date],[Time], [UserId], [IsRead]) 
		VALUES(@Id, @Detail, @Date, @Time, @UserId, @IsRead)
		SET @return = 1
	END
	ELSE
	BEGIN
		UPDATE [dbo].[UserNotification]
		SET		Detail = @Detail, [Date] = @Date, [Time] = @Time, [UserId] = @UserId, [IsRead] = @IsRead
		WHERE Id = @Id
		SET @return = 1
	END
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_UserNotification_UpdateStatus]...';


GO
CREATE PROCEDURE [dbo].[usp_UserNotification_UpdateStatus]
	@Action CHAR(1) = 'U',
	@Id varchar(128),
	@Detail nvarchar(300),
	@Date varchar(10),
	@Time varchar(8),
	@UserId nvarchar(128),
	@IsRead bit
AS
BEGIN
DECLARE @return bit = 0
BEGIN TRY
		UPDATE [dbo].[UserNotification]
		SET		[IsRead] = @IsRead
		WHERE Id = @Id
		SET @return = 1
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_UserRole_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_UserRole_Transaction]
	@Action CHAR(1) = 'I',
	@UserId NVARCHAR(128) = '',
	@RoleId int
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return bit = 1

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[UserRole] WHERE [UserId] = @UserId AND [RoleId] = @RoleId)
					BEGIN
						INSERT INTO [dbo].[UserRole]
						VALUES(@UserId, @RoleId)
					END
				ELSE
					SET @return = 0;
			IF @Action = 'U'
				IF EXISTS(SELECT TOP 1 1 FROM [dbo].UserRole WHERE [UserId] = @UserId AND [RoleId] = @RoleId)
				BEGIN
					IF @UserId <> 0 AND @RoleId <> 0
						UPDATE [dbo].[UserRole]
						SET [UserId] = @UserId,
						[RoleId] = @RoleId
						WHERE [UserId] = @UserId
						AND [RoleId] = @RoleId
					ELSE
						SET @return = 0;
				END
				ELSE
					SET @return = 0;
				
			IF @Action = 'D'
				
				IF EXISTS(SELECT TOP 1 1 FROM [dbo].[UserRole] WHERE [UserId] = @UserId AND [RoleId] = @RoleId)
				BEGIN
					IF @UserId <> 0 AND @RoleId <> 0
						DELETE [dbo].[UserRole]
						WHERE [UserId] = @UserId
						AND [RoleId] = @RoleId
					ELSE
						SET @return = 0;
				END
				ELSE
					SET @return = 0;
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN	
				ROLLBACK TRAN
				SET @return = 0;
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Users_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Users_Transaction]
	@Action CHAR(1) = 'I',
	@Id NVARCHAR(128) = '',
	@Name NVARCHAR(32),
	@Code CHAR(20),
	@Email NVARCHAR(256),
	@PasswordHash VARCHAR(60),
	@PhoneNumber VARCHAR(20),
	@HomePhone VARCHAR(20),
	@DoB DATE,
	@Gender TINYINT,
	@Image varbinary(max),
	@OrganizationId SMALLINT,
	@Status BIT,
	@PatientId NVARCHAR(128) = '',
	@IsAdmin BIT,
	@IsDoctor BIT,
	@Tag NVARCHAR(150) = ''
AS BEGIN
	SET NOCOUNT ON
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Users WHERE [Email] = @Email)
					INSERT INTO [dbo].[Users](Id, Name, Email, PasswordHash, PhoneNumber, DoB, Gender, [Image], OrganizationId, PatientId, IsAdmin, IsDoctor, Tags)
					VALUES(@Id, @Name, @Email, @PasswordHash, @PhoneNumber, 
					@DoB, @Gender, @Image, @OrganizationId, @PatientId,
					@IsAdmin, @IsDoctor, @Tag)
				ELSE
					SET @return = 0
			IF @Action = 'U'
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Id] = @Id)
					UPDATE [dbo].[Users]
					SET [Name] = @Name,
					[PhoneNumber] = @PhoneNumber,
					[DoB] = @DoB,
					[Gender] = @Gender,
					[Image] = @Image,
					[OrganizationId] = @OrganizationId,
					[PatientId] = @PatientId,
					[IsAdmin] = @IsAdmin,
					[IsDoctor] = @IsDoctor,
					[Tags] = @Tag
					WHERE [Id] = @Id
				ELSE
					SET @return = 0
			IF @Action = 'D'
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Id] = @Id)
					DELETE FROM [dbo].[Users]
					WHERE [Id] = @Id
				ELSE
					SET @return = 0
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO
-- DELETE MODULE
GO
DELETE FROM [dbo].[Module]
GO
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (1, N'Main', N'', 1, 0, N'3', NULL)
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (2, N'Dashboard', N'Home', 1, 1, N'3', N'overview')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (3, N'Lịch làm việc', N'Schedule', 1, 1, N'3', N'schedule')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (4, N'Chuyên khoa', N'Department', 1, 1, N'3', N'department')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (5, N'Chức năng', N'Module', 1, 1, N'3', N'category')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (6, N'Communication', N'', 1, 0, N'3', NULL)
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (7, N'Hộp thư', N'', 1, 6, N'3', N'message-box')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (8, N'System', N'', 1, 0, N'3', NULL)
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (9, N'Tài khoản', N'Account', 1, 8, N'3', N'users')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (10, N'Cài đặt', N'Setting', 1, 8, N'3', N'configuration')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (11, N'Email Marketing', N'EmailMarketing', 1, 6, N'3', N'email-marketing')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (12, N'Quản lý đặt kịch hẹn', N'Appointment', 1, 1, N'3', N'prescription')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (13, N'Hỏi đáp y tế', N'Article', 1, 6, N'3', N'question')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (14, N'Góp ý xây dựng', N'OfferAdvise', 0, 6, N'3', N'offder-advise')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (15, N'Khảo sát', N'Survey', 1, 6, N'3', N'survey')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (16, N'Hỏi đáp y tế cộng đồng', N'QA', 1, 6, N'3', N'question')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (17, N'Chi tiết quyền', N'Permission', 1, 8, N'3', N'permission')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (18, N'Nhóm tài khoản', N'Role', 1, 8, N'3', N'role')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (19, N'Main', N'#', 1, 0, N'1', N'')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (20, N'Dashboard', N'Home', 1, 19, N'1', N'dashboard')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (21, N'Post Management', N'#', 1, 0, N'1', N'')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (22, N'Ngôn ngữ', N'Language', 1, 21, N'1', N'language')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (23, N'Chuyên mục', N'Category', 1, 21, N'1', N'category')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (24, N'Bản tin', N'Post', 1, 21, N'1', N'posts')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (25, N'Duyệt tin', N'ApprovePost', 1, 21, N'1', N'approved-posts')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (26, N'Xuất bản', N'PublishPost', 1, 21, N'1', N'publish-post')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (27, N'Services', N'#', 1, 0, N'1', N'')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (28, N'Liên kết Website', N'LinkBuilding', 1, 27, N'1', N'link-building')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (29, N'Dịch vụ nổi bật', N'Feature', 1, 27, N'1', N'feature')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (30, N'Trình chiếu', N'Slider', 1, 27, N'1', N'slider')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (31, N'Quảng cáo', N'Advertise', 1, 27, N'1', N'advertise')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (32, N'Library', N'#', 1, 0, N'1', N'')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (33, N'Thư viện', N'Gallery', 1, 32, N'1', N'gallery')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (34, N'Resources', N'#', 1, 0, N'1', N'')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (35, N'Hình ảnh', N'ImageLibrary', 1, 34, N'1', N'image-lib')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (36, N'Video', N'VideoLibrary', 0, 34, N'1', N'video-lib')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (37, N'Workflow', N'#', 1, 0, N'1', N'')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (38, N'Quy trình', N'Workflow', 1, 37, N'1', N'workflow')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (39, N'Bước xử lý quy trình', N'WorkflowState', 1, 37, N'1', N'workflow')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (40, N'System', N'#', 1, 0, N'1', N'')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (41, N'Cài đặt', N'Configuration', 1, 40, N'1', N'configuration')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (42, N'Main', N'#', 1, 0, N'2', N'')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (43, N'Dashboard', N'Home', 1, 42, N'2', N'overview')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (44, N'Bảo hiểm', N'#', 1, 42, N'2', N'insurance')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (45, N'Hồ sơ y tế', N'PHR', 1, 42, N'2', N'health-result')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (46, N'Thanh toán', N'#', 1, 42, N'2', N'payment')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (47, N'Communication', N'#', 1, 0, N'2', N'')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (48, N'Hỏi đáp y tế', N'Article', 1, 47, N'2', N'question')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (49, N'Góp ý xây dựng', N'OfferAdvise', 1, 47, N'2', N'offder-advise')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (50, N'Hộp thư', N'#', 1, 47, N'2', N'message-box')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (51, N'Truy cập bản tin', N'AccessPost', 1, 21, N'1', N'posts')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (52, N'Redis Manager', N'Redis', 1, 19, N'1', N'databases')
INSERT [dbo].[Module] ([Id], [Title], [Handler], [Sort], [ParentId], [Group], [ClassName]) VALUES (53, N'Thông báo nội bộ', N'Notification', 1, 6, N'3', N'notification')
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[ArticleComment] WITH CHECK CHECK CONSTRAINT [FK_ArticleComment_Article];

ALTER TABLE [dbo].[Message] WITH CHECK CHECK CONSTRAINT [FK_Message_MessageFolder];

ALTER TABLE [dbo].[MessageContent] WITH CHECK CHECK CONSTRAINT [FK_MessageContent_Message];

ALTER TABLE [dbo].[MessageRecipient] WITH CHECK CHECK CONSTRAINT [FK_MessageRecipient_Message];

ALTER TABLE [dbo].[Organization] WITH CHECK CHECK CONSTRAINT [FK_Organization_Organization];

ALTER TABLE [dbo].[SurveyAnswers] WITH CHECK CHECK CONSTRAINT [FK_SurveyAnswers_SurveyQuestions];

ALTER TABLE [dbo].[SurveyQuestions] WITH CHECK CHECK CONSTRAINT [FK_SurveyQuestions_Survey];


GO
PRINT N'Update complete.';


GO
