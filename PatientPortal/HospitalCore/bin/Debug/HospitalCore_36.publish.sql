/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The column [dbo].[Article].[IsClosed] on table [dbo].[Article] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Article])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Schedule].[DateFrom] is being dropped, data loss could occur.

The column [dbo].[Schedule].[DateTo] is being dropped, data loss could occur.

The column [dbo].[Schedule].[TimeFrom] is being dropped, data loss could occur.

The column [dbo].[Schedule].[TimeTo] is being dropped, data loss could occur.

The column [dbo].[Schedule].[End] on table [dbo].[Schedule] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Schedule].[Start] on table [dbo].[Schedule] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Schedule])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping [dbo].[FK_Schedule_User]...';


GO
ALTER TABLE [dbo].[Schedule] DROP CONSTRAINT [FK_Schedule_User];


GO
PRINT N'Altering [dbo].[Article]...';


GO
ALTER TABLE [dbo].[Article]
    ADD [IsClosed] BIT NOT NULL;


GO
PRINT N'Starting rebuilding table [dbo].[Schedule]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Schedule] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Title]     NVARCHAR (50)  NOT NULL,
    [Priority]  TINYINT        NOT NULL,
    [Detail]    NVARCHAR (300) NOT NULL,
    [IsAlarm]   BIT            NOT NULL,
    [Start]     DATETIME       NOT NULL,
    [End]       DATETIME       NOT NULL,
    [Color]     VARCHAR (6)    NOT NULL,
    [IsExamine] BIT            NOT NULL,
    [UserId]    INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Schedule])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Schedule] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Schedule] ([Id], [Title], [Priority], [Detail], [IsAlarm], [Color], [IsExamine], [UserId])
        SELECT   [Id],
                 [Title],
                 [Priority],
                 [Detail],
                 [IsAlarm],
                 [Color],
                 [IsExamine],
                 [UserId]
        FROM     [dbo].[Schedule]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Schedule] OFF;
    END

DROP TABLE [dbo].[Schedule];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Schedule]', N'Schedule';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[FK_Schedule_User]...';


GO
ALTER TABLE [dbo].[Schedule] WITH NOCHECK
    ADD CONSTRAINT [FK_Schedule_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Altering [dbo].[usp_Schedule_Transaction]...';


GO
ALTER PROCEDURE [dbo].[usp_Schedule_Transaction]
	@Action CHAR(1) = 'I',
	@Id INT,
	@Title NVARCHAR(50),
	@Priority TINYINT,
	@Detail NVARCHAR(300),
	@IsAlarm BIT,
	@Start DATETIME,
	@End DATETIME,
	@Color VARCHAR(6),
	@IsExamine BIT,
	@UserId INT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return INT = 0;

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				INSERT INTO [dbo].Schedule
				VALUES(@Title, @Priority, @Detail, @IsAlarm, @Start, @End, @Color, @IsExamine, @UserId)
				SET @return = SCOPE_IDENTITY()
			IF @Action = 'U'
				UPDATE [dbo].Schedule
				SET Title = @Title,
				[Priority] = @Priority,
				Detail = @Detail,
				IsAlarm = @IsAlarm,
				[Start] = @Start,
				[End] = @End,
				Color = @Color,
				IsExamine = @IsExamine,
				UserId = @UserId
				WHERE Id = @Id

				SET @return = @Id
			IF @Action = 'D'
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].Schedule WHERE Id = @Id)
					BEGIN
						DELETE FROM [dbo].Schedule
						WHERE Id = @Id

						SET @return = @Id
					END
				ELSE
					SET @return = 0
		COMMIT TRAN
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_User]...';


GO
ALTER PROC [dbo].[usp_User]
	@Id int = 0,
	@Type tinyint = 0,
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
	IF(@Id > 0)
		SELECT * FROM [dbo].[Users]
		WHERE Id = @Id
	ELSE
	BEGIN
		IF(@Type = 1)
			SELECT * FROM [dbo].[Users]
			WHERE IsAdmin = 1 AND (Name = @Search OR @Search is null)
		IF(@Type = 2)
			SELECT * FROM [dbo].[Users]
			WHERE IsDoctor = 1 AND (Name = @Search OR @Search is null)
	END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Refreshing [dbo].[usp_Article]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Article]';


GO
PRINT N'Refreshing [dbo].[usp_Article_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Article_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_Schedule]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Schedule]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Schedule] WITH CHECK CHECK CONSTRAINT [FK_Schedule_User];


GO
PRINT N'Update complete.';


GO
