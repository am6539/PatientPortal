/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The column [dbo].[Module].[GroupId] on table [dbo].[Module] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Module])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[OfferAdvise].[IsRead] on table [dbo].[OfferAdvise] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[OfferAdvise].[IsSent] on table [dbo].[OfferAdvise] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[OfferAdvise])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Creating [dbo].[IntList]...';


GO
CREATE TYPE [dbo].[IntList] AS TABLE (
    [Item] INT NOT NULL PRIMARY KEY CLUSTERED ([Item] ASC));


GO
PRINT N'Altering [dbo].[Group]...';


GO
ALTER TABLE [dbo].[Group]
    ADD [IsReadOnly] BIT DEFAULT 0 NOT NULL;


GO
PRINT N'Altering [dbo].[Module]...';


GO
ALTER TABLE [dbo].[Module]
    ADD [GroupId] TINYINT NOT NULL;


GO
PRINT N'Creating [dbo].[Module].[idxModuleGroup]...';


GO
CREATE NONCLUSTERED INDEX [idxModuleGroup]
    ON [dbo].[Module]([GroupId] ASC);


GO
PRINT N'Altering [dbo].[OfferAdvise]...';


GO
ALTER TABLE [dbo].[OfferAdvise]
    ADD [IsRead] BIT NOT NULL,
        [IsSent] BIT NOT NULL;


GO
PRINT N'Altering [dbo].[Organization]...';


GO
ALTER TABLE [dbo].[Organization] ALTER COLUMN [Address] NVARCHAR (150) NULL;


GO
PRINT N'Creating [dbo].[FK_Module_Module]...';


GO
ALTER TABLE [dbo].[Module] WITH NOCHECK
    ADD CONSTRAINT [FK_Module_Module] FOREIGN KEY ([ParentId]) REFERENCES [dbo].[Module] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Organization_Organization]...';


GO
ALTER TABLE [dbo].[Organization] WITH NOCHECK
    ADD CONSTRAINT [FK_Organization_Organization] FOREIGN KEY ([ParentId]) REFERENCES [dbo].[Organization] ([Id]);


GO
PRINT N'Creating [dbo].[ufnGetDate]...';


GO
CREATE FUNCTION [dbo].[ufnGetDate]()
RETURNS VARCHAR(20)
AS
BEGIN
	RETURN CONVERT(VARCHAR, GETDATE(), 103)
END
GO
PRINT N'Altering [dbo].[usp_Group_Transaction]...';


GO
ALTER PROC [dbo].[usp_Group_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Name NVARCHAR(150) = '',
	@IsReadOnly BIT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Group] VALUES(@Name, @IsReadOnly)
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[Group]
				SET [Name] = @Name, [IsReadOnly] = @IsReadOnly
				WHERE [Id] = @Id  
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[UserGroup] WHERE [GroupId] = @Id)
				BEGIN
					DELETE FROM [dbo].[Group]
					WHERE [Id] = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	RETURN @return;
END
GO
PRINT N'Altering [dbo].[usp_Appointment_Transaction]...';


GO
ALTER PROC [dbo].[usp_Appointment_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Date SMALLDATETIME,
	@Time CHAR(5),
	@Medicine NVARCHAR(50) = '',
	@PhysicianId INT = 0,
	@PatientId INT = 0,
	@Symptom NVARCHAR(300) = '',
	@CreatedDate VARCHAR(20) = '',
	@ModifiedDate NVARCHAR(20) = '',
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return bit = 1

	BEGIN TRY
		BEGIN TRAN;

			SET @ModifiedDate = [dbo].[ufnGetDate]()

			IF @Action = 'I' --INSERT
			BEGIN
				SET @Date = GETDATE()
				SET @CreatedDate = @ModifiedDate

				INSERT [dbo].[Appointment]
				VALUES(@Date, @Time, @Medicine, @PhysicianId, @PatientId, @Symptom, @CreatedDate, @ModifiedDate, @Status)
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				--STATUS: 0 - Just Created/Pending, 1 - Approved, 2 - Canceled
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[Appointment] WHERE [Id] = @Id AND [Status] = @Status)
				BEGIN
					UPDATE [dbo].[Appointment]
					SET [Date] = @Date, [Time] = @Time, [PhysicianId] = @PhysicianId, [PatientId] = @PatientId, [Symptom] = @Symptom, [ModifiedDate] = @ModifiedDate, [Status] = @Status, Medicine = @Medicine
					WHERE [Id] = @Id  
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[Appointment] WHERE [Id] = @Id AND [Status] = @Status)
				BEGIN
					DELETE FROM [dbo].[Appointment]
					WHERE [Id] = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	RETURN @return;
END
GO
PRINT N'Altering [dbo].[usp_Article_Transaction]...';


GO
ALTER PROC [dbo].[usp_Article_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Date SMALLDATETIME,
	@Title NVARCHAR(150) = '',
	@Detail NVARCHAR(1000) = '',
	@PatientId INT = 0,
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN;

			IF @Action = 'I' --INSERT
			BEGIN
				SET @Date = GETDATE()

				INSERT [dbo].[Article]
				VALUES(@Date, @Title, @Detail, @PatientId, @Status)
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN
					UPDATE [dbo].[Article]
					SET [Date] = @Date, [Title] = @Title, [Detail] = @Detail, [Status] = @Status
					WHERE [Id] = @Id  
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN	
					-- Article Comment Table
					DELETE FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id

					-- Article Table
					DELETE FROM [dbo].[Article] WHERE [Id] = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	RETURN @return;
END
GO
PRINT N'Altering [dbo].[usp_ArticleComment_Transaction]...';


GO
ALTER PROC [dbo].[usp_ArticleComment_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@ArticleId SMALLINT = 1,
	@Date SMALLDATETIME,
	@Detail NVARCHAR(1000) ='',
	@CreatedUser INT = 0,
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return bit = 1

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				SET @Date = GETDATE()

				SELECT @Id = ISNULL(MAX([Id]),0) + 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @ArticleId
				INSERT [dbo].[ArticleComment]
				VALUES(@Id, @ArticleId, @Date, @Detail, @CreatedUser, @Status)
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF @ArticleId > 0 AND @Id > 0
				BEGIN
					UPDATE [dbo].[ArticleComment]
					SET [Detail] = @Detail, [Status] = @Status
					WHERE [Id] = @Id  AND [ArticleId] = @ArticleId
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF @ArticleId > 0 AND @Id > 0
				BEGIN
					DELETE FROM [dbo].[ArticleComment]
					WHERE [Id] = @Id  AND [ArticleId] = @ArticleId
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	RETURN @return;
END
GO
PRINT N'Altering [dbo].[usp_Message]...';


GO
ALTER PROC [dbo].[usp_Message]
(
	@FolderId TINYINT = 1,
	@UserId INT,
	@PageIndex INT,
	@NumberInPage INT,
	@TotalItem INT OUT
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		-- Folder: Inbox, Sent, Draff, Trash
		SELECT *, ROW_NUMBER() OVER (ORDER BY [Date],[Id] DESC) AS RowNumb 
		INTO #DataTMP
		FROM (SELECT * FROM [dbo].[Message]
		WHERE [FolderId] = @FolderId AND ([SenderId] = @UserId OR [ReceiverId] = @UserId)) AS Tmp

		SELECT @TotalItem = COUNT([Id]) FROM #DataTMP

		-- Paging
		SELECT * FROM #DataTMP
		WHERE RowNum BETWEEN (@PageIndex - 1) * @NumberInPage + 1
				AND @PageIndex * @NumberInPage ;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Message_Transaction]...';


GO
CREATE PROC [dbo].[usp_Message_Transaction]
(
	@Action CHAR(1) = 'I',
	--Message
	@Id INT,
	@FolderId TINYINT = 1,
	@Subject NVARCHAR(250) = '',
	@Date SMALLDATETIME,
	@SenderId INT = 1,
	@ReceiverId INT = 1,
	@IsRead BIT = 0,
	@IsSend BIT = 0,
	@IsPrioriry BIT = 0,
	--MessageContent
	@Detail NVARCHAR(MAX) = '',
	--MessageRecipient
	@ListReceiverId INTLIST READONLY
)
AS BEGIN


	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return bit = 1

	BEGIN TRY
		BEGIN TRAN;
		
			-- Local Variable
			DECLARE @item INT

			IF @Action = 'I' --INSERT
			BEGIN
				SET @Date = GETDATE()

				-- Message Table
				INSERT [dbo].[Message] VALUES(@FolderId, @Subject, @Date, @SenderId, @ReceiverId, @IsRead, @IsSend, @IsPrioriry)
				SET @Id = SCOPE_IDENTITY()

				-- Message Content Table
				INSERT [dbo].[MessageContent] VALUES(@Id, @Detail)

				-- Message Recipient Table
				DECLARE cursorListReceiver CURSOR READ_ONLY FOR SELECT [Item] FROM @ListReceiverId WHERE [Item] > 0
				
				OPEN cursorListReceiver
				FETCH NEXT FROM cursorListReceiver INTO @Item
				
				WHILE @@FETCH_STATUS = 0
				BEGIN
					INSERT INTO [dbo].[MessageRecipient] VALUES(@Id, @item, 1) --Default IsUsed = True
					FETCH NEXT FROM cursorListReceiver INTO @Item
				END
				
				CLOSE cursorListReceiver
				DEALLOCATE cursorListReceiver
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF @IsSend = 0 -- AVAILABLE UPDATE WHEN EMAIL IS NOT SENT
				BEGIN
					-- Message Table
					UPDATE [dbo].[Message]
					SET [FolderId] = @FolderId, [Subject] = @Subject, [ReceiverId] = @ReceiverId, [IsPriority]  = @IsPrioriry
					WHERE [Id] = @Id  

					-- Message Content Table
					UPDATE [dbo].[MessageContent] SET [Detail] = @Detail WHERE [MessageId] = @Id

					-- Message Recipient Table
					DELETE FROM [dbo].[MessageRecipient] WHERE [MessageId] = @Id
				
					DECLARE cursorListReceiver CURSOR READ_ONLY FOR SELECT [Item] FROM @ListReceiverId WHERE [Item] > 0
				
					OPEN cursorListReceiver
					FETCH NEXT FROM cursorListReceiver INTO @Item
				
					WHILE @@FETCH_STATUS = 0
					BEGIN
						INSERT INTO [dbo].[MessageRecipient] VALUES(@Id, @item, 1) --Default IsUsed = True
						FETCH NEXT FROM cursorListReceiver INTO @Item
					END
				
					CLOSE cursorListReceiver
					DEALLOCATE cursorListReceiver
				END
			END

			IF @Action = 'D' --DELETE
			BEGIN
				-- Message Content Table
				DELETE FROM [dbo].[MessageContent] WHERE  [MessageId] = @Id

				-- Message Recipient Table
				DELETE FROM [dbo].[MessageRecipient] WHERE [MessageId] = @Id

				-- Message Table
				DELETE FROM [dbo].[Message] WHERE [Id] = @Id
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	RETURN @return;
END
GO
PRINT N'Creating [dbo].[usp_Module]...';


GO
CREATE PROC [dbo].[usp_Module]
( 
	@GroupId TINYINT = 1 --DEFAULT: 1 - CMS, 2 - Patient Services, 3 - Internal Services
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[Module] WITH(INDEX(idxModuleGroup)) WHERE [GroupId] = @GroupId
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Module_Transaction]...';


GO
CREATE PROC [dbo].[usp_Module_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1,
	@Title NVARCHAR(128) = '',
	@Handler NVARCHAR(256) = '',
	@Sort TINYINT = 1,
	@ParentId SMALLINT = 1,
	@GroupId TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Module] VALUES(@Title, @Handler, @Sort, @ParentId, @GroupId)
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[Module]
				SET [Title] = @Title, [Handler] = @Handler, [Sort] = @Sort, [ParentId] = @ParentId, [GroupId] = @GroupId
				WHERE [Id] = @Id  
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[Permission] WHERE [ModuleId] = @Id)
				BEGIN
					DELETE FROM [dbo].[Module]
					WHERE [Id] = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	RETURN @return;
END
GO
PRINT N'Creating [dbo].[usp_OfferAdvise]...';


GO
CREATE PROC [dbo].[usp_OfferAdvise]
(
	@PageIndex INT,
	@NumberInPage INT,
	@TotalItem INT OUT
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT *, ROW_NUMBER() OVER (ORDER BY [Date],[Id] DESC) AS RowNumb 
		INTO #DataTMP
		FROM (SELECT * FROM [dbo].[OfferAdvise]) AS Tmp

		SELECT @TotalItem = COUNT([Id]) FROM #DataTMP

		-- Paging
		SELECT * FROM #DataTMP
		WHERE RowNum BETWEEN (@PageIndex - 1) * @NumberInPage + 1
				AND @PageIndex * @NumberInPage ;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_OfferAdvise_Transaction]...';


GO
CREATE PROC [dbo].[usp_OfferAdvise_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Date SMALLDATETIME,
	@Detail NVARCHAR(MAX) = '',
	@PatientId INT,
	@IsRead BIT = 0,
	@IsSent BIT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				SET @Date = GETDATE()

				INSERT [dbo].[OfferAdvise] VALUES(@Date, @Detail, @PatientId, @IsRead, @IsSent)
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[OfferAdvise]
				SET [Detail] = @Detail, [IsRead] = @IsRead, [IsSent] = @IsSent
				WHERE [Id] = @Id  
			END

			IF @Action = 'D' --DELETE
			BEGIN
				BEGIN
					DELETE FROM [dbo].[OfferAdvise]
					WHERE [Id] = @Id
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	RETURN @return;
END
GO
PRINT N'Creating [dbo].[usp_Organization]...';


GO
CREATE PROC [dbo].[usp_Organization]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[Organization]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Organization_Transaction]...';


GO
CREATE PROC [dbo].[usp_Organization_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1,
	@ParentId SMALLINT,
	@Name NVARCHAR(150) = '',
	@Phone VARCHAR(50) = '',
	@Fax VARCHAR(50) = '',
	@Email VARCHAR(256) ='',
	@Address NVARCHAR(150) = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Organization] VALUES(@ParentId, @Name, @Phone, @Fax, @Email, @Address)
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[Organization]
				SET [Name] = @Name, [ParentId] = @ParentId, [Phone] = @Phone, [Fax] = @Fax, [Address] = @Address
				WHERE [Id] = @Id  
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[Users] WHERE [OrganizationId] = @Id)
				BEGIN
					DELETE FROM [dbo].[Organization]
					WHERE [Id] = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	RETURN @return;
END
GO
PRINT N'Refreshing [dbo].[usp_Group]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Group]';


GO
PRINT N'Refreshing [dbo].[usp_Login]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Login]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
--GO
--INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
--GO
--INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
--GO
--INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Module] WITH CHECK CHECK CONSTRAINT [FK_Module_Module];

ALTER TABLE [dbo].[Organization] WITH CHECK CHECK CONSTRAINT [FK_Organization_Organization];


GO
PRINT N'Update complete.';


GO
