/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The column [dbo].[Module].[GroupId] is being dropped, data loss could occur.

The column [dbo].[Module].[Group] on table [dbo].[Module] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Module])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping [dbo].[FK_Module_Module]...';


GO
ALTER TABLE [dbo].[Module] DROP CONSTRAINT [FK_Module_Module];


GO
PRINT N'Starting rebuilding table [dbo].[Module]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Module] (
    [Id]       SMALLINT       NOT NULL,
    [Title]    NVARCHAR (128) NOT NULL,
    [Handler]  NVARCHAR (256) NOT NULL,
    [Sort]     TINYINT        NOT NULL,
    [ParentId] SMALLINT       NOT NULL,
    [Group]    CHAR (1)       NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Module1] PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Module])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Module] ([Id], [Title], [Handler], [Sort], [ParentId])
        SELECT   [Id],
                 [Title],
                 [Handler],
                 [Sort],
                 [ParentId]
        FROM     [dbo].[Module]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[Module];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Module]', N'Module';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Module1]', N'PK_Module', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Module].[idxModuleGroup]...';


GO
CREATE NONCLUSTERED INDEX [idxModuleGroup]
    ON [dbo].[Module]([Group] ASC);


GO
PRINT N'Altering [dbo].[usp_Module]...';


GO
ALTER PROC [dbo].[usp_Module]
( 
	@Id SMALLINT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	--DEFAULT: 1 - CMS, 2 - Patient Services, 3 - Internal Services
	BEGIN TRY
		IF(@Id > 0)
			SELECT * FROM [dbo].[Module] WHERE [Id] = @Id
		ELSE
			SELECT * FROM [dbo].[Module]-- WITH(INDEX(idxModuleGroup)) WHERE [Group] = @GroupId
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_Module_Transaction]...';


GO
ALTER PROC [dbo].[usp_Module_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1,
	@Title NVARCHAR(128) = '',
	@Handler NVARCHAR(256) = '',
	@Sort TINYINT = 1,
	@ParentId SMALLINT = 1,
	@Group CHAR(1)  = '1'
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			IF @Action = 'I' --INSERT
			BEGIN
				SELECT @Id = ISNULL(MAX(Id),0) + 1 FROM dbo.[Module]
				INSERT [dbo].[Module] VALUES(@Id, @Title, @Handler, @Sort, @ParentId, @Group)

				SET @return = 1
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[Module]
				SET [Title] = @Title, [Handler] = @Handler, [Sort] = @Sort, [ParentId] = @ParentId, [Group] = @Group
				WHERE [Id] = @Id  

				SET @return = 1
			END

			IF @Action = 'D' --DELETE
			BEGIN
				DELETE FROM [dbo].[Module]
				WHERE [Id] = @Id

				SET @return = 1
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Altering [dbo].[usp_DoctorProfile]...';


GO
ALTER PROCEDURE [dbo].[usp_DoctorProfile]
	@UserId NVARCHAR(128) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @UserId IS NOT NULL
			SELECT p.*, u.[Name] 
			FROM [dbo].[DoctorProfile] p INNER JOIN [dbo].[Users] u
			ON p.UserId = u.Id
			WHERE [UserId] = @UserId
		ELSE
			SELECT * FROM [dbo].[DoctorProfile]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_CheckPermission]...';


GO
CREATE PROCEDURE [dbo].[usp_CheckPermission]
    @UserId NVARCHAR(128) = '',
    @OperationKey VARCHAR(70) = '',
    @ResourceKey VARCHAR(70) = '',
    @DefaultRoleInitial NVARCHAR(256) = ''
AS
BEGIN
    SET NOCOUNT ON
    SET TRANSACTION ISOLATION LEVEL READ COMMITTED

    DECLARE @Permission NVARCHAR(128)
    DECLARE @PermissionName NVARCHAR(30)
    SET @PermissionName = RTRIM(@ResourceKey) + '.' + RTRIM(@OperationKey)

    --CHECK ADMIN
    IF EXISTS(SELECT TOP 1 1 FROM [dbo].[Users] WHERE [UserId] = @UserId AND  [IsAdmin] = 1)
    BEGIN
        RETURN(1)
    END
    --CHECK USER IN ROLES
    IF EXISTS(SELECT TOP 1 1 FROM [dbo].[UserRole] a LEFT JOIN [dbo].[Role] b ON a.[RoleId] = b.[Id]
    WHERE [UserId] = @UserId AND b.[Name] = @DefaultRoleInitial)
    BEGIN
        RETURN(1)
    END

    -- CHECK PERMISSION
    IF EXISTS(SELECT TOP 1 1 FROM [dbo].[UserRole] WHERE [UserId] = @UserId AND [RoleId] IN (
    SELECT [RoleId] FROM [dbo].[PermissionRole] a LEFT JOIN [dbo].[Permission] b
    ON a.[PermissionId] = b.[Id] WHERE b.[Name] = @PermissionName))
    BEGIN
        RETURN(1)
    END

    RETURN(0)
END
GO
PRINT N'Creating [dbo].[usp_Module_CheckExistTitle]...';


GO
CREATE PROCEDURE [dbo].[usp_Module_CheckExistTitle]
	@Title  NVARCHAR(128),
	@Id SMALLINT
AS
BEGIN
	DECLARE @return BIT = 0

	print @Id
	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Module] WHERE [Title] = @Title))
			SET @return = 1
	ELSE
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Module] WHERE [Title] = @Title and Id <> @Id))
			SET @return = 1
	SELECT @return
END
GO
PRINT N'Refreshing [dbo].[usp_Login]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Login]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Update complete.';


GO
