/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Creating [dbo].[Department]...';


GO
CREATE TABLE [dbo].[Department] (
    [Id]          SMALLINT       IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (50)  NOT NULL,
    [Description] NVARCHAR (250) NOT NULL,
    [Handler]     NVARCHAR (256) NOT NULL,
    [Sort]        TINYINT        NOT NULL,
    [IsUsed]      BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DepartmentServices]...';


GO
CREATE TABLE [dbo].[DepartmentServices] (
    [Id]           SMALLINT        NOT NULL,
    [DepartmentId] SMALLINT        NOT NULL,
    [Name]         NVARCHAR (80)   NOT NULL,
    [Price]        NUMERIC (13, 3) NOT NULL,
    [Category]     TINYINT         NOT NULL,
    CONSTRAINT [PK_DepartmentServices] PRIMARY KEY CLUSTERED ([Id] ASC, [DepartmentId] ASC)
);


GO
PRINT N'Creating [dbo].[usp_Department]...';


GO
CREATE PROC [dbo].[usp_Department]
	@Id SMALLINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Department]
			WHERE [Id] = @Id
			ORDER BY [Id]
		ELSE
			SELECT * FROM [dbo].[Department]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Department_CheckExistName]...';


GO
CREATE PROCEDURE [dbo].[usp_Department_CheckExistName]
	@Name  NVARCHAR(50),
	@Id SMALLINT
AS
BEGIN
	DECLARE @return BIT = 0

	print @Id
	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Department] WHERE [Name] = @Name))
			SET @return = 1
	ELSE
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Department] WHERE [Name] = @Name and Id <> @Id))
			SET @return = 1
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Department_Transaction]...';


GO
CREATE PROC [dbo].[usp_Department_Transaction](
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1,
	@Name NVARCHAR(50) = '',
	@Description NVARCHAR(250) = '',
	@Handler NVARCHAR(256) = '',
	@Sort TINYINT = 1,
	@IsUsed BIT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			INSERT [dbo].[Department] ([Name], [Description], [Handler], [Sort], [IsUsed])
			VALUES(@Name, @Description, @Handler, @Sort, @IsUsed)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[Department]
			SET [Name] = @Name, [Description] = @Description, [Handler] = @Handler, [IsUsed] = @IsUsed, [Sort] = @Sort
			WHERE [Id] = @Id  
		END

		IF @Action = 'D' --DELETE
		BEGIN
			DELETE FROM [dbo].[Department]
			WHERE [Id] = @Id
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Creating [dbo].[usp_DepartmentServices]...';


GO
CREATE PROC [dbo].[usp_DepartmentServices]
	@Id SMALLINT = 1, @DepartmentId SMALLINT = 1
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[DepartmentServices]
			WHERE [Id] = @Id AND [DepartmentId] = @DepartmentId
			
		ELSE
			SELECT * FROM [dbo].[DepartmentServices] WHERE [DepartmentId] = @DepartmentId ORDER BY [Name]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_DepartmentServices_CheckExistName]...';


GO
CREATE PROCEDURE [dbo].[usp_DepartmentServices_CheckExistName]
	@Name  NVARCHAR(50),
	@Id SMALLINT, @DepartmentId SMALLINT
AS
BEGIN
	DECLARE @return BIT = 0

	print @Id
	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[DepartmentServices] WHERE [DepartmentId] = @DepartmentId AND [Name] = @Name))
			SET @return = 1
	ELSE
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[DepartmentServices] WHERE [DepartmentId] = @DepartmentId AND [Name] = @Name and Id <> @Id))
			SET @return = 1
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_DepartmentServices_Transaction]...';


GO
CREATE PROC [dbo].[usp_DepartmentServices_Transaction](
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1, @DepartmentId SMALLINT = 1,
	@Name NVARCHAR(80)= '',
	@Price NUMERIC(13,3) = 0,
	@Category TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			SELECT @Id = ISNULL(MAX(id),0) + 1  FROM [dbo].[DepartmentServices] WHERE [DepartmentId] = @DepartmentId
			INSERT [dbo].[DepartmentServices] (Id, DepartmentId, Name, Price, Category)
			VALUES(@Id, @DepartmentId, @Name, @Price, @Category)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[DepartmentServices]
			SET [Name] = @Name, [Price] = @Price, [Category] = @Category
			WHERE [Id] = @Id  AND [DepartmentId] = @DepartmentId
		END

		IF @Action = 'D' --DELETE
		BEGIN
			DELETE FROM [dbo].[DepartmentServices]
			WHERE [Id] = @Id AND [DepartmentId] = @DepartmentId
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Update complete.';


GO
