/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Dropping [dbo].[FK_Schedule_User]...';


GO
ALTER TABLE [dbo].[Schedule] DROP CONSTRAINT [FK_Schedule_User];


GO
PRINT N'Starting rebuilding table [dbo].[Schedule]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Schedule] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Title]     NVARCHAR (50)  NOT NULL,
    [Priority]  TINYINT        NOT NULL,
    [Detail]    NVARCHAR (300) NOT NULL,
    [IsAlarm]   BIT            NOT NULL,
    [DateFrom]  DATE           NOT NULL,
    [DateTo]    DATE           NOT NULL,
    [TimeFrom]  INT            NOT NULL,
    [TimeTo]    INT            NOT NULL,
    [Color]     VARCHAR (6)    NOT NULL,
    [IsExamine] BIT            NOT NULL,
    [UserId]    INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Schedule])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Schedule] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Schedule] ([Id], [Title], [Priority], [Detail], [IsAlarm], [DateFrom], [DateTo], [TimeFrom], [TimeTo], [Color], [IsExamine], [UserId])
        SELECT   [Id],
                 [Title],
                 [Priority],
                 [Detail],
                 [IsAlarm],
                 [DateFrom],
                 [DateTo],
                 [TimeFrom],
                 [TimeTo],
                 [Color],
                 [IsExamine],
                 [UserId]
        FROM     [dbo].[Schedule]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Schedule] OFF;
    END

DROP TABLE [dbo].[Schedule];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Schedule]', N'Schedule';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[FK_Schedule_User]...';


GO
ALTER TABLE [dbo].[Schedule] WITH NOCHECK
    ADD CONSTRAINT [FK_Schedule_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[usp_Schedule_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Schedule_Transaction]
	@Action CHAR(1) = 'I',
	@Id INT,
	@Title NVARCHAR(50),
	@Priority TINYINT,
	@Detail NVARCHAR(300),
	@IsAlarm BIT,
	@DateFrom DATE,
	@DateTo DATE,
	@TimeFrom INT,
	@TimeTo INT,
	@Color VARCHAR(6),
	@IsExamine BIT,
	@UserId INT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return INT = 0;

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				INSERT INTO [dbo].Schedule
				VALUES(@Title, @Priority, @Detail, @IsAlarm, @DateFrom, @DateTo, @TimeFrom, @TimeTo, @Color, @IsExamine, @UserId)
				SET @return = SCOPE_IDENTITY()
			IF @Action = 'U'
				UPDATE [dbo].Schedule
				SET Title = @Title,
				[Priority] = @Priority,
				Detail = @Detail,
				IsAlarm = @IsAlarm,
				DateFrom = @DateFrom,
				DateTo = @DateTo,
				TimeFrom = @TimeFrom,
				TimeTo = @TimeTo,
				Color = @Color,
				IsExamine = @IsExamine,
				UserId = @UserId
				WHERE Id = @Id

				SET @return = @Id
			IF @Action = 'D'
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].Schedule WHERE Id = @Id)
					BEGIN
						DELETE FROM [dbo].Schedule
						WHERE Id = @Id

						SET @return = @Id
					END
				ELSE
					SET @return = 0
		COMMIT TRAN
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
END
GO
PRINT N'Refreshing [dbo].[usp_Schedule]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Schedule]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Schedule] WITH CHECK CHECK CONSTRAINT [FK_Schedule_User];


GO
PRINT N'Update complete.';


GO
