/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Rename refactoring operation with key b0dc9621-165c-4cd7-b943-351ec3f051b0 is skipped, element [dbo].[SurveyQuestions].[IsRequried] (SqlSimpleColumn) will not be renamed to IsRequired';


GO
PRINT N'Rename refactoring operation with key 637d22f6-74ad-4c7e-af18-813cec672162 is skipped, element [dbo].[SurveyQuestions].[Is] (SqlSimpleColumn) will not be renamed to IsRandomize';


GO
PRINT N'Creating [dbo].[EmailMarketing]...';


GO
CREATE TABLE [dbo].[EmailMarketing] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (128) NOT NULL,
    [Detail]       NVARCHAR (MAX) NOT NULL,
    [IsUsed]       BIT            NULL,
    [CreatedUser]  NVARCHAR (128) NOT NULL,
    [CreatedDate]  VARCHAR (20)   NOT NULL,
    [ModifiedUser] NVARCHAR (128) NOT NULL,
    [ModifiedDate] VARCHAR (20)   NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Permission]...';


GO
CREATE TABLE [dbo].[Permission] (
    [RoleId]    SMALLINT NOT NULL,
    [ModuleId]  SMALLINT NOT NULL,
    [IsRead]    BIT      NOT NULL,
    [IsWrite]   BIT      NOT NULL,
    [IsCreate]  BIT      NOT NULL,
    [IsModify]  BIT      NOT NULL,
    [IsDestroy] BIT      NOT NULL,
    [IsPrint]   BIT      NOT NULL,
    CONSTRAINT [PK_Permission] PRIMARY KEY CLUSTERED ([RoleId] ASC, [ModuleId] ASC)
);


GO
PRINT N'Creating [dbo].[Role]...';


GO
CREATE TABLE [dbo].[Role] (
    [Id]   NVARCHAR (128) NOT NULL,
    [Name] NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_Role] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Survey]...';


GO
CREATE TABLE [dbo].[Survey] (
    [Id]             VARCHAR (128)  NOT NULL,
    [Title]          NVARCHAR (150) NOT NULL,
    [Description]    NVARCHAR (MAX) NOT NULL,
    [Message]        NVARCHAR (300) NOT NULL,
    [IsBrading]      BIT            NULL,
    [Logo]           VARCHAR (256)  NULL,
    [IsSurveyInvite] BIT            NULL,
    [IsActive]       BIT            NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[SurveyAnswers]...';


GO
CREATE TABLE [dbo].[SurveyAnswers] (
    [Id]          TINYINT        NOT NULL,
    [QuestionId]  VARCHAR (128)  NOT NULL,
    [Answer]      NVARCHAR (150) NULL,
    [LowScore]    INT            NULL,
    [HightScore]  INT            NULL,
    [IsRequired]  BIT            NOT NULL,
    [IsRandomize] BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([QuestionId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[SurveyAnswers].[IX_SurveyAnswers_QuestionId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyAnswers_QuestionId]
    ON [dbo].[SurveyAnswers]([QuestionId] ASC);


GO
PRINT N'Creating [dbo].[SurveyQuestions]...';


GO
CREATE TABLE [dbo].[SurveyQuestions] (
    [Id]       VARCHAR (128)  NOT NULL,
    [SurveyId] VARCHAR (128)  NOT NULL,
    [Question] NVARCHAR (300) NOT NULL,
    [Type]     TINYINT        NOT NULL,
    CONSTRAINT [PK_SurveyQuestions] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UserGroup]...';


GO
CREATE TABLE [dbo].[UserGroup] (
    [UserId]  NVARCHAR (128) NOT NULL,
    [GroupId] TINYINT        NOT NULL,
    CONSTRAINT [PK_UserGroup] PRIMARY KEY CLUSTERED ([UserId] ASC, [GroupId] ASC)
);


GO
PRINT N'Creating [dbo].[UserRole]...';


GO
CREATE TABLE [dbo].[UserRole] (
    [UserId] NVARCHAR (128) NOT NULL,
    [RoleId] NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_UserRole] PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]                   NVARCHAR (128) NOT NULL,
    [Email]                NVARCHAR (256) NULL,
    [EmailConfirmed]       BIT            NOT NULL,
    [PasswordHash]         NVARCHAR (MAX) NULL,
    [SecurityStamp]        NVARCHAR (MAX) NULL,
    [PhoneNumber]          NVARCHAR (MAX) NULL,
    [PhoneNumberConfirmed] BIT            NOT NULL,
    [TwoFactorEnabled]     BIT            NOT NULL,
    [LockoutEndDateUtc]    DATETIME       NULL,
    [LockoutEnabled]       BIT            NOT NULL,
    [AccessFailedCount]    INT            NOT NULL,
    [UserName]             NVARCHAR (256) NOT NULL,
    [OrganizationId]       SMALLINT       NOT NULL,
    [Tags]                 NVARCHAR (250) NOT NULL,
    [HomePhone]            VARCHAR (20)   NOT NULL,
    [IsAdmin]              BIT            NOT NULL,
    [IsDoctor]             BIT            NOT NULL,
    [Gender]               TINYINT        NOT NULL,
    [Code]                 CHAR (20)      NOT NULL,
    [Name]                 NVARCHAR (100) NOT NULL,
    [PatientId]            NVARCHAR (128) NULL,
    [DoB]                  DATE           NOT NULL,
    [Image]                VARCHAR (256)  NOT NULL,
    [Status]               BIT            NOT NULL,
    CONSTRAINT [PK_USERS] PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Email] ASC),
    CONSTRAINT [UQ__USERS__A9D1053429B4C0C0] UNIQUE NONCLUSTERED ([Email] ASC)
);


GO
PRINT N'Creating [dbo].[Users].[idxUserAccess]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [idxUserAccess]
    ON [dbo].[Users]([Code] ASC, [Email] ASC);


GO
PRINT N'Creating [dbo].[OfferAdvise].[IX_OfferAdvise_PatientId]...';


GO
CREATE NONCLUSTERED INDEX [IX_OfferAdvise_PatientId]
    ON [dbo].[OfferAdvise]([PatientId] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[EmailMarketing]...';


GO
ALTER TABLE [dbo].[EmailMarketing]
    ADD DEFAULT 1 FOR [IsUsed];


GO
PRINT N'Creating unnamed constraint on [dbo].[Survey]...';


GO
ALTER TABLE [dbo].[Survey]
    ADD DEFAULT 1 FOR [IsBrading];


GO
PRINT N'Creating unnamed constraint on [dbo].[Survey]...';


GO
ALTER TABLE [dbo].[Survey]
    ADD DEFAULT 0 FOR [IsSurveyInvite];


GO
PRINT N'Creating unnamed constraint on [dbo].[Survey]...';


GO
ALTER TABLE [dbo].[Survey]
    ADD DEFAULT 0 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[SurveyAnswers]...';


GO
ALTER TABLE [dbo].[SurveyAnswers]
    ADD DEFAULT 0 FOR [LowScore];


GO
PRINT N'Creating unnamed constraint on [dbo].[SurveyAnswers]...';


GO
ALTER TABLE [dbo].[SurveyAnswers]
    ADD DEFAULT 0 FOR [HightScore];


GO
PRINT N'Creating [dbo].[FK_Permission_Module]...';


GO
ALTER TABLE [dbo].[Permission] WITH NOCHECK
    ADD CONSTRAINT [FK_Permission_Module] FOREIGN KEY ([ModuleId]) REFERENCES [dbo].[Module] ([Id]);


GO
PRINT N'Creating [dbo].[FK_SurveyAnswers_SurveyQuestions]...';


GO
ALTER TABLE [dbo].[SurveyAnswers] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyAnswers_SurveyQuestions] FOREIGN KEY ([QuestionId]) REFERENCES [dbo].[SurveyQuestions] ([Id]);


GO
PRINT N'Creating [dbo].[FK_SurveyQuestions_Survey]...';


GO
ALTER TABLE [dbo].[SurveyQuestions] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyQuestions_Survey] FOREIGN KEY ([SurveyId]) REFERENCES [dbo].[Survey] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserGroup_Group]...';


GO
ALTER TABLE [dbo].[UserGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_UserGroup_Group] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[Group] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserGroup_Users]...';


GO
ALTER TABLE [dbo].[UserGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_UserGroup_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserRole_Role]...';


GO
ALTER TABLE [dbo].[UserRole] WITH NOCHECK
    ADD CONSTRAINT [FK_UserRole_Role] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Role] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserRole_Users]...';


GO
ALTER TABLE [dbo].[UserRole] WITH NOCHECK
    ADD CONSTRAINT [FK_UserRole_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Users_Organization]...';


GO
ALTER TABLE [dbo].[Users] WITH NOCHECK
    ADD CONSTRAINT [FK_Users_Organization] FOREIGN KEY ([OrganizationId]) REFERENCES [dbo].[Organization] ([Id]);


GO
PRINT N'Altering [dbo].[usp_AppointmentLog_Confirm]...';


GO
ALTER PROC [dbo].[usp_AppointmentLog_Confirm]
(
	@Action CHAR(1) = 'I',
	@Id UNIQUEIDENTIFIER,
	@Date DATE = '',
	@Time int = 480,
	@PhysicianId NVARCHAR(128) = '',
	@PatientId NVARCHAR(128) = '',
	@Symptom NVARCHAR(300) = '',
	@PatientName NVARCHAR(50) = '',
	@PatientAddress NVARCHAR(150) = '',
	@PatientEmail VARCHAR(256) = '',
	@PatientPhone VARCHAR(20) = '',
	@PatientGender TINYINT = 1,
	@PatientDoB DATE = NULL,
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)

	BEGIN TRY
		BEGIN TRAN;

			IF @Status = 2
			BEGIN
				SET @ModifiedDate = [dbo].[ufnGetDate]()
				SET @CreatedDate = @ModifiedDate

				SELECT * INTO #AppointmentLogById
				FROM [dbo].[AppointmentLog] l
				WHERE l.Id = @Id

				--Post data to Appointment
				DECLARE @ColectionId INT
				INSERT [dbo].[Appointment]([PhysicianId], [PatientId], [Symptom], [CreatedDate], [ModifiedDate], [ModifedUser])
				SELECT item.PhysicianId, item.PatientId, item.Symptom, @CreatedDate, @ModifiedDate, N'Patient Test' FROM #AppointmentLogById item
				SET @ColectionId = (SELECT SCOPE_IDENTITY())

				--Generation Number
				SELECT TOP 1 s.AppointmentIntervalTime, s.AppointmentStartTime INTO #GenerationTime
				FROM [dbo].[Setting] s
				--
				DECLARE @AppointmentNo INT
				DECLARE @IntervalTime INT
				DECLARE @StartTime INT
				SET @IntervalTime = (SELECT t.AppointmentIntervalTime FROM #GenerationTime t)
				SET @StartTime = (SELECT t.AppointmentStartTime FROM #GenerationTime t)
				SET @AppointmentNo = [dbo].[ufnGenerationNumber](@Time, @IntervalTime, @StartTime)

				--Post data to AppointmentCollection
				INSERT [dbo].[AppointmentCollection]([Id], [Date], [Time], [AppointmentNo], [PatientName], [PatientAddress], [PatientEmail], [PatientPhone], [PatientGender], [PatientDoB], [Status])
				SELECT @ColectionId, item.[Date], item.[Time], @AppointmentNo, ISNULL(item.PatientName, N'NA'), ISNULL(item.PatientAddress, N'NA'), item.PatientEmail, item.PatientPhone, item.PatientGender, item.PatientDoB, 2 FROM #AppointmentLogById item

				UPDATE [dbo].[AppointmentLog] SET [Status] = 2 WHERE [Id] = @Id

				-- DROP Temp Table
				DROP TABLE #AppointmentLogById
				DROP TABLE #GenerationTime

				SET @return = 1
			END

			IF @Status = 3
			BEGIN
				DECLARE @isCheck BIT
				SET @isCheck = (SELECT TOP 1 s.IsSaveCanceledAppointment FROM [dbo].[Setting] s)
				IF @isCheck = 1
				BEGIN
					UPDATE [dbo].[AppointmentLog]
					SET [Status] = 3
					WHERE [Id] = @Id

					SET @return = 1
				END
				ELSE
				BEGIN
					DELETE FROM [dbo].[AppointmentLog] WHERE [Id] = @Id

					SET @return = 1
				END
			END
		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Altering [dbo].[usp_Article]...';


GO
ALTER PROC [dbo].[usp_Article]
	@Id int,
	@patientId NVARCHAR(128) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id = 0 
			SELECT	a.*, u.Name as AuthorName, u.[Image] as ImageProfile,  (SELECT COUNT(b.Id) from ArticleComment b where ArticleId = a.Id) as CountComments
			FROM	[dbo].[Article] a inner join
					[dbo].[Users] u on a.PatientId = u.Id
			WHERE	a.PatientId = @patientId OR @patientId is NULL OR @patientId = ''
			
		ELSE
			SELECT  a.*, u.Name as AuthorName, u.[Image] as ImageProfile , (SELECT COUNT(b.Id) from ArticleComment b where ArticleId = a.Id) as CountComments
			FROM	[dbo].[Article] a inner join
					[dbo].[Users] u on a.PatientId = u.Id
			WHERE	a.Id = @Id
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_Article_Transaction]...';


GO
ALTER PROC [dbo].[usp_Article_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Date datetime,
	@Title NVARCHAR(150) = '',
	@Detail NVARCHAR(1000) = '',
	@PatientId NVARCHAR(128) = 0,
	@Status TINYINT = 1,
	@IsClosed BIT
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0
	DECLARE @CurrentDate SMALLDATETIME

	BEGIN TRY
		BEGIN TRAN;
			SET @CurrentDate = GETDATE()

			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Article]
				VALUES(@CurrentDate, @Title, @Detail, @PatientId, @Status, @IsClosed)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN
					UPDATE [dbo].[Article]
					SET [Title] = @Title, [Detail] = @Detail, [Status] = @Status, [IsClosed] = @IsClosed
					WHERE [Id] = @Id  

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN	
					-- Article Comment Table
					DELETE FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id

					-- Article Table
					DELETE FROM [dbo].[Article] WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Altering [dbo].[usp_ArticleComment]...';


GO
ALTER PROC [dbo].[usp_ArticleComment] (
	@TypeGet tinyint = 0, -- 0: get all comment by ArticleId ; 1: Get comment by Id
	@Id INT = 0,
	@ArticleId INT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @TypeGet = 0
			SELECT	a.*, u.Name AS Author, u.[Image] as ImageProfile 
			FROM	[dbo].[ArticleComment] a INNER JOIN
					[dbo].[Users] u ON a.CreatedUser = u.Id
			WHERE [ArticleId] = @ArticleId
		ELSE If @TypeGet = 1
			SELECT	a.*, u.Name AS Author, u.[Image] as ImageProfile 
			FROM	[dbo].[ArticleComment] a INNER JOIN
					[dbo].[Users] u ON a.CreatedUser = u.Id
			WHERE	a.[Id] = @Id AND [ArticleId] = @ArticleId

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_OfferAdvise]...';


GO
ALTER PROCEDURE [dbo].[usp_OfferAdvise]
	@Id TINYINT,
	@PatientId NVARCHAR(128) = ''
AS
	IF(@Id > 0)
	BEGIN
		SELECT * FROM [dbo].[OfferAdvise]
		WHERE [Id] = @Id
	END
	ELSE
	BEGIN
		IF (@PatientId <> '')
			SELECT * FROM [dbo].[OfferAdvise] WITH(INDEX(IX_OfferAdvise_PatientId)) WHERE [PatientId] = @PatientId ORDER BY [Id]
		ELSE
			SELECT * FROM [dbo].[OfferAdvise] ORDER BY [Id]
	END
RETURN 0
GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b0dc9621-165c-4cd7-b943-351ec3f051b0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b0dc9621-165c-4cd7-b943-351ec3f051b0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '637d22f6-74ad-4c7e-af18-813cec672162')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('637d22f6-74ad-4c7e-af18-813cec672162')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Permission] WITH CHECK CHECK CONSTRAINT [FK_Permission_Module];

ALTER TABLE [dbo].[SurveyAnswers] WITH CHECK CHECK CONSTRAINT [FK_SurveyAnswers_SurveyQuestions];

ALTER TABLE [dbo].[SurveyQuestions] WITH CHECK CHECK CONSTRAINT [FK_SurveyQuestions_Survey];

ALTER TABLE [dbo].[UserGroup] WITH CHECK CHECK CONSTRAINT [FK_UserGroup_Group];

ALTER TABLE [dbo].[UserGroup] WITH CHECK CHECK CONSTRAINT [FK_UserGroup_Users];

ALTER TABLE [dbo].[UserRole] WITH CHECK CHECK CONSTRAINT [FK_UserRole_Role];

ALTER TABLE [dbo].[UserRole] WITH CHECK CHECK CONSTRAINT [FK_UserRole_Users];

ALTER TABLE [dbo].[Users] WITH CHECK CHECK CONSTRAINT [FK_Users_Organization];


GO
PRINT N'Update complete.';


GO
