/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Rename refactoring operation with key d69ed296-c3c6-45fa-a357-35a051f9173e, deaf03a7-de13-421c-867a-51693e97121d is skipped, element [dbo].[Schedule].[DateFrom] (SqlSimpleColumn) will not be renamed to Start';


GO
PRINT N'Rename refactoring operation with key 39e8d34f-58ee-4e01-8259-16f5328859f8 is skipped, element [dbo].[Schedule].[DateTo] (SqlSimpleColumn) will not be renamed to End';


GO
PRINT N'Altering [dbo].[usp_Appointment_Transaction]...';


GO
ALTER PROC [dbo].[usp_Appointment_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Time int = 8,
	@PhysicianId INT = 0,
	@PatientId INT = 0,
	@Symptom NVARCHAR(300) = '',
	@Date SMALLDATETIME,
	--@CreatedDate VARCHAR(20) = '',
	--@ModifiedDate NVARCHAR(20) = '',
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)
	---DECLARE @Date SMALLDATETIME

	BEGIN TRY
		BEGIN TRAN;

			SET @ModifiedDate = [dbo].[ufnGetDate]()
			SET @Date = GETDATE()

			IF @Action = 'I' --INSERT
			BEGIN
				
				SET @CreatedDate = @ModifiedDate

				INSERT [dbo].[Appointment]
				VALUES(@Date, @Time, @PhysicianId, @PatientId, @Symptom, @CreatedDate, @ModifiedDate, @Status)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				--STATUS: 0 - Just Created/Pending, 1 - Approved, 2 - Canceled
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[Appointment] WHERE [Id] = @Id AND [Status] = @Status)
				BEGIN
					UPDATE [dbo].[Appointment]
					SET [Date] = @Date, [Time] = @Time, [PhysicianId] = @PhysicianId, [PatientId] = @PatientId, [Symptom] = @Symptom, [ModifiedDate] = @ModifiedDate, [Status] = @Status
					WHERE [Id] = @Id  

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[Appointment] WHERE [Id] = @Id AND [Status] = @Status)
				BEGIN
					DELETE FROM [dbo].[Appointment]
					WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Altering [dbo].[usp_Article_Transaction]...';


GO
ALTER PROC [dbo].[usp_Article_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Title NVARCHAR(150) = '',
	@Detail NVARCHAR(1000) = '',
	@PatientId INT = 0,
	@Status TINYINT = 1,
	@IsClosed BIT
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0
	DECLARE @Date SMALLDATETIME

	BEGIN TRY
		BEGIN TRAN;
			SET @Date = GETDATE()

			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Article]
				VALUES(@Date, @Title, @Detail, @PatientId, @Status, @IsClosed)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN
					UPDATE [dbo].[Article]
					SET [Date] = @Date, [Title] = @Title, [Detail] = @Detail, [Status] = @Status, [IsClosed] = @IsClosed
					WHERE [Id] = @Id  

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN	
					-- Article Comment Table
					DELETE FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id

					-- Article Table
					DELETE FROM [dbo].[Article] WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Altering [dbo].[usp_OfferAdvise]...';


GO
ALTER PROCEDURE [dbo].[usp_OfferAdvise]
	@Id TINYINT
AS
	IF(@Id > 0)
	BEGIN
		SELECT * FROM [dbo].[OfferAdvise]
		WHERE [Id] = @Id
	END
	ELSE
	BEGIN
		SELECT * FROM [dbo].[OfferAdvise]
		ORDER BY [Id]
	END
RETURN 0


--CREATE PROC [dbo].[usp_OfferAdvise]
--(
--	@PageIndex INT,
--	@NumberInPage INT,
--	@TotalItem INT OUT
--)
--AS BEGIN
--	SET NOCOUNT ON
--	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

--	BEGIN TRY
--		SELECT *, ROW_NUMBER() OVER (ORDER BY [Date],[Id] DESC) AS RowNumb 
--		INTO #DataTMP
--		FROM (SELECT * FROM [dbo].[OfferAdvise]) AS Tmp

--		SELECT @TotalItem = COUNT([Id]) FROM #DataTMP

--		-- Paging
--		SELECT * FROM #DataTMP
--		WHERE RowNum BETWEEN (@PageIndex - 1) * @NumberInPage + 1
--				AND @PageIndex * @NumberInPage ;
--	END TRY
--	BEGIN CATCH
--		IF @@TRANCOUNT <> 0 
--		BEGIN
--			RETURN NULL
--		END
--	END CATCH
--END
GO
PRINT N'Altering [dbo].[usp_OfferAdvise_Transaction]...';


GO
ALTER PROC [dbo].[usp_OfferAdvise_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Detail NVARCHAR(MAX) = '',
	@PatientId INT,
	@IsRead BIT = 0,
	@IsSent BIT = 0,
	@Tags NVARCHAR(150)
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			DECLARE @Date SMALLDATETIME

			IF @Action = 'I' --INSERT
			BEGIN
				SET @Date = GETDATE()

				INSERT [dbo].[OfferAdvise] VALUES(@Date, @Detail, @PatientId, @IsRead, @IsSent, @Tags)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[OfferAdvise]
				SET [Detail] = @Detail, [IsRead] = @IsRead, [IsSent] = @IsSent,
				Tags = @Tags
				WHERE [Id] = @Id  

				SET @return = @Id
			END

			IF @Action = 'D' --DELETE
			BEGIN
				BEGIN
					DELETE FROM [dbo].[OfferAdvise]
					WHERE [Id] = @Id

					SET @return = @Id
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Altering [dbo].[usp_Schedule]...';


GO
ALTER PROCEDURE [dbo].[usp_Schedule]
	@Id INT = 0,
	@UserId INT = 0
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF(@Id > 0)
			SELECT *
			FROM [dbo].Schedule
			WHERE Id = @Id
			AND UserId = @UserId
		ELSE
			SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd69ed296-c3c6-45fa-a357-35a051f9173e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d69ed296-c3c6-45fa-a357-35a051f9173e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'deaf03a7-de13-421c-867a-51693e97121d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('deaf03a7-de13-421c-867a-51693e97121d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '39e8d34f-58ee-4e01-8259-16f5328859f8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('39e8d34f-58ee-4e01-8259-16f5328859f8')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Update complete.';


GO
