/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Altering [dbo].[usp_CheckPermission]...';


GO
ALTER PROCEDURE [dbo].[usp_CheckPermission]
	@UserId NVARCHAR(128) = '',
	@OperationKey VARCHAR(70) = '',
	@ResourceKey VARCHAR(70) = '',
	@DefaultRoleInitial NVARCHAR(256) = ''
AS
BEGIN
   SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @Permission NVARCHAR(128)
	DECLARE @PermissionName NVARCHAR(30)
	SET @PermissionName = RTRIM(@ResourceKey) + '.' + RTRIM(@OperationKey)

	--CHECK ADMIN
	IF EXISTS(SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Id] = @UserId AND  [IsAdmin] = 1)
	BEGIN
		PRINT 'OKEY ADMIN'
		SELECT 1
		RETURN(1)
	END
	--CHECK USER IN ROLES
	IF EXISTS(SELECT TOP 1 1 FROM [dbo].[UserRole] a LEFT JOIN [dbo].[Role] b ON a.[RoleId] = b.[Id]
	WHERE [UserId] = @UserId AND b.[Name] = @DefaultRoleInitial)
	BEGIN
		PRINT 'OKEY ADMIN 2'
		SELECT 1
		RETURN(1)
	END

	-- CHECK PERMISSION
	IF EXISTS(SELECT TOP 1 1 FROM [dbo].[UserRole] WHERE [UserId] = @UserId AND [RoleId] IN (
	SELECT [RoleId] FROM [dbo].[PermissionRoles] a LEFT JOIN [dbo].[Permission] b
	ON a.[PermissionId] = b.[Id] WHERE b.[Name] = @PermissionName))
	BEGIN
		PRINT 'OKEY ALLOWED'
		SELECT 1
		RETURN(1)
	END

	SELECT 0
	RETURN(0)
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Update complete.';


GO
