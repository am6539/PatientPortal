/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The type for column Id in table [dbo].[Role] is currently  NVARCHAR (128) NOT NULL but is being changed to  SMALLINT IDENTITY (1, 1) NOT NULL. Data loss could occur.

The type for column Name in table [dbo].[Role] is currently  NVARCHAR (256) NOT NULL but is being changed to  NVARCHAR (128) NOT NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Role])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column RoleId in table [dbo].[UserRole] is currently  NVARCHAR (128) NOT NULL but is being changed to  SMALLINT NOT NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[UserRole])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Users].[DoB] is being dropped, data loss could occur.

The column [dbo].[Users].[Tag] is being dropped, data loss could occur.

The column [dbo].[Users].[Code] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Users].[DateOfBirth] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Users].[HomePhone] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Users].[Status] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Users].[Tags] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column Image on table [dbo].[Users] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The type for column Image in table [dbo].[Users] is currently  NVARCHAR (MAX) NULL but is being changed to  VARCHAR (256) NOT NULL. Data loss could occur.

The column Name on table [dbo].[Users] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The type for column OrganizationId in table [dbo].[Users] is currently  INT NOT NULL but is being changed to  SMALLINT NOT NULL. Data loss could occur.

The column PatientId on table [dbo].[Users] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Users])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping [dbo].[Role].[RoleNameIndex]...';


GO
DROP INDEX [RoleNameIndex]
    ON [dbo].[Role];


GO
PRINT N'Dropping [dbo].[UserRole].[IX_RoleId]...';


GO
DROP INDEX [IX_RoleId]
    ON [dbo].[UserRole];


GO
PRINT N'Dropping [dbo].[UserRole].[IX_UserId]...';


GO
DROP INDEX [IX_UserId]
    ON [dbo].[UserRole];


GO
PRINT N'Dropping [dbo].[Users].[UserNameIndex]...';


GO
DROP INDEX [UserNameIndex]
    ON [dbo].[Users];


GO
PRINT N'Dropping [dbo].[FK_dbo.UserRole_dbo.Role_RoleId]...';


GO
ALTER TABLE [dbo].[UserRole] DROP CONSTRAINT [FK_dbo.UserRole_dbo.Role_RoleId];


GO
PRINT N'Dropping [dbo].[FK_dbo.UserRole_dbo.Users_UserId]...';


GO
ALTER TABLE [dbo].[UserRole] DROP CONSTRAINT [FK_dbo.UserRole_dbo.Users_UserId];


GO
PRINT N'Dropping [dbo].[FK_dbo.UserClaim_dbo.Users_UserId]...';


GO
ALTER TABLE [dbo].[UserClaim] DROP CONSTRAINT [FK_dbo.UserClaim_dbo.Users_UserId];


GO
PRINT N'Dropping [dbo].[FK_dbo.UserLogin_dbo.Users_UserId]...';


GO
ALTER TABLE [dbo].[UserLogin] DROP CONSTRAINT [FK_dbo.UserLogin_dbo.Users_UserId];


GO
PRINT N'Starting rebuilding table [dbo].[Role]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Role] (
    [Id]   SMALLINT       IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (128) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Role1] PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Role])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Role] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Role] ([Id], [Name])
        SELECT   [Id],
                 [Name]
        FROM     [dbo].[Role]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Role] OFF;
    END

DROP TABLE [dbo].[Role];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Role]', N'Role';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Role1]', N'PK_Role', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[UserRole]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_UserRole] (
    [UserId] NVARCHAR (128) NOT NULL,
    [RoleId] SMALLINT       NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_UserRole1] PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[UserRole])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_UserRole] ([UserId], [RoleId])
        SELECT   [UserId],
                 [RoleId]
        FROM     [dbo].[UserRole]
        ORDER BY [UserId] ASC, [RoleId] ASC;
    END

DROP TABLE [dbo].[UserRole];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_UserRole]', N'UserRole';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_UserRole1]', N'PK_UserRole', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Users]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Users] (
    [Id]                   NVARCHAR (128) NOT NULL,
    [Email]                NVARCHAR (256) NULL,
    [EmailConfirmed]       BIT            NOT NULL,
    [PasswordHash]         NVARCHAR (MAX) NULL,
    [SecurityStamp]        NVARCHAR (MAX) NULL,
    [PhoneNumber]          NVARCHAR (MAX) NULL,
    [PhoneNumberConfirmed] BIT            NOT NULL,
    [TwoFactorEnabled]     BIT            NOT NULL,
    [LockoutEndDateUtc]    DATETIME       NULL,
    [LockoutEnabled]       BIT            NOT NULL,
    [AccessFailedCount]    INT            NOT NULL,
    [UserName]             NVARCHAR (256) NOT NULL,
    [OrganizationId]       SMALLINT       NOT NULL,
    [Tags]                 NVARCHAR (250) NOT NULL,
    [HomePhone]            VARCHAR (20)   NOT NULL,
    [IsAdmin]              BIT            NOT NULL,
    [IsDoctor]             BIT            NOT NULL,
    [Gender]               TINYINT        NOT NULL,
    [Code]                 CHAR (20)      NOT NULL,
    [Name]                 NVARCHAR (100) NOT NULL,
    [PatientId]            NVARCHAR (128) NOT NULL,
    [DateOfBirth]          DATE           NOT NULL,
    [Image]                VARCHAR (256)  NOT NULL,
    [Status]               BIT            NOT NULL,
    UNIQUE NONCLUSTERED ([Email] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_PK_USERS1] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UQ__USERS__A9D1053429B4C0C01] UNIQUE NONCLUSTERED ([Email] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Users])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Users] ([Id], [Name], [PatientId], [Gender], [Image], [OrganizationId], [IsDoctor], [IsAdmin], [Email], [EmailConfirmed], [PasswordHash], [SecurityStamp], [PhoneNumber], [PhoneNumberConfirmed], [TwoFactorEnabled], [LockoutEndDateUtc], [LockoutEnabled], [AccessFailedCount], [UserName])
        SELECT   [Id],
                 [Name],
                 [PatientId],
                 [Gender],
                 [Image],
                 [OrganizationId],
                 [IsDoctor],
                 [IsAdmin],
                 [Email],
                 [EmailConfirmed],
                 [PasswordHash],
                 [SecurityStamp],
                 [PhoneNumber],
                 [PhoneNumberConfirmed],
                 [TwoFactorEnabled],
                 [LockoutEndDateUtc],
                 [LockoutEnabled],
                 [AccessFailedCount],
                 [UserName]
        FROM     [dbo].[Users]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[Users];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Users]', N'Users';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_USERS1]', N'PK_USERS', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UQ__USERS__A9D1053429B4C0C01]', N'UQ__USERS__A9D1053429B4C0C0', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Users].[idxUserAccess]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [idxUserAccess]
    ON [dbo].[Users]([Code] ASC, [Email] ASC);


GO
PRINT N'Creating [dbo].[Permission]...';


GO
CREATE TABLE [dbo].[Permission] (
    [RoleId]    SMALLINT NOT NULL,
    [ModuleId]  SMALLINT NOT NULL,
    [IsRead]    BIT      NOT NULL,
    [IsWrite]   BIT      NOT NULL,
    [IsCreate]  BIT      NOT NULL,
    [IsModify]  BIT      NOT NULL,
    [IsDestroy] BIT      NOT NULL,
    [IsPrint]   BIT      NOT NULL,
    CONSTRAINT [PK_Permission] PRIMARY KEY CLUSTERED ([RoleId] ASC, [ModuleId] ASC)
);


GO
PRINT N'Creating [dbo].[UserGroup]...';


GO
CREATE TABLE [dbo].[UserGroup] (
    [UserId]  NVARCHAR (128) NOT NULL,
    [GroupId] TINYINT        NOT NULL,
    CONSTRAINT [PK_UserGroup] PRIMARY KEY CLUSTERED ([UserId] ASC, [GroupId] ASC)
);


GO
PRINT N'Creating [dbo].[FK_UserRole_Role]...';


GO
ALTER TABLE [dbo].[UserRole] WITH NOCHECK
    ADD CONSTRAINT [FK_UserRole_Role] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Role] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserRole_Users]...';


GO
ALTER TABLE [dbo].[UserRole] WITH NOCHECK
    ADD CONSTRAINT [FK_UserRole_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Users_Organization]...';


GO
ALTER TABLE [dbo].[Users] WITH NOCHECK
    ADD CONSTRAINT [FK_Users_Organization] FOREIGN KEY ([OrganizationId]) REFERENCES [dbo].[Organization] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Permission_Module]...';


GO
ALTER TABLE [dbo].[Permission] WITH NOCHECK
    ADD CONSTRAINT [FK_Permission_Module] FOREIGN KEY ([ModuleId]) REFERENCES [dbo].[Module] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserGroup_Group]...';


GO
ALTER TABLE [dbo].[UserGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_UserGroup_Group] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[Group] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserGroup_Users]...';


GO
ALTER TABLE [dbo].[UserGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_UserGroup_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[ufnGenerationNumber]...';


GO
CREATE FUNCTION [dbo].[ufnGenerationNumber](
	@Time INT,
	@IntervalTime INT,
	@StartTime INT
)
RETURNS INT
AS
BEGIN
	DECLARE @STT INT = 1
	WHILE (@StartTime+@IntervalTime <= @Time)
	BEGIN
		SET @STT = @STT + 1
		SET @StartTime = @StartTime + @IntervalTime
	END
	RETURN @STT
END
GO
PRINT N'Altering [dbo].[usp_AppointmentLog]...';


GO
ALTER PROC [dbo].[usp_AppointmentLog](
	@Id UniqueIdentifier
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	--cast(cast(0 as binary) as uniqueidentifier) convert zero to uniqueidentifier
	BEGIN TRY
		IF (@Id IS NOT NULL)
		BEGIN
			SELECT * FROM [dbo].[AppointmentLog] l
			WHERE l.Id = @Id
		END
		ELSE
		BEGIN
			SELECT * FROM [dbo].[AppointmentLog] l
		END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_Setting_Transaction]...';


GO
ALTER PROC [dbo].[usp_Setting_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Title NVARCHAR(70) = '',
	@Description NVARCHAR(150) = '',
	@Keyword NVARCHAR(150) = '',
	@Membership BIT = 1,
	@DefaultRole SMALLINT = 1,
	@LoginURL VARCHAR(256) = '',
	@LockedIPNoteDefault NVARCHAR(150) = '',
	@IsSaveCanceledAppointment BIT = 1,
	@AppointmentIntervalTime INT = 15,
	@AppointmentStartTime INT = 8,
	@AppointmentEndTime INT = 5
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF EXISTS(SELECT TOP 1 1 FROM [dbo].[Setting])
		BEGIN
			UPDATE 
				[dbo].[Setting]
			SET 
				[Title] = @Title, 
				[Keyword] = @Keyword, 
				[Description] =  @Description, 
				[Membership] = @Membership,
				[DefaultRole] = @DefaultRole,
				[LoginURL] = @LoginURL,
				[LockedIPNoteDefault] = @LockedIPNoteDefault,
				[IsSaveCanceledAppointment] = @IsSaveCanceledAppointment,
				[AppointmentIntervalTime] = @AppointmentIntervalTime,
				[AppointmentStartTime] = @AppointmentStartTime,
				[AppointmentEndTime] = @AppointmentEndTime
			--WHERE [Id] = 1
		END
		ELSE
		BEGIN
			INSERT INTO 
				[dbo].[Setting] 
			VALUES(
				@Title, 
				@Description, 
				@Keyword, 
				@Membership, 
				@DefaultRole, 
				@LoginURL, 
				@LockedIPNoteDefault,
				@IsSaveCanceledAppointment,
				@AppointmentIntervalTime,
				@AppointmentStartTime,
				@AppointmentEndTime)
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_AppointmentLog_Confirm]...';


GO
CREATE PROC [dbo].[usp_AppointmentLog_Confirm]
(
	@Action CHAR(1) = 'I',
	@Id UNIQUEIDENTIFIER,
	@Date DATE = '',
	@Time int = 480,
	@PhysicianId NVARCHAR(128) = '',
	@PatientId NVARCHAR(128) = '',
	@Symptom NVARCHAR(300) = '',
	@PatientName NVARCHAR(50) = '',
	@PatientAddress NVARCHAR(150) = '',
	@PatientEmail VARCHAR(256) = '',
	@PatientPhone VARCHAR(20) = '',
	@PatientGender TINYINT = 1,
	@PatientDoB DATE = NULL,
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)

	BEGIN TRY
		BEGIN TRAN;

			IF @Status = 2
			BEGIN
				SET @ModifiedDate = [dbo].[ufnGetDate]()
				SET @CreatedDate = @ModifiedDate

				SELECT * INTO #AppointmentLogById
				FROM [dbo].[AppointmentLog] l
				WHERE l.Id = @Id

				--Post data to Appointment
				DECLARE @ColectionId INT
				INSERT [dbo].[Appointment]([PhysicianId], [PatientId], [Symptom], [CreatedDate], [ModifiedDate], [ModifedUser])
				SELECT item.PhysicianId, item.PatientId, item.Symptom, @CreatedDate, @ModifiedDate, N'Patient Test' FROM #AppointmentLogById item
				SET @ColectionId = (SELECT SCOPE_IDENTITY())

				--Generation Number
				SELECT TOP 1 s.AppointmentIntervalTime, s.AppointmentStartTime INTO #GenerationTime
				FROM [dbo].[Setting] s
				--
				DECLARE @AppointmentNo INT
				DECLARE @IntervalTime INT
				DECLARE @StartTime INT
				SET @IntervalTime = (SELECT t.AppointmentIntervalTime FROM #GenerationTime t)
				SET @StartTime = (SELECT t.AppointmentStartTime FROM #GenerationTime t)
				SET @AppointmentNo = [dbo].[ufnGenerationNumber](@Time, @IntervalTime, @StartTime)

				--Post data to AppointmentCollection
				INSERT [dbo].[AppointmentCollection]([Id], [Date], [Time], [AppointmentNo], [PatientName], [PatientAddress], [PatientEmail], [PatientPhone], [PatientGender], [PatientDoB], [Status])
				SELECT @ColectionId, item.[Date], item.[Time], @AppointmentNo, item.PatientName, item.PatientAddress, item.PatientEmail, item.PatientPhone, item.PatientGender, item.PatientDoB, 2 FROM #AppointmentLogById item

				UPDATE [dbo].[AppointmentLog] SET [Status] = 2 WHERE [Id] = @Id

				-- DROP Temp Table
				DROP TABLE #AppointmentLogById
				DROP TABLE #GenerationTime

				SET @return = 1
			END

			IF @Status = 3
			BEGIN
				DECLARE @isCheck BIT
				SET @isCheck = (SELECT TOP 1 s.IsSaveCanceledAppointment FROM [dbo].[Setting] s)
				IF @isCheck = 1
				BEGIN
					UPDATE [dbo].[AppointmentLog]
					SET [Status] = 3
					WHERE [Id] = @Id

					SET @return = 1
				END
				ELSE
				BEGIN
					DELETE FROM [dbo].[AppointmentLog] WHERE [Id] = @Id

					SET @return = 1
				END
			END
		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_AppointmentLog_Search]...';


GO
CREATE PROC [dbo].[usp_AppointmentLog_Search](
	@Status INT = 0,
	@FromDate DATE = '',
	@ToDate DATE = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	BEGIN TRY
		SELECT * FROM [dbo].[AppointmentLog] l
		WHERE 
			(l.[Status] = @Status OR @Status IS NULL)
			AND
			(
				(l.[Date] BETWEEN @FromDate AND @ToDate)
				OR
				(@FromDate IS NULL AND @ToDate IS NULL)
				OR
				(@FromDate IS NULL AND l.[Date] <= @ToDate)
				OR
				(@ToDate IS NULL AND l.[Date] >= @FromDate)
			)
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Refreshing [dbo].[usp_Login]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Login]';


GO
PRINT N'Refreshing [dbo].[usp_Role]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Role]';


GO
PRINT N'Refreshing [dbo].[usp_Role_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Role_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_UserRole_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_UserRole_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_Organization_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Organization_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_spa_User]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_spa_User]';


GO
PRINT N'Refreshing [dbo].[usp_spa_User_HasScheduleExamine]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_spa_User_HasScheduleExamine]';


GO
PRINT N'Refreshing [dbo].[usp_User]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_User]';


GO
PRINT N'Refreshing [dbo].[usp_User_ChangePassword]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_User_ChangePassword]';


GO
PRINT N'Refreshing [dbo].[usp_User_HasScheduleExamine]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_User_HasScheduleExamine]';


GO
PRINT N'Refreshing [dbo].[usp_Users_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Users_Transaction]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[UserRole] WITH CHECK CHECK CONSTRAINT [FK_UserRole_Role];

ALTER TABLE [dbo].[UserRole] WITH CHECK CHECK CONSTRAINT [FK_UserRole_Users];

ALTER TABLE [dbo].[Users] WITH CHECK CHECK CONSTRAINT [FK_Users_Organization];

ALTER TABLE [dbo].[Permission] WITH CHECK CHECK CONSTRAINT [FK_Permission_Module];

ALTER TABLE [dbo].[UserGroup] WITH CHECK CHECK CONSTRAINT [FK_UserGroup_Group];

ALTER TABLE [dbo].[UserGroup] WITH CHECK CHECK CONSTRAINT [FK_UserGroup_Users];


GO
PRINT N'Update complete.';


GO
