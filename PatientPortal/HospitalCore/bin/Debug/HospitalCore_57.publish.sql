/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Rename refactoring operation with key ab6e668a-6e38-444b-a846-90db94da155e is skipped, element [dbo].[UserInfo].[Id] (SqlSimpleColumn) will not be renamed to UserId';


GO
PRINT N'Rename refactoring operation with key ff6953e3-13e5-421a-b5ed-b6f177afe1cc is skipped, element [dbo].[UserProfile].[Detail] (SqlSimpleColumn) will not be renamed to Descriptions';


GO
PRINT N'Dropping unnamed constraint on [dbo].[Survey]...';


GO
ALTER TABLE [dbo].[Survey] DROP CONSTRAINT [DF__Survey__IsBradin__2334397B];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Survey]...';


GO
ALTER TABLE [dbo].[Survey] DROP CONSTRAINT [DF__Survey__IsSurvey__24285DB4];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Survey]...';


GO
ALTER TABLE [dbo].[Survey] DROP CONSTRAINT [DF__Survey__IsActive__251C81ED];


GO
PRINT N'Dropping [dbo].[FK_SurveyQuestions_Survey]...';


GO
ALTER TABLE [dbo].[SurveyQuestions] DROP CONSTRAINT [FK_SurveyQuestions_Survey];


GO
PRINT N'Starting rebuilding table [dbo].[Survey]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Survey] (
    [Id]             VARCHAR (128)  NOT NULL,
    [Title]          NVARCHAR (150) NOT NULL,
    [Description]    NVARCHAR (MAX) NOT NULL,
    [Message]        NVARCHAR (300) NOT NULL,
    [IsBrading]      BIT            DEFAULT 1 NULL,
    [Logo]           VARCHAR (256)  NULL,
    [URL]            VARCHAR (256)  NULL,
    [IsSurveyInvite] BIT            DEFAULT 0 NULL,
    [IsPublic]       BIT            DEFAULT 0 NULL,
    [IsActive]       BIT            DEFAULT 0 NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Survey])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Survey] ([Id], [Title], [Description], [Message], [IsBrading], [Logo], [IsSurveyInvite], [IsActive])
        SELECT   [Id],
                 [Title],
                 [Description],
                 [Message],
                 [IsBrading],
                 [Logo],
                 [IsSurveyInvite],
                 [IsActive]
        FROM     [dbo].[Survey]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[Survey];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Survey]', N'Survey';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[UserProfile]...';


GO
CREATE TABLE [dbo].[UserProfile] (
    [UserId]       NVARCHAR (128) NOT NULL,
    [TabCode]      VARCHAR (10)   NOT NULL,
    [Descriptions] NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC, [TabCode] ASC)
);


GO
PRINT N'Creating [dbo].[FK_SurveyQuestions_Survey]...';


GO
ALTER TABLE [dbo].[SurveyQuestions] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyQuestions_Survey] FOREIGN KEY ([SurveyId]) REFERENCES [dbo].[Survey] ([Id]);


GO
PRINT N'Creating [dbo].[ufn_SpitString]...';


GO
CREATE FUNCTION [dbo].[ufn_SpitString]
(
	@Text       VARCHAR(MAX),
	@Separator  VARCHAR(MAX)
)
RETURNS @tableOut TABLE(VALUE VARCHAR(MAX))
AS
BEGIN
	DECLARE @value  VARCHAR(MAX),
	        @Pos    INT
	
	SET @Text = LTRIM(RTRIM(@Text)) + @Separator
	SET @Pos = CHARINDEX(@Separator, @Text, LEN(@Separator))
	
	IF REPLACE(@Text, @Separator, '') <> ''
	BEGIN
	    WHILE @Pos > 0
	    BEGIN
	        SET @value = LTRIM(RTRIM(LEFT(@Text, @Pos - 1)))
	        IF @value <> ''
	        BEGIN
	            INSERT INTO @tableOut(VALUE) VALUES(@value)
	        END
	        
	        SET @Text = RIGHT(@Text, LEN(@Text) -(@Pos + LEN(@Separator) - 1))
	        SET @Pos = CHARINDEX(@Separator, @Text, LEN(@Separator))
	    END
	END
	
	RETURN;
END
GO
PRINT N'Altering [dbo].[usp_AppointmentLog]...';


GO
ALTER PROC [dbo].[usp_AppointmentLog](
	@Id UniqueIdentifier
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	--cast(cast(0 as binary) as uniqueidentifier) convert zero to uniqueidentifier
	BEGIN TRY
		IF (@Id IS NOT NULL)
		BEGIN
			SELECT l.*,
				us.Name PhysicianName
				--un.Name PatientName,
			FROM [dbo].[AppointmentLog] l
				LEFT JOIN [dbo].[Users] us ON us.Id = l.PhysicianId
				--LEFT JOIN [dbo].[Users] un ON un.Id = l.PatientId
			WHERE l.Id = @Id
		END
		ELSE
		BEGIN
			SELECT l.*,
				us.Name PhysicianName
				--un.Name PatientName,
			FROM [dbo].[AppointmentLog] l
				LEFT JOIN [dbo].[Users] us ON us.Id = l.PhysicianId
				--LEFT JOIN [dbo].[Users] un ON un.Id = l.PatientId
		END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_AppointmentLog_Confirm]...';


GO
ALTER PROC [dbo].[usp_AppointmentLog_Confirm]
(
	@Action CHAR(1) = 'I',
	@Id UNIQUEIDENTIFIER,
	@Date DATE = '',
	@Time int = 480,
	@PhysicianId NVARCHAR(128) = '',
	@PatientId NVARCHAR(128) = '',
	@Symptom NVARCHAR(300) = '',
	@PatientName NVARCHAR(50) = '',
	@PatientAddress NVARCHAR(150) = '',
	@PatientEmail VARCHAR(256) = '',
	@PatientPhone VARCHAR(20) = '',
	@PatientGender TINYINT = 1,
	@PatientDoB DATE = NULL,
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)

	BEGIN TRY
		BEGIN TRAN;
			-- Confirm accept
			IF @Status = 2
			BEGIN
				SET @ModifiedDate = [dbo].[ufnGetDate]()
				SET @CreatedDate = @ModifiedDate

				SELECT * INTO #AppointmentLogById
				FROM [dbo].[AppointmentLog] l
				WHERE l.Id = @Id

				--Post data to Appointment
				DECLARE @ColectionId INT
				INSERT [dbo].[Appointment]([PhysicianId], [PatientId], [Symptom], [CreatedDate], [ModifiedDate], [ModifedUser])
				SELECT item.PhysicianId, item.PatientId, item.Symptom, @CreatedDate, @ModifiedDate, N'Patient Test' FROM #AppointmentLogById item
				SET @ColectionId = (SELECT SCOPE_IDENTITY())

				--Generation Number
				SELECT TOP 1 s.AppointmentIntervalTime, s.AppointmentStartTime INTO #GenerationTime
				FROM [dbo].[Setting] s
				--
				DECLARE @AppointmentNo INT
				DECLARE @IntervalTime INT
				DECLARE @StartTime INT
				SET @IntervalTime = (SELECT t.AppointmentIntervalTime FROM #GenerationTime t)
				SET @StartTime = (SELECT t.AppointmentStartTime FROM #GenerationTime t)
				SET @AppointmentNo = [dbo].[ufnGenerationNumber](@Time, @IntervalTime, @StartTime)

				--Post data to AppointmentCollection
				INSERT [dbo].[AppointmentCollection]([Id], [Date], [Time], [AppointmentNo], [PatientName], [PatientAddress], [PatientEmail], [PatientPhone], [PatientGender], [PatientDoB], [Status])
				SELECT @ColectionId, item.[Date], item.[Time], @AppointmentNo, ISNULL(item.PatientName, N'NA'), ISNULL(item.PatientAddress, N'NA'), item.PatientEmail, item.PatientPhone, item.PatientGender, item.PatientDoB, 2 FROM #AppointmentLogById item

				UPDATE [dbo].[AppointmentLog] SET [Status] = 2 WHERE [Id] = @Id

				-- DROP Temp Table
				DROP TABLE #AppointmentLogById
				DROP TABLE #GenerationTime

				SET @return = 1
			END

			-- Confirm cancel
			IF @Status = 3
			BEGIN
				DECLARE @isCheck BIT
				SET @isCheck = (SELECT TOP 1 s.IsSaveCanceledAppointment FROM [dbo].[Setting] s)
				IF @isCheck = 1
				BEGIN
					UPDATE [dbo].[AppointmentLog]
					SET [Status] = 3
					WHERE [Id] = @Id

					SET @return = 1
				END
				ELSE
				BEGIN
					DELETE FROM [dbo].[AppointmentLog] WHERE [Id] = @Id

					SET @return = 1
				END
			END
		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_AppointmentLog_ConfirmFast]...';


GO
CREATE PROC [dbo].[usp_AppointmentLog_ConfirmFast]
(
	@Id VARCHAR(MAX),
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)

	BEGIN TRY
		BEGIN TRAN;
			-- Confirm accept
			IF @Status = 2
			BEGIN
				SET @ModifiedDate = [dbo].[ufnGetDate]()
				SET @CreatedDate = @ModifiedDate

				DECLARE @Ids VARCHAR(50)
				DECLARE IDs CURSOR FOR
				SELECT VALUE
				FROM   [dbo].[ufn_SpitString](@Id,',')
				OPEN IDs
				FETCH next FROM IDs INTO @Ids
				WHILE @@FETCH_STATUS = 0
				BEGIN

				--Get item by id
				SELECT * INTO #AppointmentLogById
				FROM [dbo].[AppointmentLog] l
				WHERE l.Id = @Ids

				--Post data to Appointment
				DECLARE @ColectionId INT
				INSERT [dbo].[Appointment]([PhysicianId], [PatientId], [Symptom], [CreatedDate], [ModifiedDate], [ModifedUser])
				SELECT item.PhysicianId, item.PatientId, item.Symptom, @CreatedDate, @ModifiedDate, N'Patient Test' FROM #AppointmentLogById item
				SET @ColectionId = (SELECT SCOPE_IDENTITY())

				--Generation Number
				SELECT TOP 1 s.AppointmentIntervalTime, s.AppointmentStartTime INTO #GenerationTime
				FROM [dbo].[Setting] s

				DECLARE @AppointmentNo INT
				DECLARE @IntervalTime INT
				DECLARE @StartTime INT
				DECLARE @Time INT

				SET @IntervalTime = (SELECT t.AppointmentIntervalTime FROM #GenerationTime t)
				SET @StartTime = (SELECT t.AppointmentStartTime FROM #GenerationTime t)
				SET @Time = (SELECT t.[Time] FROM [dbo].[AppointmentLog] t WHERE t.Id = @Ids )

				SET @AppointmentNo = [dbo].[ufnGenerationNumber](@Time, @IntervalTime, @StartTime)

				--Post data to AppointmentCollection
				INSERT [dbo].[AppointmentCollection]([Id], [Date], [Time], [AppointmentNo], [PatientName], [PatientAddress], [PatientEmail], [PatientPhone], [PatientGender], [PatientDoB], [Status])
				SELECT @ColectionId, item.[Date], item.[Time], @AppointmentNo, ISNULL(item.PatientName, N'NA'), ISNULL(item.PatientAddress, N'NA'), item.PatientEmail, item.PatientPhone, item.PatientGender, item.PatientDoB, 2 FROM #AppointmentLogById item

				UPDATE [dbo].[AppointmentLog] SET [Status] = 2 WHERE [Id] = @Ids

				-- DROP Temp Table
				DROP TABLE #AppointmentLogById
				DROP TABLE #GenerationTime

				
				FETCH next FROM IDs INTO @Ids
				END
				CLOSE IDs
				DEALLOCATE IDs

				SET @return = 1
			END

			-- Confirm cancel
			IF @Status = 3
			BEGIN
				DECLARE @isCheck BIT
				SET @isCheck = (SELECT TOP 1 s.IsSaveCanceledAppointment FROM [dbo].[Setting] s)
				IF @isCheck = 1
				BEGIN
					UPDATE [dbo].[AppointmentLog]
					SET [Status] = 3
					WHERE [Id] IN (@Id)

					SET @return = 1
				END
				ELSE
				BEGIN
					DELETE FROM [dbo].[AppointmentLog] WHERE [Id] IN (@Id)

					SET @return = 1
				END
			END
		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_EmailMarketing]...';


GO
CREATE PROCEDURE [dbo].[usp_EmailMarketing]
	@Id INT
AS
	IF(@Id > 0)
	BEGIN
		SELECT * FROM [dbo].[EmailMarketing]
		WHERE [Id] = @Id
	END
	ELSE
	BEGIN
		SELECT * FROM [dbo].[EmailMarketing]
	END
RETURN 0
GO
PRINT N'Creating [dbo].[usp_EmailMarketing_Transaction]...';


GO
CREATE PROC [dbo].[usp_EmailMarketing_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Name NVARCHAR(128) = '',
	@Detail NVARCHAR(MAX) = '',
	@IsUsed BIT = 0,
	@CreatedUser NVARCHAR(128),
	@CreatedDate VARCHAR(20),
	@ModifiedUser NVARCHAR(128),
	@ModifiedDate VARCHAR(20)
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[EmailMarketing] VALUES(@Name, @Detail, @IsUsed, @CreatedUser, @CreatedDate, @ModifiedUser, @ModifiedDate)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[EmailMarketing]
				SET [Name] = @Name, [Detail] = @Detail, [IsUsed] = @IsUsed, [CreatedUser] = @CreatedUser, [CreatedDate] = @CreatedDate
				WHERE [Id] = @Id  

				SET @return = @Id
			END

			IF @Action = 'D' --DELETE
			BEGIN
				BEGIN
					DELETE FROM [dbo].[EmailMarketing]
					WHERE [Id] = @Id

					SET @return = @Id
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_User_ByGroupType]...';


GO
CREATE PROCEDURE [dbo].[usp_User_ByGroupType]
	@GroupType NVARCHAR(128)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		-- là Bệnh nhân
		IF @GroupType = 'BenhNhan'
		BEGIN
			SELECT DISTINCT *
			FROM   [dbo].Users u
			WHERE  u.PatientId <> NULL
		END

		-- là Bác sĩ
		IF @GroupType = 'BacSi'
		BEGIN
			SELECT DISTINCT *
			FROM   [dbo].Users u
			WHERE  u.IsDoctor = 1
		END

		-- là Nội bộ
		IF @GroupType = 'NoiBo'
		BEGIN
			SELECT DISTINCT *
			FROM   [dbo].Users u
			WHERE  u.PatientId = NULL
		END

		-- Tất cả
		IF @GroupType = 'TatCa'
		BEGIN
			SELECT DISTINCT *
			FROM   [dbo].Users u
		END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_User_Query]...';


GO
CREATE PROC [dbo].[usp_User_Query]
	@Id NVARCHAR(128) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
	IF(@Id <> '')
		SELECT * FROM [dbo].[Users]
		WHERE Id = @Id
	ELSE
	BEGIN
		SELECT * FROM [dbo].[Users]
	END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ab6e668a-6e38-444b-a846-90db94da155e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ab6e668a-6e38-444b-a846-90db94da155e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ff6953e3-13e5-421a-b5ed-b6f177afe1cc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ff6953e3-13e5-421a-b5ed-b6f177afe1cc')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[SurveyQuestions] WITH CHECK CHECK CONSTRAINT [FK_SurveyQuestions_Survey];


GO
PRINT N'Update complete.';


GO
