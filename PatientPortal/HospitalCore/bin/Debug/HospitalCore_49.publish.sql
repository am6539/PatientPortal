/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The column [dbo].[Setting].[AppointmentEndTime] on table [dbo].[Setting] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Setting].[AppointmentStartTime] on table [dbo].[Setting] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Setting])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Users].[AccessFailedCount] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Users].[EmailConfirmed] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Users].[LockoutEnabled] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Users].[PhoneNumberConfirmed] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Users].[TwoFactorEnabled] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Users].[UserName] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column DateOfBirth on table [dbo].[Users] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column HomePhone on table [dbo].[Users] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column Image on table [dbo].[Users] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Users])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping [dbo].[AppointmentLog].[idxAppointmentLogPhysician]...';


GO
DROP INDEX [idxAppointmentLogPhysician]
    ON [dbo].[AppointmentLog];


GO
PRINT N'Dropping [dbo].[DF__USERS__Gender__108B795B]...';


GO
ALTER TABLE [dbo].[Users] DROP CONSTRAINT [DF__USERS__Gender__108B795B];


GO
PRINT N'Dropping [dbo].[DF__USERS__Status__117F9D94]...';


GO
ALTER TABLE [dbo].[Users] DROP CONSTRAINT [DF__USERS__Status__117F9D94];


GO
PRINT N'Dropping [dbo].[FK_UserGroup_Users]...';


GO
ALTER TABLE [dbo].[UserGroup] DROP CONSTRAINT [FK_UserGroup_Users];


GO
PRINT N'Dropping [dbo].[FK_UserRole_Users]...';


GO
ALTER TABLE [dbo].[UserRole] DROP CONSTRAINT [FK_UserRole_Users];


GO
PRINT N'Dropping [dbo].[FK_Users_Organization]...';


GO
ALTER TABLE [dbo].[Users] DROP CONSTRAINT [FK_Users_Organization];


GO
PRINT N'Altering [dbo].[AppointmentLog]...';


GO
ALTER TABLE [dbo].[AppointmentLog] ALTER COLUMN [PhysicianId] NVARCHAR (128) NOT NULL;


GO
PRINT N'Creating [dbo].[AppointmentLog].[idxAppointmentLogPhysician]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentLogPhysician]
    ON [dbo].[AppointmentLog]([PhysicianId] ASC);


GO
PRINT N'Altering [dbo].[Setting]...';


GO
ALTER TABLE [dbo].[Setting]
    ADD [AppointmentStartTime] INT NOT NULL,
        [AppointmentEndTime]   INT NOT NULL;


GO
PRINT N'Starting rebuilding table [dbo].[Users]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Users] (
    [Id]                   NVARCHAR (128) NOT NULL,
    [Email]                NVARCHAR (256) NULL,
    [EmailConfirmed]       BIT            NOT NULL,
    [PasswordHash]         NVARCHAR (MAX) NULL,
    [SecurityStamp]        NVARCHAR (MAX) NULL,
    [PhoneNumber]          NVARCHAR (MAX) NULL,
    [PhoneNumberConfirmed] BIT            NOT NULL,
    [TwoFactorEnabled]     BIT            NOT NULL,
    [LockoutEndDateUtc]    DATETIME       NULL,
    [LockoutEnabled]       BIT            NOT NULL,
    [AccessFailedCount]    INT            NOT NULL,
    [UserName]             NVARCHAR (256) NOT NULL,
    [OrganizationId]       SMALLINT       NOT NULL,
    [Tags]                 NVARCHAR (250) NOT NULL,
    [HomePhone]            VARCHAR (20)   NOT NULL,
    [IsAdmin]              BIT            NOT NULL,
    [IsDoctor]             BIT            NOT NULL,
    [Gender]               TINYINT        NOT NULL,
    [Code]                 CHAR (20)      NOT NULL,
    [Name]                 NVARCHAR (100) NOT NULL,
    [PatientId]            NVARCHAR (128) NOT NULL,
    [DateOfBirth]          DATE           NOT NULL,
    [Image]                VARCHAR (256)  NOT NULL,
    [Status]               BIT            NOT NULL,
    UNIQUE NONCLUSTERED ([Email] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_PK_USERS1] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UQ__USERS__A9D1053429B4C0C01] UNIQUE NONCLUSTERED ([Email] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Users])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Users] ([Id], [Name], [Code], [Email], [PasswordHash], [PhoneNumber], [HomePhone], [DateOfBirth], [Gender], [Image], [OrganizationId], [Status], [PatientId], [IsAdmin], [IsDoctor], [Tags])
        SELECT   [Id],
                 [Name],
                 [Code],
                 [Email],
                 [PasswordHash],
                 [PhoneNumber],
                 [HomePhone],
                 [DateOfBirth],
                 [Gender],
                 [Image],
                 [OrganizationId],
                 [Status],
                 [PatientId],
                 [IsAdmin],
                 [IsDoctor],
                 [Tags]
        FROM     [dbo].[Users]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[Users];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Users]', N'Users';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_USERS1]', N'PK_USERS', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UQ__USERS__A9D1053429B4C0C01]', N'UQ__USERS__A9D1053429B4C0C0', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Users].[idxUserAccess]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [idxUserAccess]
    ON [dbo].[Users]([Code] ASC, [Email] ASC);


GO
PRINT N'Creating [dbo].[FK_UserGroup_Users]...';


GO
ALTER TABLE [dbo].[UserGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_UserGroup_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserRole_Users]...';


GO
ALTER TABLE [dbo].[UserRole] WITH NOCHECK
    ADD CONSTRAINT [FK_UserRole_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Users_Organization]...';


GO
ALTER TABLE [dbo].[Users] WITH NOCHECK
    ADD CONSTRAINT [FK_Users_Organization] FOREIGN KEY ([OrganizationId]) REFERENCES [dbo].[Organization] ([Id]);


GO
PRINT N'Altering [dbo].[usp_Setting_Transaction]...';


GO
ALTER PROC [dbo].[usp_Setting_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Title NVARCHAR(70) = '',
	@Description NVARCHAR(150) = '',
	@Keyword NVARCHAR(150) = '',
	@Membership BIT = 1,
	@DefaultRole SMALLINT = 1,
	@LoginURL VARCHAR(256) = '',
	@LockedIPNoteDefault NVARCHAR(150) = '',
	@IsSaveCanceledAppointment BIT = 1,
	@AppointmentIntervalTime INT = 15,
	@AppointmentStartTime INT = 8,
	@AppointmentEndTime INT = 5
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF EXISTS(SELECT TOP 1 1 FROM [dbo].[Setting])
		BEGIN
			UPDATE 
				[dbo].[Setting]
			SET 
				[Title] = @Title, 
				[Keyword] = @Keyword, 
				[Description] =  @Description, 
				[Membership] = @Membership,
				[DefaultRole] = @DefaultRole,
				[LoginURL] = @LoginURL,
				[LockedIPNoteDefault] = @LockedIPNoteDefault,
				[IsSaveCanceledAppointment] = @IsSaveCanceledAppointment,
				[AppointmentIntervalTime] = @AppointmentIntervalTime,
				[AppointmentStartTime] = @AppointmentStartTime,
				[AppointmentEndTime] = @AppointmentEndTime
			WHERE [Id] = 1
		END
		ELSE
		BEGIN
			INSERT INTO 
				[dbo].[Setting] 
			VALUES(
				@Title, 
				@Description, 
				@Keyword, 
				@Membership, 
				@DefaultRole, 
				@LoginURL, 
				@LockedIPNoteDefault,
				@IsSaveCanceledAppointment,
				@AppointmentIntervalTime,
				@AppointmentStartTime,
				@AppointmentEndTime)
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_spa_User]...';


GO
ALTER PROCEDURE [dbo].[usp_spa_User]
	@Id NVARCHAR(128) = '',
	@Type tinyint = 0,
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
	IF(@Id <> '')
		SELECT * FROM [dbo].[Users]
		WHERE Id = @Id
	ELSE
	BEGIN
		IF(@Type = 1)
			SELECT * FROM [dbo].[Users]
			WHERE IsAdmin = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
		IF(@Type = 2)
			SELECT * FROM [dbo].[Users]
			WHERE IsDoctor = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
							   AND (Tags like '%' + @Search + '%' OR @Search is null)
	END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_spa_User_HasScheduleExamine]...';


GO
ALTER PROCEDURE [dbo].usp_spa_User_HasScheduleExamine
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT DISTINCT 
				dbo.Users.*
		FROM    dbo.Schedule INNER JOIN
				dbo.Users ON dbo.Schedule.UserId = dbo.Users.Id
		WHERE   (dbo.Users.IsDoctor = 1)
				AND (Name like '%' + @Search + '%' OR @Search is null)
				AND (Tags like '%' + @Search + '%' OR @Search is null)
				AND IsExamine = 1
				AND GETDATE() >= [Start]

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_User]...';


GO
ALTER PROC [dbo].[usp_User]
	@Id NVARCHAR(128) = '',
	@Type tinyint = 0,
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
	IF(@Id <> '')
		SELECT * FROM [dbo].[Users]
		WHERE Id = @Id
	ELSE
	BEGIN
		IF(@Type = 1)
			SELECT * FROM [dbo].[Users]
			WHERE IsAdmin = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
		IF(@Type = 2)
			SELECT * FROM [dbo].[Users]
			WHERE IsDoctor = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
							   AND (Tags like '%' + @Search + '%' OR @Search is null)
	END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_User_HasScheduleExamine]...';


GO
ALTER PROCEDURE [dbo].[usp_User_HasScheduleExamine]
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT DISTINCT 
				dbo.Users.*
		FROM    dbo.Schedule INNER JOIN
				dbo.Users ON dbo.Schedule.UserId = dbo.Users.Id
		WHERE   (dbo.Users.IsDoctor = 1)
				AND (Name like '%' + @Search + '%' OR @Search is null)
				AND (Tags like '%' + @Search + '%' OR @Search is null)
				AND IsExamine = 1
				AND GETDATE() >= [Start]

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_Users_Transaction]...';


GO
ALTER PROCEDURE [dbo].[usp_Users_Transaction]
	@Action CHAR(1) = 'I',
	@Id INT,
	@Name NVARCHAR(32),
	@Code CHAR(20),
	@Email NVARCHAR(256),
	@PasswordHash VARCHAR(60),
	@PhoneNumber VARCHAR(20),
	@HomePhone VARCHAR(20),
	@DateOfBirth DATE,
	@Gender TINYINT,
	@Image VARCHAR(256),
	@OrganizationId SMALLINT,
	@Status BIT,
	@PatientId NVARCHAR(128) = '',
	@IsAdmin BIT,
	@IsDoctor BIT,
	@Tag NVARCHAR(150) = ''
AS BEGIN
	SET NOCOUNT ON
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Users WHERE [Email] = @Email)
					INSERT INTO [dbo].[Users](Id, Name, Code, Email, PasswordHash, PhoneNumber, HomePhone, DateOfBirth, Gender, [Image], OrganizationId, [Status], PatientId, IsAdmin, IsDoctor, Tags)
					VALUES(@Id, @Name, @Code, @Email, @PasswordHash, @PhoneNumber, @HomePhone, 
					@DateOfBirth, @Gender, @Image, @OrganizationId, @Status, @PatientId,
					@IsAdmin, @IsDoctor, @Tag)
				ELSE
					SET @return = 0
			IF @Action = 'U'
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Id] = @Id)
					UPDATE [dbo].[Users]
					SET [Name] = @Name,
					[Code] = @Code,
					[PhoneNumber] = @PhoneNumber,
					[HomePhone] = @HomePhone,
					[DateOfBirth] = @DateOfBirth,
					[Gender] = @Gender,
					[Image] = @Image,
					[OrganizationId] = @OrganizationId,
					[PatientId] = @PatientId,
					[IsAdmin] = @IsAdmin,
					[IsDoctor] = @IsDoctor,
					[Tags] = @Tag
					WHERE [Id] = @Id
				ELSE
					SET @return = 0
			IF @Action = 'D'
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Id] = @Id)
					DELETE FROM [dbo].[Users]
					WHERE [Id] = @Id
				ELSE
					SET @return = 0
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_Schedule]...';


GO
ALTER PROCEDURE [dbo].[usp_Schedule]
	@Id INT = 0,
	@UserId NVARCHAR(128) = '',
	@Start DATETIME,
	@End DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF(@Id > 0)
			SELECT *
			FROM [dbo].Schedule
			WHERE Id = @Id
			AND UserId = @UserId
		ELSE
			SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND [Start] 
			BETWEEN CAST(@Start AS DateTime)
			AND CAST(@End + '23:59:59:999' AS DateTime)
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_ScheduleExamine]...';


GO
ALTER PROCEDURE [dbo].[usp_ScheduleExamine]
	@UserId NVARCHAR(128) = '',
	@Start DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND [Start] 
			BETWEEN CAST(@Start AS DateTime)
			AND CAST(@Start + '23:59:59:999' AS DateTime)
			AND [IsExamine] = 1
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_spa_Schedule]...';


GO
ALTER PROCEDURE [dbo].[usp_spa_Schedule]
	@Id INT = 0,
	@UserId NVARCHAR(128) = '',
	@Start DATETIME,
	@End DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF(@Id > 0)
			SELECT *
			FROM [dbo].Schedule
			WHERE Id = @Id
			AND UserId = @UserId
		ELSE
			SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND [Start] 
			BETWEEN CAST(@Start AS DateTime)
			AND CAST(@End + '23:59:59:999' AS DateTime)
			AND IsExamine = 1
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Refreshing [dbo].[usp_AppointmentLog]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_AppointmentLog]';


GO
PRINT N'Refreshing [dbo].[usp_AppointmentLog_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_AppointmentLog_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_Setting]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Setting]';


GO
PRINT N'Refreshing [dbo].[usp_Login]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Login]';


GO
PRINT N'Refreshing [dbo].[usp_Organization_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Organization_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_User_ChangePassword]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_User_ChangePassword]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[UserGroup] WITH CHECK CHECK CONSTRAINT [FK_UserGroup_Users];

ALTER TABLE [dbo].[UserRole] WITH CHECK CHECK CONSTRAINT [FK_UserRole_Users];

ALTER TABLE [dbo].[Users] WITH CHECK CHECK CONSTRAINT [FK_Users_Organization];


GO
PRINT N'Update complete.';


GO
