/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The column [dbo].[Setting].[LockedIPNoteDefault] on table [dbo].[Setting] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Setting])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Users].[IsAdmin] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Users].[IsDoctor] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Users].[Tags] on table [dbo].[Users] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Users])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Rename refactoring operation with key 5a0e568b-81f0-45cd-b7d4-9212651add5a is skipped, element [dbo].[Schedule].[Alarm] (SqlSimpleColumn) will not be renamed to IsAlarm';


GO
PRINT N'Rename refactoring operation with key 97e4ad87-7a6a-436b-bd86-3ec5bb03fda6 is skipped, element [dbo].[Schedule].[Is] (SqlSimpleColumn) will not be renamed to IsExamine';


GO
PRINT N'Altering [dbo].[Setting]...';


GO
ALTER TABLE [dbo].[Setting]
    ADD [LockedIPNoteDefault] NVARCHAR (150) NOT NULL;


GO
PRINT N'Altering [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD [PatientId] CHAR (10)      NULL,
        [IsAdmin]   BIT            NOT NULL,
        [IsDoctor]  BIT            NOT NULL,
        [Tags]      NVARCHAR (150) NOT NULL;


GO
PRINT N'Creating [dbo].[Appointment]...';


GO
CREATE TABLE [dbo].[Appointment] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [Date]         DATE           NOT NULL,
    [Time]         INT            NOT NULL,
    [PhysicianId]  INT            NOT NULL,
    [PatientId]    INT            NOT NULL,
    [Symptom]      NVARCHAR (300) NOT NULL,
    [CreatedDate]  VARCHAR (20)   NOT NULL,
    [ModifiedDate] VARCHAR (20)   NOT NULL,
    [Status]       TINYINT        NOT NULL,
    CONSTRAINT [PK_Appointment] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Appointment].[idxAppointmentDate]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentDate]
    ON [dbo].[Appointment]([Date] ASC);


GO
PRINT N'Creating [dbo].[Appointment].[idxAppointmentPatient]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentPatient]
    ON [dbo].[Appointment]([PatientId] ASC);


GO
PRINT N'Creating [dbo].[Appointment].[idxAppointmentPhysician]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentPhysician]
    ON [dbo].[Appointment]([PhysicianId] ASC);


GO
PRINT N'Creating [dbo].[BlockedIpHandler]...';


GO
CREATE TABLE [dbo].[BlockedIpHandler] (
    [Id]       INT            IDENTITY (1, 1) NOT NULL,
    [IP]       VARCHAR (50)   NOT NULL,
    [Note]     NVARCHAR (150) NOT NULL,
    [IsLocked] BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Schedule]...';


GO
CREATE TABLE [dbo].[Schedule] (
    [Id]        INT            NOT NULL,
    [Title]     NVARCHAR (50)  NOT NULL,
    [Priority]  TINYINT        NOT NULL,
    [Detail]    NVARCHAR (300) NOT NULL,
    [IsAlarm]   BIT            NOT NULL,
    [Date]      DATE           NOT NULL,
    [From]      INT            NOT NULL,
    [To]        INT            NOT NULL,
    [Color]     VARCHAR (6)    NOT NULL,
    [IsExamine] BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[SupportOnline]...';


GO
CREATE TABLE [dbo].[SupportOnline] (
    [Id]          TINYINT        IDENTITY (1, 1) NOT NULL,
    [Code]        VARCHAR (50)   NOT NULL,
    [Name]        NVARCHAR (50)  NOT NULL,
    [WelcomeNote] NVARCHAR (150) NOT NULL,
    [IsUsed]      BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Altering [dbo].[usp_User_ChangePassword]...';


GO
ALTER PROCEDURE [dbo].[usp_User_ChangePassword]
	@Id INT,
	@Email NVARCHAR(256),
	@NewPassword VARCHAR(60)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN
			IF EXISTS (SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Email] = @Email)
				BEGIN
					UPDATE [dbo].[Users]
					SET [PasswordHash] = @NewPassword
					WHERE [Email] = @Email
				END
			ELSE
				SET @return = 0
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_Users_Transaction]...';


GO
ALTER PROCEDURE [dbo].[usp_Users_Transaction]
	@Action CHAR(1) = 'I',
	@Id INT,
	@Name NVARCHAR(32),
	@Code CHAR(20),
	@Email NVARCHAR(256),
	@PasswordHash VARCHAR(60),
	@PhoneNumber VARCHAR(20),
	@HomePhone VARCHAR(20),
	@DateOfBirth DATE,
	@Gender TINYINT,
	@Image VARCHAR(256),
	@OrganizationId SMALLINT,
	@Status BIT,
	@PatientId CHAR(20) = ''
AS BEGIN
	SET NOCOUNT ON
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Users WHERE [Email] = @Email)
					INSERT INTO [dbo].[Users]
					VALUES(@Name, @Code, @Email, @PasswordHash, @PhoneNumber, @HomePhone, 
					@DateOfBirth, @Gender, @Image, @OrganizationId, @Status, @PatientId)
				ELSE
					SET @return = 0
			IF @Action = 'U'
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Id] = @Id)
					UPDATE [dbo].[Users]
					SET [Name] = @Name,
					[Code] = @Code,
					[PhoneNumber] = @PhoneNumber,
					[HomePhone] = @HomePhone,
					[DateOfBirth] = @DateOfBirth,
					[Gender] = @Gender,
					[Image] = @Image,
					[OrganizationId] = @OrganizationId,
					[PatientId] = @PatientId
					WHERE [Id] = @Id
				ELSE
					SET @return = 0
			IF @Action = 'D'
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Id] = @Id)
					DELETE FROM [dbo].[Users]
					WHERE [Id] = @Id
				ELSE
					SET @return = 0
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_Appointment_Transaction]...';


GO
ALTER PROC [dbo].[usp_Appointment_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Time CHAR(5),
	@PhysicianId INT = 0,
	@PatientId INT = 0,
	@Symptom NVARCHAR(300) = '',
	--@CreatedDate VARCHAR(20) = '',
	--@ModifiedDate NVARCHAR(20) = '',
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return bit = 1
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)
	DECLARE @Date SMALLDATETIME

	BEGIN TRY
		BEGIN TRAN;

			SET @ModifiedDate = [dbo].[ufnGetDate]()
			SET @Date = GETDATE()

			IF @Action = 'I' --INSERT
			BEGIN
				
				SET @CreatedDate = @ModifiedDate

				INSERT [dbo].[Appointment]
				VALUES(@Date, @Time, @PhysicianId, @PatientId, @Symptom, @CreatedDate, @ModifiedDate, @Status)
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				--STATUS: 0 - Just Created/Pending, 1 - Approved, 2 - Canceled
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[Appointment] WHERE [Id] = @Id AND [Status] = @Status)
				BEGIN
					UPDATE [dbo].[Appointment]
					SET [Date] = @Date, [Time] = @Time, [PhysicianId] = @PhysicianId, [PatientId] = @PatientId, [Symptom] = @Symptom, [ModifiedDate] = @ModifiedDate, [Status] = @Status
					WHERE [Id] = @Id  
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[Appointment] WHERE [Id] = @Id AND [Status] = @Status)
				BEGIN
					DELETE FROM [dbo].[Appointment]
					WHERE [Id] = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Altering [dbo].[usp_UserGroup_Transaction]...';


GO
ALTER PROCEDURE [dbo].[usp_UserGroup_Transaction]
	@Action CHAR(1) = 'I',
	@UserId INT,
	@GroupId TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN

			IF @Action = 'I' -- INSERT
				IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[UserGroup] WHERE [UserId] = @UserId AND [GroupId] = @GroupId)
					INSERT INTO [dbo].[UserGroup] VALUES(@UserId, @GroupId)
				ELSE
					SET @return = 0

			IF @Action = 'U' -- UPDATE
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].[UserGroup] WHERE [UserId] = @UserId AND [GroupId] = @GroupId)
					UPDATE [dbo].[UserGroup]
					SET [UserId] = @UserId, [GroupId] = @GroupId
					WHERE [UserId] = @UserId
					AND [GroupId] = @GroupId
			ELSE
				SET @return = 0

			IF @Action = 'D' -- DELETE
				IF EXISTS(SELECT TOP 1 1 FROM [dbo].[UserGroup] WHERE [UserId] = @UserId AND [GroupId] = @GroupId)
				BEGIN
					IF @UserId <> 0 AND @GroupId <> 0
						DELETE [dbo].[UserGroup]
						WHERE [UserId] = @UserId
						AND [GroupId] = @GroupId
					ELSE
						SET @return = 0;
				END
				ELSE
					SET @return = 0;
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_UserRole_Transaction]...';


GO
ALTER PROCEDURE [dbo].[usp_UserRole_Transaction]
	@Action CHAR(1) = 'I',
	@UserId int,
	@RoleId int
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return bit = 1

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[UserRole] WHERE [UserId] = @UserId AND [RoleId] = @RoleId)
					BEGIN
						INSERT INTO [dbo].[UserRole]
						VALUES(@UserId, @RoleId)
					END
				ELSE
					SET @return = 0;
			IF @Action = 'U'
				IF EXISTS(SELECT TOP 1 1 FROM [dbo].UserRole WHERE [UserId] = @UserId AND [RoleId] = @RoleId)
				BEGIN
					IF @UserId <> 0 AND @RoleId <> 0
						UPDATE [dbo].[UserRole]
						SET [UserId] = @UserId,
						[RoleId] = @RoleId
						WHERE [UserId] = @UserId
						AND [RoleId] = @RoleId
					ELSE
						SET @return = 0;
				END
				ELSE
					SET @return = 0;
				
			IF @Action = 'D'
				
				IF EXISTS(SELECT TOP 1 1 FROM [dbo].[UserRole] WHERE [UserId] = @UserId AND [RoleId] = @RoleId)
				BEGIN
					IF @UserId <> 0 AND @RoleId <> 0
						DELETE [dbo].[UserRole]
						WHERE [UserId] = @UserId
						AND [RoleId] = @RoleId
					ELSE
						SET @return = 0;
				END
				ELSE
					SET @return = 0;
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN	
				ROLLBACK TRAN
				SET @return = 0;
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Refreshing [dbo].[usp_Setting]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Setting]';


GO
PRINT N'Refreshing [dbo].[usp_Setting_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Setting_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_Login]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Login]';


GO
PRINT N'Refreshing [dbo].[usp_Organization_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Organization_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_User]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_User]';


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5a0e568b-81f0-45cd-b7d4-9212651add5a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5a0e568b-81f0-45cd-b7d4-9212651add5a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '97e4ad87-7a6a-436b-bd86-3ec5bb03fda6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('97e4ad87-7a6a-436b-bd86-3ec5bb03fda6')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Update complete.';


GO
