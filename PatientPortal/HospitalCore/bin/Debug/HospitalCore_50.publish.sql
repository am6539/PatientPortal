/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Creating [dbo].[IntList]...';


GO
CREATE TYPE [dbo].[IntList] AS TABLE (
    [Item] INT NOT NULL PRIMARY KEY CLUSTERED ([Item] ASC));


GO
PRINT N'Creating [dbo].[Appointment]...';


GO
CREATE TABLE [dbo].[Appointment] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [PhysicianId]  NVARCHAR (128) NOT NULL,
    [PatientId]    NVARCHAR (128) NOT NULL,
    [Symptom]      NVARCHAR (MAX) NOT NULL,
    [CreatedDate]  VARCHAR (20)   NOT NULL,
    [ModifiedDate] VARCHAR (20)   NOT NULL,
    [ModifedUser]  NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_Appointment] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Appointment].[idxAppointmentPatient]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentPatient]
    ON [dbo].[Appointment]([PatientId] ASC);


GO
PRINT N'Creating [dbo].[Appointment].[idxAppointmentPhysician]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentPhysician]
    ON [dbo].[Appointment]([PhysicianId] ASC);


GO
PRINT N'Creating [dbo].[AppointmentCollection]...';


GO
CREATE TABLE [dbo].[AppointmentCollection] (
    [Id]             INT            NOT NULL,
    [Date]           DATE           NOT NULL,
    [Time]           INT            NOT NULL,
    [AppointmentNo]  SMALLINT       NOT NULL,
    [PatientName]    NVARCHAR (50)  NOT NULL,
    [PatientAddress] NVARCHAR (150) NOT NULL,
    [PatientEmail]   VARCHAR (256)  NULL,
    [PatientPhone]   VARCHAR (20)   NULL,
    [PatientGender]  TINYINT        NOT NULL,
    [PatientDoB]     DATE           NULL,
    [Status]         TINYINT        NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AppointmentCollection].[idxAppointmentCollection]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentCollection]
    ON [dbo].[AppointmentCollection]([Date] ASC, [AppointmentNo] ASC, [PatientName] ASC);


GO
PRINT N'Creating [dbo].[AppointmentLog]...';


GO
CREATE TABLE [dbo].[AppointmentLog] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [Date]           DATE             NOT NULL,
    [Time]           INT              NOT NULL,
    [PhysicianId]    NVARCHAR (128)   NOT NULL,
    [PatientId]      NVARCHAR (128)   NOT NULL,
    [Symptom]        NVARCHAR (MAX)   NOT NULL,
    [PatientName]    NVARCHAR (50)    NULL,
    [PatientAddress] NVARCHAR (150)   NULL,
    [PatientEmail]   VARCHAR (256)    NULL,
    [PatientPhone]   VARCHAR (20)     NULL,
    [PatientGender]  TINYINT          NULL,
    [PatientDoB]     DATE             NULL,
    [CreatedDate]    VARCHAR (20)     NOT NULL,
    [ModifiedDate]   VARCHAR (20)     NOT NULL,
    [Status]         TINYINT          NOT NULL,
    CONSTRAINT [PK_AppointmentLog] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AppointmentLog].[idxAppointmentLogDate]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentLogDate]
    ON [dbo].[AppointmentLog]([Date] ASC);


GO
PRINT N'Creating [dbo].[AppointmentLog].[idxAppointmentLogPatient]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentLogPatient]
    ON [dbo].[AppointmentLog]([PatientId] ASC);


GO
PRINT N'Creating [dbo].[AppointmentLog].[idxAppointmentLogPhysician]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentLogPhysician]
    ON [dbo].[AppointmentLog]([PhysicianId] ASC);


GO
PRINT N'Creating [dbo].[Article]...';


GO
CREATE TABLE [dbo].[Article] (
    [Id]        INT             IDENTITY (1, 1) NOT NULL,
    [Date]      SMALLDATETIME   NOT NULL,
    [Title]     NVARCHAR (150)  NOT NULL,
    [Detail]    NVARCHAR (1000) NOT NULL,
    [PatientId] INT             NOT NULL,
    [Status]    TINYINT         NOT NULL,
    [IsClosed]  BIT             NOT NULL,
    CONSTRAINT [PK_Article] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ArticleComment]...';


GO
CREATE TABLE [dbo].[ArticleComment] (
    [Id]          SMALLINT        NOT NULL,
    [ArticleId]   INT             NOT NULL,
    [Date]        SMALLDATETIME   NOT NULL,
    [Detail]      NVARCHAR (1000) NOT NULL,
    [CreatedUser] INT             NOT NULL,
    [Status]      TINYINT         NOT NULL,
    CONSTRAINT [PK_ArticleComment] PRIMARY KEY CLUSTERED ([Id] ASC, [ArticleId] ASC)
);


GO
PRINT N'Creating [dbo].[BlockedIpHandler]...';


GO
CREATE TABLE [dbo].[BlockedIpHandler] (
    [Id]       INT            IDENTITY (1, 1) NOT NULL,
    [IP]       VARCHAR (50)   NOT NULL,
    [Note]     NVARCHAR (150) NOT NULL,
    [IsLocked] BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Group]...';


GO
CREATE TABLE [dbo].[Group] (
    [Id]         TINYINT       IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (50) NOT NULL,
    [IsReadOnly] BIT           NOT NULL,
    CONSTRAINT [PK_Group] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MailSetting]...';


GO
CREATE TABLE [dbo].[MailSetting] (
    [Id]    TINYINT        IDENTITY (1, 1) NOT NULL,
    [Name]  NVARCHAR (256) NOT NULL,
    [Email] VARCHAR (256)  NOT NULL,
    [Pwd]   VARCHAR (60)   NOT NULL,
    [Host]  VARCHAR (150)  NOT NULL,
    [Port]  INT            NOT NULL,
    [IsSSL] BIT            NOT NULL,
    CONSTRAINT [PK_MailConfig] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Message]...';


GO
CREATE TABLE [dbo].[Message] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [FolderId]   TINYINT        NOT NULL,
    [Subject]    NVARCHAR (250) NOT NULL,
    [Date]       SMALLDATETIME  NOT NULL,
    [SenderId]   INT            NOT NULL,
    [ReceiverId] INT            NOT NULL,
    [IsRead]     BIT            NOT NULL,
    [IsSend]     BIT            NOT NULL,
    [IsPriority] BIT            NOT NULL,
    CONSTRAINT [PK_Message] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Message].[idxMessageFolder]...';


GO
CREATE NONCLUSTERED INDEX [idxMessageFolder]
    ON [dbo].[Message]([FolderId] ASC);


GO
PRINT N'Creating [dbo].[Message].[idxMessageSender]...';


GO
CREATE NONCLUSTERED INDEX [idxMessageSender]
    ON [dbo].[Message]([SenderId] ASC);


GO
PRINT N'Creating [dbo].[Message].[idxMessageReceiver]...';


GO
CREATE NONCLUSTERED INDEX [idxMessageReceiver]
    ON [dbo].[Message]([ReceiverId] ASC);


GO
PRINT N'Creating [dbo].[MessageContent]...';


GO
CREATE TABLE [dbo].[MessageContent] (
    [MessageId] INT            NOT NULL,
    [Detail]    NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_MessageContent] PRIMARY KEY CLUSTERED ([MessageId] ASC)
);


GO
PRINT N'Creating [dbo].[MessageFolder]...';


GO
CREATE TABLE [dbo].[MessageFolder] (
    [Id]   TINYINT        IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (50)  NOT NULL,
    [Path] NVARCHAR (256) NOT NULL,
    CONSTRAINT [PK_MessageFolder] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MessageRecipient]...';


GO
CREATE TABLE [dbo].[MessageRecipient] (
    [MessageId]  INT NOT NULL,
    [ReceiverId] INT NOT NULL,
    [IsUsed]     BIT NOT NULL,
    CONSTRAINT [PK_MessageRecipient] PRIMARY KEY CLUSTERED ([MessageId] ASC, [ReceiverId] ASC)
);


GO
PRINT N'Creating [dbo].[Module]...';


GO
CREATE TABLE [dbo].[Module] (
    [Id]       SMALLINT       IDENTITY (1, 1) NOT NULL,
    [Title]    NVARCHAR (128) NOT NULL,
    [Handler]  NVARCHAR (256) NOT NULL,
    [Sort]     TINYINT        NOT NULL,
    [ParentId] SMALLINT       NOT NULL,
    [GroupId]  TINYINT        NOT NULL,
    CONSTRAINT [PK_Module] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Module].[idxModuleGroup]...';


GO
CREATE NONCLUSTERED INDEX [idxModuleGroup]
    ON [dbo].[Module]([GroupId] ASC);


GO
PRINT N'Creating [dbo].[OfferAdvise]...';


GO
CREATE TABLE [dbo].[OfferAdvise] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Date]      SMALLDATETIME  NOT NULL,
    [Detail]    NVARCHAR (MAX) NOT NULL,
    [PatientId] INT            NOT NULL,
    [IsRead]    BIT            NOT NULL,
    [IsSent]    BIT            NOT NULL,
    [Tag]       NVARCHAR (150) NOT NULL,
    CONSTRAINT [PK_OfferAdvise] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Organization]...';


GO
CREATE TABLE [dbo].[Organization] (
    [Id]       SMALLINT       IDENTITY (1, 1) NOT NULL,
    [ParentId] SMALLINT       NULL,
    [Name]     NVARCHAR (150) NOT NULL,
    [Phone]    VARCHAR (50)   NULL,
    [Fax]      VARCHAR (50)   NULL,
    [Email]    VARCHAR (256)  NULL,
    [Address]  NVARCHAR (150) NULL,
    CONSTRAINT [PK_Organization] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Permission]...';


GO
CREATE TABLE [dbo].[Permission] (
    [RoleId]    SMALLINT NOT NULL,
    [ModuleId]  SMALLINT NOT NULL,
    [IsRead]    BIT      NOT NULL,
    [IsWrite]   BIT      NOT NULL,
    [IsCreate]  BIT      NOT NULL,
    [IsModify]  BIT      NOT NULL,
    [IsDestroy] BIT      NOT NULL,
    [IsPrint]   BIT      NOT NULL,
    CONSTRAINT [PK_Permission] PRIMARY KEY CLUSTERED ([RoleId] ASC, [ModuleId] ASC)
);


GO
PRINT N'Creating [dbo].[Role]...';


GO
CREATE TABLE [dbo].[Role] (
    [Id]   SMALLINT       IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_Role] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Schedule]...';


GO
CREATE TABLE [dbo].[Schedule] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Title]     NVARCHAR (50)  NOT NULL,
    [Priority]  TINYINT        NOT NULL,
    [Detail]    NVARCHAR (300) NOT NULL,
    [IsAlarm]   BIT            NOT NULL,
    [Start]     DATETIME       NOT NULL,
    [End]       DATETIME       NOT NULL,
    [Color]     VARCHAR (6)    NOT NULL,
    [IsExamine] BIT            NOT NULL,
    [UserId]    NVARCHAR (128) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Setting]...';


GO
CREATE TABLE [dbo].[Setting] (
    [Id]                        TINYINT        IDENTITY (1, 1) NOT NULL,
    [Title]                     NVARCHAR (70)  NOT NULL,
    [Description]               NVARCHAR (150) NOT NULL,
    [Keyword]                   NVARCHAR (150) NOT NULL,
    [Membership]                BIT            NOT NULL,
    [DefaultRole]               SMALLINT       NOT NULL,
    [LoginURL]                  VARCHAR (256)  NOT NULL,
    [LockedIPNoteDefault]       NVARCHAR (150) NOT NULL,
    [IsSaveCanceledAppointment] BIT            NOT NULL,
    [AppointmentIntervalTime]   TINYINT        NOT NULL,
    [AppointmentStartTime]      INT            NOT NULL,
    [AppointmentEndTime]        INT            NOT NULL,
    CONSTRAINT [PK_Setting] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[SupportOnline]...';


GO
CREATE TABLE [dbo].[SupportOnline] (
    [Id]          TINYINT        IDENTITY (1, 1) NOT NULL,
    [Code]        VARCHAR (50)   NOT NULL,
    [Name]        NVARCHAR (50)  NOT NULL,
    [WelcomeNote] NVARCHAR (150) NOT NULL,
    [IsUsed]      BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UserGroup]...';


GO
CREATE TABLE [dbo].[UserGroup] (
    [UserId]  NVARCHAR (128) NOT NULL,
    [GroupId] TINYINT        NOT NULL,
    CONSTRAINT [PK_UserGroup] PRIMARY KEY CLUSTERED ([UserId] ASC, [GroupId] ASC)
);


GO
PRINT N'Creating [dbo].[UserRole]...';


GO
CREATE TABLE [dbo].[UserRole] (
    [UserId] NVARCHAR (128) NOT NULL,
    [RoleId] SMALLINT       NOT NULL,
    CONSTRAINT [PK_UserRole] PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]                   NVARCHAR (128) NOT NULL,
    [Email]                NVARCHAR (256) NULL,
    [EmailConfirmed]       BIT            NOT NULL,
    [PasswordHash]         NVARCHAR (MAX) NULL,
    [SecurityStamp]        NVARCHAR (MAX) NULL,
    [PhoneNumber]          NVARCHAR (MAX) NULL,
    [PhoneNumberConfirmed] BIT            NOT NULL,
    [TwoFactorEnabled]     BIT            NOT NULL,
    [LockoutEndDateUtc]    DATETIME       NULL,
    [LockoutEnabled]       BIT            NOT NULL,
    [AccessFailedCount]    INT            NOT NULL,
    [UserName]             NVARCHAR (256) NOT NULL,
    [OrganizationId]       SMALLINT       NOT NULL,
    [Tags]                 NVARCHAR (250) NOT NULL,
    [HomePhone]            VARCHAR (20)   NOT NULL,
    [IsAdmin]              BIT            NOT NULL,
    [IsDoctor]             BIT            NOT NULL,
    [Gender]               TINYINT        NOT NULL,
    [Code]                 CHAR (20)      NOT NULL,
    [Name]                 NVARCHAR (100) NOT NULL,
    [PatientId]            NVARCHAR (128) NOT NULL,
    [DateOfBirth]          DATE           NOT NULL,
    [Image]                VARCHAR (256)  NOT NULL,
    [Status]               BIT            NOT NULL,
    CONSTRAINT [PK_USERS] PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Email] ASC),
    CONSTRAINT [UQ__USERS__A9D1053429B4C0C0] UNIQUE NONCLUSTERED ([Email] ASC)
);


GO
PRINT N'Creating [dbo].[Users].[idxUserAccess]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [idxUserAccess]
    ON [dbo].[Users]([Code] ASC, [Email] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[MessageRecipient]...';


GO
ALTER TABLE [dbo].[MessageRecipient]
    ADD DEFAULT 1 FOR [IsUsed];


GO
PRINT N'Creating [dbo].[FK_ArticleComment_Article]...';


GO
ALTER TABLE [dbo].[ArticleComment]
    ADD CONSTRAINT [FK_ArticleComment_Article] FOREIGN KEY ([ArticleId]) REFERENCES [dbo].[Article] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Message_MessageFolder]...';


GO
ALTER TABLE [dbo].[Message]
    ADD CONSTRAINT [FK_Message_MessageFolder] FOREIGN KEY ([FolderId]) REFERENCES [dbo].[MessageFolder] ([Id]);


GO
PRINT N'Creating [dbo].[FK_MessageContent_Message]...';


GO
ALTER TABLE [dbo].[MessageContent]
    ADD CONSTRAINT [FK_MessageContent_Message] FOREIGN KEY ([MessageId]) REFERENCES [dbo].[Message] ([Id]);


GO
PRINT N'Creating [dbo].[FK_MessageRecipient_Message]...';


GO
ALTER TABLE [dbo].[MessageRecipient]
    ADD CONSTRAINT [FK_MessageRecipient_Message] FOREIGN KEY ([MessageId]) REFERENCES [dbo].[Message] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Module_Module]...';


GO
ALTER TABLE [dbo].[Module]
    ADD CONSTRAINT [FK_Module_Module] FOREIGN KEY ([ParentId]) REFERENCES [dbo].[Module] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Organization_Organization]...';


GO
ALTER TABLE [dbo].[Organization]
    ADD CONSTRAINT [FK_Organization_Organization] FOREIGN KEY ([ParentId]) REFERENCES [dbo].[Organization] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Permission_Module]...';


GO
ALTER TABLE [dbo].[Permission]
    ADD CONSTRAINT [FK_Permission_Module] FOREIGN KEY ([ModuleId]) REFERENCES [dbo].[Module] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserGroup_Group]...';


GO
ALTER TABLE [dbo].[UserGroup]
    ADD CONSTRAINT [FK_UserGroup_Group] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[Group] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserGroup_Users]...';


GO
ALTER TABLE [dbo].[UserGroup]
    ADD CONSTRAINT [FK_UserGroup_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserRole_Role]...';


GO
ALTER TABLE [dbo].[UserRole]
    ADD CONSTRAINT [FK_UserRole_Role] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Role] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserRole_Users]...';


GO
ALTER TABLE [dbo].[UserRole]
    ADD CONSTRAINT [FK_UserRole_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Users_Organization]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [FK_Users_Organization] FOREIGN KEY ([OrganizationId]) REFERENCES [dbo].[Organization] ([Id]);


GO
PRINT N'Creating [dbo].[ufnGetDate]...';


GO
CREATE FUNCTION [dbo].[ufnGetDate]()
RETURNS VARCHAR(20)
AS
BEGIN
	RETURN CONVERT(VARCHAR, GETDATE(), 103)
END
GO
PRINT N'Creating [dbo].[usp_Appointment]...';


GO
CREATE PROC [dbo].[usp_Appointment](
	@Id INT = 0,
	@Date DATE = '',
	@AppointmentNo INT = 0,
	@PatientName NVARCHAR(50) = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF (@Id > 0)
		BEGIN
			SELECT a.*,
				b.[Date], b.[Time], b.[AppointmentNo],
				b.[PatientName], b.[PatientAddress], b.[PatientEmail], b.[PatientPhone],
				b.[PatientGender], b.[PatientDoB], b.[Status]
			FROM [dbo].[Appointment] a  RIGHT JOIN [dbo].[AppointmentCollection] b 
			ON a.[Id] = b.[Id] WHERE a.[Id] = @Id
		END
		ELSE
		BEGIN
			DECLARE @SQLString NVARCHAR(500);
			DECLARE @ParmDefinition nvarchar(500); 

			SET @ParmDefinition = N'@Appointment_Date DATE, @Appointment_No INT,@Patient_Name NVARCHAR(50)';
			SET @SQLString = N'SELECT a.*,
				b.[Date], b.[Time], b.[AppointmentNo],
				b.[PatientName], b.[PatientAddress], b.[PatientEmail], b.[PatientPhone],
				b.[PatientGender], b.[PatientDoB], b.[Status]
			FROM [dbo].[Appointment] a  WITH(INDEX(idxAppointmentPhysician)) RIGHT JOIN [dbo].[AppointmentCollection] b 
			ON a.[Id] = b.[Id] WHERE b.[Date] = @Appointment_Date AND b.[AppointmentNo] = @Appointment_No';
			IF @PatientName != ''
				SET @SQLString = @SQLString + N' AND b.[PatientName]  LIKE N''%@Patient_Name%''';

			EXECUTE sp_executesql @SQLString, @ParmDefinition, @Appointment_Date = @Date, @Appointment_No = @AppointmentNo, @Patient_Name = @PatientName
		END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Appointment_Transaction]...';


GO
CREATE PROC [dbo].[usp_Appointment_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,--Appointment
	@Date DATE = '',
	@Time int = 8,
	@PhysicianId INT = 0,
	@PatientId NVARCHAR(128) = '',
	@Symptom NVARCHAR(300) = '',
	@AppointmentNo SMALLINT = 0,
	@PatientName NVARCHAR(50) = '',
	@PatientAddress NVARCHAR(150) = '',
	@PatientEmail VARCHAR(256) = '',
	@PatientPhone VARCHAR(20) = '',
	@PatientGender TINYINT = 1,
	@PatientDoB DATE = '',
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)

	BEGIN TRY
		BEGIN TRAN;

			SET @ModifiedDate = [dbo].[ufnGetDate]()

			IF @Action = 'I' --INSERT
			BEGIN
				
				SET @CreatedDate = @ModifiedDate

				INSERT [dbo].[Appointment]
				VALUES(@PhysicianId, @PatientId, @Symptom, @CreatedDate, @ModifiedDate, @PatientId)

				SET @return = SCOPE_IDENTITY()

				INSERT [dbo].[AppointmentCollection] 
				VALUES(@Id, @Date, @Time, @AppointmentNo, @PatientName, @PatientAddress, @PatientEmail, @PatientPhone, @PatientGender, @PatientDoB, @Status)
				
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				--STATUS: 0 - Just Created/Pending, 1 - Approved, 2 - Canceled
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[Appointment] WHERE [Id] = @Id)
				BEGIN
					UPDATE [dbo].[Appointment]
					SET [PhysicianId] = @PhysicianId, [PatientId] = @PatientId, [Symptom] = @Symptom, [ModifiedDate] = @ModifiedDate
					WHERE [Id] = @Id  

					UPDATE [dbo].[AppointmentCollection]
					SET [AppointmentNo] = @AppointmentNo, [PatientName] = @PatientName, [PatientEmail] = @PatientEmail,
					[PatientAddress] = @PatientAddress, [PatientPhone] = @PatientPhone ,[PatientGender] = @PatientGender, [PatientDoB] =  @PatientDoB, [Status] = @Status
					WHERE [Id] = @Id  

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[Appointment] WHERE [Id] = @Id)
				BEGIN
					DELETE FROM [dbo].[AppointmentCollection]
					WHERE [Id] = @Id

					DELETE FROM [dbo].[Appointment]
					WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_AppointmentLog]...';


GO
CREATE PROC [dbo].[usp_AppointmentLog]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[AppointmentLog]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_AppointmentLog_Transaction]...';


GO
CREATE PROC [dbo].[usp_AppointmentLog_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id UNIQUEIDENTIFIER,
	@Date DATE = '',
	@Time int = 8,
	@PhysicianId NVARCHAR(128) = '',
	@PatientId NVARCHAR(128) = '',
	@Symptom NVARCHAR(300) = '',
	@PatientName NVARCHAR(50) = '',
	@PatientAddress NVARCHAR(150) = '',
	@PatientEmail VARCHAR(256) = '',
	@PatientPhone VARCHAR(20) = '',
	@PatientGender TINYINT = 1,
	@PatientDoB DATE = NULL,
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)

	BEGIN TRY
		BEGIN TRAN;

			SET @ModifiedDate = [dbo].[ufnGetDate]()
			IF @Action = 'I' --INSERT
			BEGIN
				SET @Id = NEWID(); 
				SET @CreatedDate = @ModifiedDate

				INSERT [dbo].[AppointmentLog]
				VALUES(@Id, @Date, @Time, @PhysicianId, @PatientId, @Symptom,@PatientName,@PatientAddress,@PatientEmail,@PatientPhone,@PatientGender,@PatientDoB, @CreatedDate, @ModifiedDate, @Status)

			END

			IF @Action = 'U' --UPDATE
			BEGIN
				--STATUS: 0 - Just Created/Pending, 1 - Approved, 2 - Canceled
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[AppointmentLog] WHERE [Id] = @Id)
				BEGIN
					UPDATE [dbo].[AppointmentLog]
					SET [Date] = @Date, [Time] = @Time, [PhysicianId] = @PhysicianId, 
					[PatientId] = @PatientId, [Symptom] = @Symptom,
					[PatientName] = @PatientName, [PatientAddress] = @PatientAddress, [PatientEmail] = @PatientEmail, [PatientPhone] = @PatientPhone,
					[PatientGender] = @PatientGender, [PatientDoB] = @PatientDoB,
					[ModifiedDate] = @ModifiedDate, [Status] = @Status
					WHERE [Id] = @Id  

				END
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[AppointmentLog] WHERE [Id] = @Id)
				BEGIN
					DELETE FROM [dbo].[AppointmentLog]
					WHERE [Id] = @Id
				END

			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_Article]...';


GO
CREATE PROC [dbo].[usp_Article]
	@Id int
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id = 0 
			SELECT *,  (SELECT COUNT(b.Id) from ArticleComment b where ArticleId = a.Id) as CountComments
			FROM [dbo].[Article] a
		ELSE
			SELECT * , (SELECT COUNT(b.Id) from ArticleComment b where ArticleId = a.Id) as CountComments
			FROM [dbo].[Article] a WHERE Id = @Id
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Article_Transaction]...';


GO
CREATE PROC [dbo].[usp_Article_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Date datetime,
	@Title NVARCHAR(150) = '',
	@Detail NVARCHAR(1000) = '',
	@PatientId INT = 0,
	@Status TINYINT = 1,
	@IsClosed BIT, 
	@CountComments INT
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0
	DECLARE @CurrentDate SMALLDATETIME

	BEGIN TRY
		BEGIN TRAN;
			SET @CurrentDate = GETDATE()

			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Article]
				VALUES(@CurrentDate, @Title, @Detail, @PatientId, @Status, @IsClosed)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN
					UPDATE [dbo].[Article]
					SET [Title] = @Title, [Detail] = @Detail, [Status] = @Status, [IsClosed] = @IsClosed
					WHERE [Id] = @Id  

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN	
					-- Article Comment Table
					DELETE FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id

					-- Article Table
					DELETE FROM [dbo].[Article] WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_ArticleComment]...';


GO
CREATE PROC [dbo].[usp_ArticleComment] (
	@TypeGet tinyint = 0, -- 0: get all comment by ArticleId ; 1: Get comment by Id
	@Id INT = 0,
	@ArticleId INT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @TypeGet = 0
			SELECT * FROM [dbo].[ArticleComment] WHERE [ArticleId] = @ArticleId
		ELSE If @TypeGet = 1
			SELECT * FROM [dbo].[ArticleComment] WHERE [Id] = @Id AND [ArticleId] = @ArticleId

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_ArticleComment_Transaction]...';


GO
CREATE PROC [dbo].[usp_ArticleComment_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@ArticleId SMALLINT = 1,
	@Date datetime,
	@Detail NVARCHAR(1000) ='',
	@CreatedUser INT = 0,
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0
	DECLARE @CurrentDate SMALLDATETIME

	BEGIN TRY
		BEGIN TRAN;
			SET @CurrentDate = GETDATE()

			IF @Action = 'I' --INSERT
			BEGIN				
				SELECT @Id = ISNULL(MAX([Id]),0) + 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @ArticleId
				INSERT [dbo].[ArticleComment]
				VALUES(@Id, @ArticleId, @CurrentDate, @Detail, @CreatedUser, @Status)

				--SET @return = SCOPE_IDENTITY()
				SET @return = @Id
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF @ArticleId > 0 AND @Id > 0
				BEGIN

					UPDATE [dbo].[ArticleComment]
					SET [Detail] = @Detail, [Status] = @Status, [Date] = @CurrentDate
					WHERE [Id] = @Id  AND [ArticleId] = @ArticleId
					
					SET @return = @Id
					print @return
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF @ArticleId > 0 AND @Id > 0
				BEGIN
					DELETE FROM [dbo].[ArticleComment]
					WHERE [Id] = @Id  AND [ArticleId] = @ArticleId

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_Group]...';


GO
CREATE PROC [dbo].[usp_Group]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[Group]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Group_Transaction]...';


GO
CREATE PROC [dbo].[usp_Group_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Name NVARCHAR(150) = '',
	@IsReadOnly BIT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Group] VALUES(@Name, @IsReadOnly)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[Group]
				SET [Name] = @Name, [IsReadOnly] = @IsReadOnly
				WHERE [Id] = @Id  

				SET @return = @Id
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[UserGroup] WHERE [GroupId] = @Id)
				BEGIN
					DELETE FROM [dbo].[Group]
					WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_Login]...';


GO
CREATE PROCEDURE [dbo].[usp_Login]
	@Email NVARCHAR(256),
	@PasswordHash VARCHAR(60)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT u.Name, 
			g.Name as GroupName, 
			r.Name as RoleName,
			p.IsRead, 
			p.IsWrite, 
			p.IsCreate, 
			p.IsModify, 
			p.IsDestroy, 
			p.IsPrint
		FROM [dbo].Users u, [dbo].UserRole ur, [dbo].UserGroup ug,
		[dbo].[Role] r,[dbo].Permission p, [dbo].[Group] g, [dbo].Module m
		WHERE u.Email = @Email
		AND u.PasswordHash = @PasswordHash
		AND u.Id = ur.RoleId
		AND u.Id = ug.UserId
		AND ur.RoleId = r.Id
		AND ug.GroupId = g.Id
		AND r.Id = p.RoleId
		AND p.ModuleId = m.Id
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_MailSetting]...';


GO
CREATE PROC [dbo].[usp_MailSetting]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT TOP 1 * FROM [dbo].[MailSetting]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_MailSetting_Transaction]...';


GO
CREATE PROC [dbo].[usp_MailSetting_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Name NVARCHAR(256) = '',
	@Email VARCHAR(256) = '',
	@Pwd VARCHAR(60) = '',
	@Host VARCHAR(150) = '',
	@Port NUMERIC(3,0) = '',
	@IsSSL BIT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[MailSetting] VALUES(@Name, @Email, @Pwd, @Host, @Port, @IsSSL)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[MailSetting]
				SET [Name] = @Name, [Email] = @Email, [Pwd] = @Pwd, [Host] = @Host, [Port] = @Port, [IsSSL] = @IsSSL
				WHERE [Id] = @Id  

				SET @return = @Id
			END

			IF @Action = 'D' --DELETE
			BEGIN
				
				DELETE FROM [dbo].[MailSetting]
				WHERE [Id] = @Id

				SET @return = @Id
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_Message]...';


GO
CREATE PROC [dbo].[usp_Message]
(
	@FolderId TINYINT = 1,
	@UserId INT,
	@PageIndex INT,
	@NumberInPage INT,
	@TotalItem INT OUT
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		-- Folder: Inbox, Sent, Draff, Trash
		SELECT *, ROW_NUMBER() OVER (ORDER BY [Date],[Id] DESC) AS RowNumb 
		INTO #DataTMP
		FROM (SELECT * FROM [dbo].[Message]
		WHERE [FolderId] = @FolderId AND ([SenderId] = @UserId OR [ReceiverId] = @UserId)) AS Tmp

		SELECT @TotalItem = COUNT([Id]) FROM #DataTMP

		-- Paging
		SELECT * FROM #DataTMP
		WHERE RowNum BETWEEN (@PageIndex - 1) * @NumberInPage + 1
				AND @PageIndex * @NumberInPage ;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Message_Transaction]...';


GO
CREATE PROC [dbo].[usp_Message_Transaction]
(
	@Action CHAR(1) = 'I',
	--Message
	@Id INT,
	@FolderId TINYINT = 1,
	@Subject NVARCHAR(250) = '',
	@Date SMALLDATETIME,
	@SenderId INT = 1,
	@ReceiverId INT = 1,
	@IsRead BIT = 0,
	@IsSend BIT = 0,
	@IsPrioriry BIT = 0,
	--MessageContent
	@Detail NVARCHAR(MAX) = '',
	--MessageRecipient
	@ListReceiverId INTLIST READONLY
)
AS BEGIN


	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
		
			-- Local Variable
			DECLARE @item INT

			IF @Action = 'I' --INSERT
			BEGIN
				SET @Date = GETDATE()

				-- Message Table
				INSERT [dbo].[Message] VALUES(@FolderId, @Subject, @Date, @SenderId, @ReceiverId, @IsRead, @IsSend, @IsPrioriry)
				SET @Id = SCOPE_IDENTITY()

				-- Message Content Table
				INSERT [dbo].[MessageContent] VALUES(@Id, @Detail)

				-- Message Recipient Table
				DECLARE cursorListReceiver CURSOR READ_ONLY FOR SELECT [Item] FROM @ListReceiverId WHERE [Item] > 0
				
				OPEN cursorListReceiver
				FETCH NEXT FROM cursorListReceiver INTO @Item
				
				WHILE @@FETCH_STATUS = 0
				BEGIN
					INSERT INTO [dbo].[MessageRecipient] VALUES(@Id, @item, 1) --Default IsUsed = True
					FETCH NEXT FROM cursorListReceiver INTO @Item
				END
				
				CLOSE cursorListReceiver
				DEALLOCATE cursorListReceiver

				SET @return = @Id
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF @IsSend = 0 -- AVAILABLE UPDATE WHEN EMAIL IS NOT SENT
				BEGIN
					-- Message Table
					UPDATE [dbo].[Message]
					SET [FolderId] = @FolderId, [Subject] = @Subject, [ReceiverId] = @ReceiverId, [IsPriority]  = @IsPrioriry
					WHERE [Id] = @Id  

					-- Message Content Table
					UPDATE [dbo].[MessageContent] SET [Detail] = @Detail WHERE [MessageId] = @Id

					-- Message Recipient Table
					DELETE FROM [dbo].[MessageRecipient] WHERE [MessageId] = @Id
				
					DECLARE cursorListReceiver CURSOR READ_ONLY FOR SELECT [Item] FROM @ListReceiverId WHERE [Item] > 0
				
					OPEN cursorListReceiver
					FETCH NEXT FROM cursorListReceiver INTO @Item
				
					WHILE @@FETCH_STATUS = 0
					BEGIN
						INSERT INTO [dbo].[MessageRecipient] VALUES(@Id, @item, 1) --Default IsUsed = True
						FETCH NEXT FROM cursorListReceiver INTO @Item
					END
				
					CLOSE cursorListReceiver
					DEALLOCATE cursorListReceiver

					SET @return = @Id
				END
			END

			IF @Action = 'D' --DELETE
			BEGIN
				-- Message Content Table
				DELETE FROM [dbo].[MessageContent] WHERE  [MessageId] = @Id

				-- Message Recipient Table
				DELETE FROM [dbo].[MessageRecipient] WHERE [MessageId] = @Id

				-- Message Table
				DELETE FROM [dbo].[Message] WHERE [Id] = @Id

				SET @return = @Id
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_MessageFolder]...';


GO
CREATE PROC [dbo].[usp_MessageFolder]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[MessageFolder]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_MessageFolder_Transaction]...';


GO
CREATE PROC [dbo].[usp_MessageFolder_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Name NVARCHAR(50) = '',
	@Path NVARCHAR(256) = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[MessageFolder] VALUES(@Name, @Path)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[MessageFolder]
				SET [Name] = @Name, [Path] = @Path
				WHERE [Id] = @Id  

				SET @return = @Id
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[Message] WITH(INDEX(idxMessageFolder)) WHERE [FolderId] = @Id)
				BEGIN
					DELETE FROM [dbo].[MessageFolder] WHERE [Id] = @Id

					SET @return = @Id
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_MessageRecipient_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_MessageRecipient_Transaction]
	@MessageId INT,
	@ReceiverId INT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN
			IF @MessageId > 0 AND @ReceiverId > 0
				IF NOT EXISTS (SELECT TOP 1 * FROM [dbo].MessageRecipient WHERE MessageId = @MessageId AND ReceiverId = @ReceiverId)
					BEGIN
						INSERT INTO [dbo].MessageRecipient
						VALUES(@MessageId, @ReceiverId, 1)

						SET @return = @MessageId
					END
				ELSE
					SET @return = 0
			ELSE
				SET @return = 0
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Module]...';


GO
CREATE PROC [dbo].[usp_Module]
( 
	@GroupId TINYINT = 1 --DEFAULT: 1 - CMS, 2 - Patient Services, 3 - Internal Services
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[Module] WITH(INDEX(idxModuleGroup)) WHERE [GroupId] = @GroupId
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Module_Transaction]...';


GO
CREATE PROC [dbo].[usp_Module_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1,
	@Title NVARCHAR(128) = '',
	@Handler NVARCHAR(256) = '',
	@Sort TINYINT = 1,
	@ParentId SMALLINT = 1,
	@GroupId TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			IF @Action = 'I' --INSERT
			BEGIN

				INSERT [dbo].[Module] VALUES(@Title, @Handler, @Sort, @ParentId, @GroupId)
				set @ParentId = SCOPE_IDENTITY()
				UPDATE [dbo].[Module] set ParentId = @ParentId where Id = @ParentId

				SET @return = @ParentId
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[Module]
				SET [Title] = @Title, [Handler] = @Handler, [Sort] = @Sort, [ParentId] = @ParentId, [GroupId] = @GroupId
				WHERE [Id] = @Id  

				SET @return = @Id
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[Permission] WHERE [ModuleId] = @Id)
				BEGIN
					DELETE FROM [dbo].[Module]
					WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_OfferAdvise]...';


GO
CREATE PROCEDURE [dbo].[usp_OfferAdvise]
	@Id TINYINT
AS
	IF(@Id > 0)
	BEGIN
		SELECT * FROM [dbo].[OfferAdvise]
		WHERE [Id] = @Id
	END
	ELSE
	BEGIN
		SELECT * FROM [dbo].[OfferAdvise]
		ORDER BY [Id]
	END
RETURN 0
GO
PRINT N'Creating [dbo].[usp_OfferAdvise_Transaction]...';


GO
CREATE PROC [dbo].[usp_OfferAdvise_Transaction]
(
	@Action CHAR(1) = 'I',
	@Date SMALLDATETIME,
	@Id INT = 1,
	@Detail NVARCHAR(MAX) = '',
	@PatientId INT,
	@IsRead BIT = 0,
	@IsSent BIT = 0,
	@Tag NVARCHAR(150)
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
			--DECLARE @Date SMALLDATETIME

			IF @Action = 'I' --INSERT
			BEGIN
				SET @Date = GETDATE()

				INSERT [dbo].[OfferAdvise] VALUES(@Date, @Detail, @PatientId, @IsRead, @IsSent, @Tag)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[OfferAdvise]
				SET [Detail] = @Detail, [IsRead] = @IsRead, [IsSent] = @IsSent, Tag = @Tag
				WHERE [Id] = @Id  

				SET @return = @Id
			END

			IF @Action = 'D' --DELETE
			BEGIN
				BEGIN
					DELETE FROM [dbo].[OfferAdvise]
					WHERE [Id] = @Id

					SET @return = @Id
				END
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_Organization]...';


GO
CREATE PROC [dbo].[usp_Organization]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[Organization]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Organization_Transaction]...';


GO
CREATE PROC [dbo].[usp_Organization_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1,
	@ParentId SMALLINT,
	@Name NVARCHAR(150) = '',
	@Phone VARCHAR(50) = '',
	@Fax VARCHAR(50) = '',
	@Email VARCHAR(256) ='',
	@Address NVARCHAR(150) = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Organization] VALUES(@ParentId, @Name, @Phone, @Fax, @Email, @Address)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[Organization]
				SET [Name] = @Name, [ParentId] = @ParentId, [Phone] = @Phone, [Fax] = @Fax, [Address] = @Address
				WHERE [Id] = @Id  

				SET @return = @Id
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[Users] WHERE [OrganizationId] = @Id)
				BEGIN
					DELETE FROM [dbo].[Organization]
					WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Creating [dbo].[usp_Permission_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Permission_Transaction]
	@Action CHAR(1) = 'I',
	@RoleId SMALLINT,
	@ModuleId SMALLINT,
	@IsRead BIT,
	@IsWrite BIT,
	@IsCreate BIT,
	@IsModify BIT,
	@IsDestroy BIT,
	@IsPrint BIT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				IF NOT EXISTS (SELECT TOP 1 * FROM [dbo].Permission WHERE RoleId = @RoleId AND ModuleId = @ModuleId)
					INSERT INTO [dbo].Permission
					VALUES(@RoleId, @ModuleId, @IsRead, @IsWrite, @IsCreate, @IsModify, @IsDestroy, @IsPrint)
				ELSE
					SET @return = 0
			IF @Action = 'U'
				IF NOT EXISTS (SELECT TOP 1 * FROM [dbo].Permission WHERE RoleId = @RoleId AND ModuleId = @ModuleId)
					UPDATE [dbo].Permission
					SET IsRead = @IsRead,
					IsWrite = @IsWrite,
					IsCreate = @IsCreate,
					IsModify = @IsModify,
					IsDestroy = @IsDestroy,
					IsPrint = @IsPrint
					WHERE RoleId = @RoleId
					AND ModuleId = @ModuleId
				ELSE
					SET @return = 0
			IF @Action = 'D'
				IF NOT EXISTS (SELECT TOP 1 * FROM [dbo].Permission WHERE RoleId = @RoleId AND ModuleId = @ModuleId)
					DELETE FROM [dbo].Permission
					WHERE RoleId = @RoleId
					AND ModuleId = @ModuleId
				ELSE
					SET @return = 0
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0	
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Role]...';


GO
CREATE PROC [dbo].[usp_Role]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT TOP 1 * FROM [dbo].[Role]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Role_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Role_Transaction]
	@Action CHAR(1) = 'I',
	@Id SMALLINT,
	@Name NVARCHAR(128)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				IF NOT EXISTS (SELECT TOP 1 * FROM [dbo].[Role] WHERE Name = @Name)
					INSERT INTO [dbo].[Role]
					VALUES(@Name)
				ELSE
					SET @return = 0
			IF @Action = 'U'
				IF EXISTS (SELECT TOP 1 * FROM [dbo].[Role] WHERE Id = @Id)
					UPDATE [dbo].[Role]
					SET Name = @Name
					WHERE Id = @Id
				ELSE
					SET @return = 0
			IF @Action = 'D'
				IF EXISTS (SELECT TOP 1 * FROM [dbo].[Role] WHERE Id = @Id)
					DELETE FROM [dbo].[Role]
					WHERE Id = @Id
				ELSE
					SET @return = 0
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Schedule]...';


GO
CREATE PROCEDURE [dbo].[usp_Schedule]
	@Id INT = 0,
	@UserId NVARCHAR(128) = '',
	@Start DATETIME,
	@End DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF(@Id > 0)
			SELECT *
			FROM [dbo].Schedule
			WHERE Id = @Id
			AND UserId = @UserId
		ELSE
			SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND [Start] 
			BETWEEN CAST(@Start AS DateTime)
			AND CAST(@End + '23:59:59:999' AS DateTime)
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Schedule_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Schedule_Transaction]
	@Action CHAR(1) = 'I',
	@Id INT,
	@Title NVARCHAR(50),
	@Priority TINYINT,
	@Detail NVARCHAR(300),
	@IsAlarm BIT,
	@Start DATETIME,
	@End DATETIME,
	@Color VARCHAR(6),
	@IsExamine BIT,
	@UserId INT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return INT = 0;

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				INSERT INTO [dbo].Schedule
				VALUES(@Title, @Priority, @Detail, @IsAlarm, @Start, @End, @Color, @IsExamine, @UserId)
				SET @return = SCOPE_IDENTITY()
			IF @Action = 'U'
				UPDATE [dbo].Schedule
				SET Title = @Title,
				[Priority] = @Priority,
				Detail = @Detail,
				IsAlarm = @IsAlarm,
				[Start] = @Start,
				[End] = @End,
				Color = @Color,
				IsExamine = @IsExamine,
				UserId = @UserId
				WHERE Id = @Id

				SET @return = @Id
			IF @Action = 'D'
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].Schedule WHERE Id = @Id)
					BEGIN
						DELETE FROM [dbo].Schedule
						WHERE Id = @Id

						SET @return = @Id
					END
				ELSE
					SET @return = 0
		COMMIT TRAN
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_ScheduleExamine]...';


GO
CREATE PROCEDURE [dbo].[usp_ScheduleExamine]
	@UserId NVARCHAR(128) = '',
	@Start DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND [Start] 
			BETWEEN CAST(@Start AS DateTime)
			AND CAST(@Start + '23:59:59:999' AS DateTime)
			AND [IsExamine] = 1
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Setting]...';


GO
CREATE PROC [dbo].[usp_Setting]
	@Id TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT TOP 1 * FROM [dbo].[Setting]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Setting_Transaction]...';


GO
CREATE PROC [dbo].[usp_Setting_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Title NVARCHAR(70) = '',
	@Description NVARCHAR(150) = '',
	@Keyword NVARCHAR(150) = '',
	@Membership BIT = 1,
	@DefaultRole SMALLINT = 1,
	@LoginURL VARCHAR(256) = '',
	@LockedIPNoteDefault NVARCHAR(150) = '',
	@IsSaveCanceledAppointment BIT = 1,
	@AppointmentIntervalTime INT = 15,
	@AppointmentStartTime INT = 8,
	@AppointmentEndTime INT = 5
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF EXISTS(SELECT TOP 1 1 FROM [dbo].[Setting])
		BEGIN
			UPDATE 
				[dbo].[Setting]
			SET 
				[Title] = @Title, 
				[Keyword] = @Keyword, 
				[Description] =  @Description, 
				[Membership] = @Membership,
				[DefaultRole] = @DefaultRole,
				[LoginURL] = @LoginURL,
				[LockedIPNoteDefault] = @LockedIPNoteDefault,
				[IsSaveCanceledAppointment] = @IsSaveCanceledAppointment,
				[AppointmentIntervalTime] = @AppointmentIntervalTime,
				[AppointmentStartTime] = @AppointmentStartTime,
				[AppointmentEndTime] = @AppointmentEndTime
			WHERE [Id] = 1
		END
		ELSE
		BEGIN
			INSERT INTO 
				[dbo].[Setting] 
			VALUES(
				@Title, 
				@Description, 
				@Keyword, 
				@Membership, 
				@DefaultRole, 
				@LoginURL, 
				@LockedIPNoteDefault,
				@IsSaveCanceledAppointment,
				@AppointmentIntervalTime,
				@AppointmentStartTime,
				@AppointmentEndTime)
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_spa_Schedule]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_Schedule]
	@Id INT = 0,
	@UserId NVARCHAR(128) = '',
	@Start DATETIME,
	@End DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF(@Id > 0)
			SELECT *
			FROM [dbo].Schedule
			WHERE Id = @Id
			AND UserId = @UserId
		ELSE
			SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND [Start] 
			BETWEEN CAST(@Start AS DateTime)
			AND CAST(@End + '23:59:59:999' AS DateTime)
			AND IsExamine = 1
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_ScheduleExamine]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_ScheduleExamine]
	@UserId INT = 0,
	@Start DATETIME
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT *
			FROM [dbo].Schedule
			WHERE UserId = @UserId
			AND [Start] 
			BETWEEN CAST(@Start AS DateTime)
			AND CAST(@Start + '23:59:59:999' AS DateTime)
			AND [IsExamine] = 1
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			RETURN NULL
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_User]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_User]
	@Id NVARCHAR(128) = '',
	@Type tinyint = 0,
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
	IF(@Id <> '')
		SELECT * FROM [dbo].[Users]
		WHERE Id = @Id
	ELSE
	BEGIN
		IF(@Type = 1)
			SELECT * FROM [dbo].[Users]
			WHERE IsAdmin = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
		IF(@Type = 2)
			SELECT * FROM [dbo].[Users]
			WHERE IsDoctor = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
							   AND (Tags like '%' + @Search + '%' OR @Search is null)
	END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_User_HasScheduleExamine]...';


GO
CREATE PROCEDURE [dbo].usp_spa_User_HasScheduleExamine
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT DISTINCT 
				dbo.Users.*
		FROM    dbo.Schedule INNER JOIN
				dbo.Users ON dbo.Schedule.UserId = dbo.Users.Id
		WHERE   (dbo.Users.IsDoctor = 1)
				AND (Name like '%' + @Search + '%' OR @Search is null)
				AND (Tags like '%' + @Search + '%' OR @Search is null)
				AND IsExamine = 1
				AND GETDATE() >= [Start]

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_User]...';


GO
CREATE PROC [dbo].[usp_User]
	@Id NVARCHAR(128) = '',
	@Type tinyint = 0,
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
	IF(@Id <> '')
		SELECT * FROM [dbo].[Users]
		WHERE Id = @Id
	ELSE
	BEGIN
		IF(@Type = 1)
			SELECT * FROM [dbo].[Users]
			WHERE IsAdmin = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
		IF(@Type = 2)
			SELECT * FROM [dbo].[Users]
			WHERE IsDoctor = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
							   AND (Tags like '%' + @Search + '%' OR @Search is null)
	END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_User_ChangePassword]...';


GO
CREATE PROCEDURE [dbo].[usp_User_ChangePassword]
	@Id INT,
	@Email NVARCHAR(256),
	@NewPassword VARCHAR(60)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN
			IF EXISTS (SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Email] = @Email)
				BEGIN
					UPDATE [dbo].[Users]
					SET [PasswordHash] = @NewPassword
					WHERE [Email] = @Email
				END
			ELSE
				SET @return = 0
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_User_HasScheduleExamine]...';


GO
CREATE PROCEDURE [dbo].[usp_User_HasScheduleExamine]
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT DISTINCT 
				dbo.Users.*
		FROM    dbo.Schedule INNER JOIN
				dbo.Users ON dbo.Schedule.UserId = dbo.Users.Id
		WHERE   (dbo.Users.IsDoctor = 1)
				AND (Name like '%' + @Search + '%' OR @Search is null)
				AND (Tags like '%' + @Search + '%' OR @Search is null)
				AND IsExamine = 1
				AND GETDATE() >= [Start]

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_UserGroup_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_UserGroup_Transaction]
	@Action CHAR(1) = 'I',
	@UserId INT,
	@GroupId TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN

			IF @Action = 'I' -- INSERT
				IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[UserGroup] WHERE [UserId] = @UserId AND [GroupId] = @GroupId)
					INSERT INTO [dbo].[UserGroup] VALUES(@UserId, @GroupId)
				ELSE
					SET @return = 0

			IF @Action = 'U' -- UPDATE
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].[UserGroup] WHERE [UserId] = @UserId AND [GroupId] = @GroupId)
					UPDATE [dbo].[UserGroup]
					SET [UserId] = @UserId, [GroupId] = @GroupId
					WHERE [UserId] = @UserId
					AND [GroupId] = @GroupId
			ELSE
				SET @return = 0

			IF @Action = 'D' -- DELETE
				IF EXISTS(SELECT TOP 1 1 FROM [dbo].[UserGroup] WHERE [UserId] = @UserId AND [GroupId] = @GroupId)
				BEGIN
					IF @UserId <> 0 AND @GroupId <> 0
						DELETE [dbo].[UserGroup]
						WHERE [UserId] = @UserId
						AND [GroupId] = @GroupId
					ELSE
						SET @return = 0;
				END
				ELSE
					SET @return = 0;
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_UserRole_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_UserRole_Transaction]
	@Action CHAR(1) = 'I',
	@UserId int,
	@RoleId int
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return bit = 1

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[UserRole] WHERE [UserId] = @UserId AND [RoleId] = @RoleId)
					BEGIN
						INSERT INTO [dbo].[UserRole]
						VALUES(@UserId, @RoleId)
					END
				ELSE
					SET @return = 0;
			IF @Action = 'U'
				IF EXISTS(SELECT TOP 1 1 FROM [dbo].UserRole WHERE [UserId] = @UserId AND [RoleId] = @RoleId)
				BEGIN
					IF @UserId <> 0 AND @RoleId <> 0
						UPDATE [dbo].[UserRole]
						SET [UserId] = @UserId,
						[RoleId] = @RoleId
						WHERE [UserId] = @UserId
						AND [RoleId] = @RoleId
					ELSE
						SET @return = 0;
				END
				ELSE
					SET @return = 0;
				
			IF @Action = 'D'
				
				IF EXISTS(SELECT TOP 1 1 FROM [dbo].[UserRole] WHERE [UserId] = @UserId AND [RoleId] = @RoleId)
				BEGIN
					IF @UserId <> 0 AND @RoleId <> 0
						DELETE [dbo].[UserRole]
						WHERE [UserId] = @UserId
						AND [RoleId] = @RoleId
					ELSE
						SET @return = 0;
				END
				ELSE
					SET @return = 0;
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN	
				ROLLBACK TRAN
				SET @return = 0;
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Users_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Users_Transaction]
	@Action CHAR(1) = 'I',
	@Id INT,
	@Name NVARCHAR(32),
	@Code CHAR(20),
	@Email NVARCHAR(256),
	@PasswordHash VARCHAR(60),
	@PhoneNumber VARCHAR(20),
	@HomePhone VARCHAR(20),
	@DateOfBirth DATE,
	@Gender TINYINT,
	@Image VARCHAR(256),
	@OrganizationId SMALLINT,
	@Status BIT,
	@PatientId NVARCHAR(128) = '',
	@IsAdmin BIT,
	@IsDoctor BIT,
	@Tag NVARCHAR(150) = ''
AS BEGIN
	SET NOCOUNT ON
	DECLARE @return BIT = 1

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I'
				IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Users WHERE [Email] = @Email)
					INSERT INTO [dbo].[Users](Id, Name, Code, Email, PasswordHash, PhoneNumber, HomePhone, DateOfBirth, Gender, [Image], OrganizationId, [Status], PatientId, IsAdmin, IsDoctor, Tags)
					VALUES(@Id, @Name, @Code, @Email, @PasswordHash, @PhoneNumber, @HomePhone, 
					@DateOfBirth, @Gender, @Image, @OrganizationId, @Status, @PatientId,
					@IsAdmin, @IsDoctor, @Tag)
				ELSE
					SET @return = 0
			IF @Action = 'U'
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Id] = @Id)
					UPDATE [dbo].[Users]
					SET [Name] = @Name,
					[Code] = @Code,
					[PhoneNumber] = @PhoneNumber,
					[HomePhone] = @HomePhone,
					[DateOfBirth] = @DateOfBirth,
					[Gender] = @Gender,
					[Image] = @Image,
					[OrganizationId] = @OrganizationId,
					[PatientId] = @PatientId,
					[IsAdmin] = @IsAdmin,
					[IsDoctor] = @IsDoctor,
					[Tags] = @Tag
					WHERE [Id] = @Id
				ELSE
					SET @return = 0
			IF @Action = 'D'
				IF EXISTS (SELECT TOP 1 1 FROM [dbo].[Users] WHERE [Id] = @Id)
					DELETE FROM [dbo].[Users]
					WHERE [Id] = @Id
				ELSE
					SET @return = 0
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5a0e568b-81f0-45cd-b7d4-9212651add5a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5a0e568b-81f0-45cd-b7d4-9212651add5a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '97e4ad87-7a6a-436b-bd86-3ec5bb03fda6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('97e4ad87-7a6a-436b-bd86-3ec5bb03fda6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e61564e9-51a8-49f2-a26d-901a4e832207')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e61564e9-51a8-49f2-a26d-901a4e832207')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8e806a56-b28c-4e59-b505-4fe86d2d3b94')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8e806a56-b28c-4e59-b505-4fe86d2d3b94')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6397d019-3c40-4b9d-9f69-f7971a904040')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6397d019-3c40-4b9d-9f69-f7971a904040')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd69ed296-c3c6-45fa-a357-35a051f9173e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d69ed296-c3c6-45fa-a357-35a051f9173e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'deaf03a7-de13-421c-867a-51693e97121d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('deaf03a7-de13-421c-867a-51693e97121d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '39e8d34f-58ee-4e01-8259-16f5328859f8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('39e8d34f-58ee-4e01-8259-16f5328859f8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b86d11cc-8cd0-4b4b-a72e-1efbf9eb4703')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b86d11cc-8cd0-4b4b-a72e-1efbf9eb4703')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '141e94c4-9e9f-49a8-9d99-eea05fb40d33')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('141e94c4-9e9f-49a8-9d99-eea05fb40d33')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4be774d4-1722-4de7-a0a7-0ff30c260eaf')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4be774d4-1722-4de7-a0a7-0ff30c260eaf')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c6b00e0b-8dad-4f94-ae5c-632cc6bb929d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c6b00e0b-8dad-4f94-ae5c-632cc6bb929d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8fe1fd97-031d-4b23-b015-f154896d757d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8fe1fd97-031d-4b23-b015-f154896d757d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8235811f-308f-462f-b73e-593f36c7c9d4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8235811f-308f-462f-b73e-593f36c7c9d4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '34b54559-7b25-4a9e-b544-731268a4d7bc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('34b54559-7b25-4a9e-b544-731268a4d7bc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'eb5b5512-5238-40e5-9532-bb444bcdddf7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('eb5b5512-5238-40e5-9532-bb444bcdddf7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c673adeb-34fe-457f-854c-3c90046b4f76')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c673adeb-34fe-457f-854c-3c90046b4f76')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
