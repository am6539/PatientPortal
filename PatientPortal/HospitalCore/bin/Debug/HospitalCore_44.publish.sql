/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The column [dbo].[Appointment].[Date] is being dropped, data loss could occur.

The column [dbo].[Appointment].[Status] is being dropped, data loss could occur.

The column [dbo].[Appointment].[Time] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Appointment])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column Email in table [dbo].[Users] is currently  NVARCHAR (256) NOT NULL but is being changed to  VARCHAR (256) NOT NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Users])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Rename refactoring operation with key 141e94c4-9e9f-49a8-9d99-eea05fb40d33 is skipped, element [dbo].[AppointmentLog].[Status] (SqlSimpleColumn) will not be renamed to PatientName';


GO
PRINT N'Rename refactoring operation with key 4be774d4-1722-4de7-a0a7-0ff30c260eaf, c6b00e0b-8dad-4f94-ae5c-632cc6bb929d is skipped, element [dbo].[AppointmentCollection].[No] (SqlSimpleColumn) will not be renamed to AppointmentNo';


GO
PRINT N'Rename refactoring operation with key 8fe1fd97-031d-4b23-b015-f154896d757d is skipped, element [dbo].[AppointmentCollection].[PatientAddeess] (SqlSimpleColumn) will not be renamed to PatientAddress';


GO
PRINT N'Dropping [dbo].[Users].[idxUserAccess]...';


GO
DROP INDEX [idxUserAccess]
    ON [dbo].[Users];


GO
PRINT N'Dropping [dbo].[Appointment].[idxAppointmentDate]...';


GO
DROP INDEX [idxAppointmentDate]
    ON [dbo].[Appointment];


GO
PRINT N'Dropping [dbo].[UQ__USERS__A9D1053429B4C0C0]...';


GO
ALTER TABLE [dbo].[Users] DROP CONSTRAINT [UQ__USERS__A9D1053429B4C0C0];


GO
PRINT N'Altering [dbo].[Appointment]...';


GO
ALTER TABLE [dbo].[Appointment] DROP COLUMN [Date], COLUMN [Status], COLUMN [Time];


GO
PRINT N'Altering [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users] ALTER COLUMN [Email] VARCHAR (256) NOT NULL;


GO
PRINT N'Creating [dbo].[UQ__USERS__A9D1053429B4C0C0]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [UQ__USERS__A9D1053429B4C0C0] UNIQUE NONCLUSTERED ([Email] ASC);


GO
PRINT N'Creating [dbo].[Users].[idxUserAccess]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [idxUserAccess]
    ON [dbo].[Users]([Code] ASC, [Email] ASC);


GO
PRINT N'Creating [dbo].[AppointmentCollection]...';


GO
CREATE TABLE [dbo].[AppointmentCollection] (
    [Id]             INT            NOT NULL,
    [Date]           DATE           NOT NULL,
    [Time]           INT            NOT NULL,
    [AppointmentNo]  SMALLINT       NOT NULL,
    [PatientName]    NVARCHAR (50)  NOT NULL,
    [PatientAddress] NVARCHAR (150) NOT NULL,
    [PatientEmail]   VARCHAR (256)  NULL,
    [PatientPhone]   VARCHAR (20)   NULL,
    [PatientGender]  TINYINT        NOT NULL,
    [PatientDoB]     DATE           NULL,
    [Status]         TINYINT        NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AppointmentCollection].[idxAppointmentCollectionNo]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentCollectionNo]
    ON [dbo].[AppointmentCollection]([Date] ASC, [AppointmentNo] ASC);


GO
PRINT N'Creating [dbo].[AppointmentLog]...';


GO
CREATE TABLE [dbo].[AppointmentLog] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [Date]           DATE             NOT NULL,
    [Time]           INT              NOT NULL,
    [PhysicianId]    INT              NOT NULL,
    [PatientId]      INT              NOT NULL,
    [Symptom]        NVARCHAR (MAX)   NOT NULL,
    [PatientName]    NVARCHAR (50)    NULL,
    [PatientAddress] NVARCHAR (150)   NULL,
    [PatientEmail]   VARCHAR (256)    NULL,
    [PatientPhone]   VARCHAR (20)     NULL,
    [PatientGender]  TINYINT          NULL,
    [PatientDoB]     DATE             NULL,
    [CreatedDate]    VARCHAR (20)     NOT NULL,
    [ModifiedDate]   VARCHAR (20)     NOT NULL,
    [Status]         TINYINT          NOT NULL,
    CONSTRAINT [PK_AppointmentLog] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AppointmentLog].[idxAppointmentLogDate]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentLogDate]
    ON [dbo].[AppointmentLog]([Date] ASC);


GO
PRINT N'Creating [dbo].[AppointmentLog].[idxAppointmentLogPatient]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentLogPatient]
    ON [dbo].[AppointmentLog]([PatientId] ASC);


GO
PRINT N'Creating [dbo].[AppointmentLog].[idxAppointmentLogPhysician]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentLogPhysician]
    ON [dbo].[AppointmentLog]([PhysicianId] ASC);


GO
PRINT N'Altering [dbo].[usp_Appointment]...';


GO
ALTER PROC [dbo].[usp_Appointment]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT a.*,
			b.[Date], b.[Time], b.[AppointmentNo],
			b.[PatientName], b.[PatientAddress], b.[PatientEmail], b.[PatientPhone],
			b.[PatientGender], b.[PatientDoB], b.[Status]
		FROM [dbo].[Appointment] a RIGHT JOIN [dbo].[AppointmentCollection] b 
		ON a.Id = b.Id
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_Appointment_Transaction]...';


GO
ALTER PROC [dbo].[usp_Appointment_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,--Appointment
	@PhysicianId INT = 0,
	@PatientId INT = 0,
	@Symptom NVARCHAR(300) = '',
	@Date DATE = '', --AppointmentCollection
	@Time int = 8,
	@AppointmentNo SMALLINT = 0,
	@PatientName NVARCHAR(50) = '',
	@PatientAddress NVARCHAR(150) = '',
	@PatientEmail VARCHAR(256) = '',
	@PatientPhone VARCHAR(20) = '',
	@PatientGender TINYINT = 1,
	@PatientDoB DATE = '',
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)

	BEGIN TRY
		BEGIN TRAN;

			SET @ModifiedDate = [dbo].[ufnGetDate]()

			IF @Action = 'I' --INSERT
			BEGIN
				
				SET @CreatedDate = @ModifiedDate

				INSERT [dbo].[Appointment]
				VALUES(@PhysicianId, @PatientId, @Symptom, @CreatedDate, @ModifiedDate)

				SET @return = SCOPE_IDENTITY()

				INSERT [dbo].[AppointmentCollection] 
				VALUES(@Id, @Date, @Time, @AppointmentNo, @PatientName, @PatientAddress, @PatientEmail, @PatientPhone, @PatientGender, @PatientDoB, @Status)
				
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				--STATUS: 0 - Just Created/Pending, 1 - Approved, 2 - Canceled
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[Appointment] WHERE [Id] = @Id)
				BEGIN
					UPDATE [dbo].[Appointment]
					SET [PhysicianId] = @PhysicianId, [PatientId] = @PatientId, [Symptom] = @Symptom, [ModifiedDate] = @ModifiedDate
					WHERE [Id] = @Id  

					UPDATE [dbo].[AppointmentCollection]
					SET [AppointmentNo] = @AppointmentNo, [PatientName] = @PatientName, [PatientEmail] = @PatientEmail,
					[PatientAddress] = @PatientAddress, [PatientPhone] = @PatientPhone ,[PatientGender] = @PatientGender, [PatientDoB] =  @PatientDoB, [Status] = @Status
					WHERE [Id] = @Id  

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[Appointment] WHERE [Id] = @Id)
				BEGIN
					DELETE FROM [dbo].[AppointmentCollection]
					WHERE [Id] = @Id

					DELETE FROM [dbo].[Appointment]
					WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Altering [dbo].[usp_User]...';


GO
ALTER PROC [dbo].[usp_User]
	@Id int = 0,
	@Type tinyint = 0,
	@Search nvarchar(250) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
	IF(@Id > 0)
		SELECT * FROM [dbo].[Users]
		WHERE Id = @Id
	ELSE
	BEGIN
		IF(@Type = 1)
			SELECT * FROM [dbo].[Users]
			WHERE IsAdmin = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
		IF(@Type = 2)
			SELECT * FROM [dbo].[Users]
			WHERE IsDoctor = 1 AND (Name like '%' + @Search + '%' OR @Search is null)
							   AND (Tags like '%' + @Search + '%' OR @Search is null)
	END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_Article]...';


GO
ALTER PROC [dbo].[usp_Article]
	@Id int
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id = 0 
			SELECT *,  (SELECT COUNT(b.Id) from ArticleComment b where ArticleId = a.Id) as CountComments
			FROM [dbo].[Article] a
		ELSE
			SELECT * , (SELECT COUNT(b.Id) from ArticleComment b where ArticleId = a.Id) as CountComments
			FROM [dbo].[Article] a WHERE Id = @Id
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_Article_Transaction]...';


GO
ALTER PROC [dbo].[usp_Article_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Date datetime,
	@Title NVARCHAR(150) = '',
	@Detail NVARCHAR(1000) = '',
	@PatientId INT = 0,
	@Status TINYINT = 1,
	@IsClosed BIT, 
	@CountComments INT
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0
	DECLARE @CurrentDate SMALLDATETIME

	BEGIN TRY
		BEGIN TRAN;
			SET @CurrentDate = GETDATE()

			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Article]
				VALUES(@CurrentDate, @Title, @Detail, @PatientId, @Status, @IsClosed)

				SET @return = SCOPE_IDENTITY()
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN
					UPDATE [dbo].[Article]
					SET [Title] = @Title, [Detail] = @Detail, [Status] = @Status, [IsClosed] = @IsClosed
					WHERE [Id] = @Id  

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN	
					-- Article Comment Table
					DELETE FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id

					-- Article Table
					DELETE FROM [dbo].[Article] WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Altering [dbo].[usp_ArticleComment]...';


GO
ALTER PROC [dbo].[usp_ArticleComment] (
	@TypeGet tinyint = 0, -- 0: get all comment by ArticleId ; 1: Get comment by Id
	@Id INT = 0,
	@ArticleId INT = 0
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @TypeGet = 0
			SELECT * FROM [dbo].[ArticleComment] WHERE [ArticleId] = @ArticleId
		ELSE If @TypeGet = 1
			SELECT * FROM [dbo].[ArticleComment] WHERE [Id] = @Id AND [ArticleId] = @ArticleId

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_ArticleComment_Transaction]...';


GO
ALTER PROC [dbo].[usp_ArticleComment_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@ArticleId SMALLINT = 1,
	@Date datetime,
	@Detail NVARCHAR(1000) ='',
	@CreatedUser INT = 0,
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return INT = 0
	DECLARE @CurrentDate SMALLDATETIME

	BEGIN TRY
		BEGIN TRAN;
			SET @CurrentDate = GETDATE()

			IF @Action = 'I' --INSERT
			BEGIN				
				SELECT @Id = ISNULL(MAX([Id]),0) + 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @ArticleId
				INSERT [dbo].[ArticleComment]
				VALUES(@Id, @ArticleId, @CurrentDate, @Detail, @CreatedUser, @Status)

				--SET @return = SCOPE_IDENTITY()
				SET @return = @Id
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF @ArticleId > 0 AND @Id > 0
				BEGIN

					UPDATE [dbo].[ArticleComment]
					SET [Detail] = @Detail, [Status] = @Status, [Date] = @CurrentDate
					WHERE [Id] = @Id  AND [ArticleId] = @ArticleId
					
					SET @return = @Id
					print @return
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF @ArticleId > 0 AND @Id > 0
				BEGIN
					DELETE FROM [dbo].[ArticleComment]
					WHERE [Id] = @Id  AND [ArticleId] = @ArticleId

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Altering [dbo].[usp_Setting]...';


GO
ALTER PROC [dbo].[usp_Setting]
	@Id TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT TOP 1 * FROM [dbo].[Setting]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_Setting_Transaction]...';


GO
ALTER PROC [dbo].[usp_Setting_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Title NVARCHAR(70) = '',
	@Description NVARCHAR(150) = '',
	@Keyword NVARCHAR(150) = '',
	@Membership BIT = 1,
	@DefaultRole SMALLINT = 1,
	@LoginURL VARCHAR(256) = '',
	@LockedIPNoteDefault NVARCHAR(150) = ''
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF EXISTS(SELECT TOP 1 1 FROM [dbo].[Setting])
		BEGIN
			UPDATE [dbo].[Setting]
				SET [Title] = @Title, [Keyword] = @Keyword, [Description] =  @Description, [Membership] = @Membership,
				[DefaultRole] = @DefaultRole, [LoginURL] = @LoginURL,
				[LockedIPNoteDefault] = @LockedIPNoteDefault
				WHERE [Id] = 1
		END
		ELSE
		BEGIN
			INSERT INTO [dbo].[Setting] VALUES(@Title, @Description, @Keyword, @Membership, @DefaultRole, @LoginURL, @LockedIPNoteDefault)
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_AppointmentLog]...';


GO
CREATE PROC [dbo].[usp_AppointmentLog]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[AppointmentLog]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_AppointmentLog_Transaction]...';


GO
CREATE PROC [dbo].[usp_AppointmentLog_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id UNIQUEIDENTIFIER,
	@Date DATE = '',
	@Time int = 8,
	@PhysicianId INT = 0,
	@PatientId INT = 0,
	@Symptom NVARCHAR(300) = '',
	@PatientName NVARCHAR(50) = '',
	@PatientAddress NVARCHAR(150) = '',
	@PatientEmail VARCHAR(256) = '',
	@PatientPhone VARCHAR(20) = '',
	@PatientGender TINYINT = 1,
	@PatientDoB DATE = '',
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return BIT = 1
	DECLARE @CreatedDate VARCHAR(20)
	DECLARE @ModifiedDate VARCHAR(20)

	BEGIN TRY
		BEGIN TRAN;

			SET @ModifiedDate = [dbo].[ufnGetDate]()
			IF @Action = 'I' --INSERT
			BEGIN
				SET @Id = NEWID(); 
				SET @CreatedDate = @ModifiedDate

				INSERT [dbo].[AppointmentLog]
				VALUES(@Id, @Date, @Time, @PhysicianId, @PatientId, @Symptom,@PatientName,@PatientAddress,@PatientEmail,@PatientPhone,@PatientGender,@PatientDoB, @CreatedDate, @ModifiedDate, @Status)

			END

			IF @Action = 'U' --UPDATE
			BEGIN
				--STATUS: 0 - Just Created/Pending, 1 - Approved, 2 - Canceled
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[AppointmentLog] WHERE [Id] = @Id)
				BEGIN
					UPDATE [dbo].[AppointmentLog]
					SET [Date] = @Date, [Time] = @Time, [PhysicianId] = @PhysicianId, 
					[PatientId] = @PatientId, [Symptom] = @Symptom,
					[PatientName] = @PatientName, [PatientAddress] = @PatientAddress, [PatientEmail] = @PatientEmail, [PatientPhone] = @PatientPhone,
					[PatientGender] = @PatientGender, [PatientDoB] = @PatientDoB,
					[ModifiedDate] = @ModifiedDate, [Status] = @Status
					WHERE [Id] = @Id  

				END
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF EXISTS( SELECT TOP 1 1 FROM [dbo].[AppointmentLog] WHERE [Id] = @Id)
				BEGIN
					DELETE FROM [dbo].[AppointmentLog]
					WHERE [Id] = @Id
				END

			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return;
END
GO
PRINT N'Refreshing [dbo].[usp_Login]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Login]';


GO
PRINT N'Refreshing [dbo].[usp_Organization_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Organization_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_User_ChangePassword]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_User_ChangePassword]';


GO
PRINT N'Refreshing [dbo].[usp_Users_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Users_Transaction]';


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '141e94c4-9e9f-49a8-9d99-eea05fb40d33')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('141e94c4-9e9f-49a8-9d99-eea05fb40d33')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4be774d4-1722-4de7-a0a7-0ff30c260eaf')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4be774d4-1722-4de7-a0a7-0ff30c260eaf')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c6b00e0b-8dad-4f94-ae5c-632cc6bb929d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c6b00e0b-8dad-4f94-ae5c-632cc6bb929d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8fe1fd97-031d-4b23-b015-f154896d757d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8fe1fd97-031d-4b23-b015-f154896d757d')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Update complete.';


GO
