/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The column [dbo].[OfferAdvise].[Tags] on table [dbo].[OfferAdvise] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[OfferAdvise])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Schedule].[DateTo] on table [dbo].[Schedule] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Schedule].[UserId] on table [dbo].[Schedule] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Schedule])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'The following operation was generated from a refactoring log file e61564e9-51a8-49f2-a26d-901a4e832207';

PRINT N'Rename [dbo].[Schedule].[Date] to DateFrom';


GO
EXECUTE sp_rename @objname = N'[dbo].[Schedule].[Date]', @newname = N'DateFrom', @objtype = N'COLUMN';


GO
PRINT N'The following operation was generated from a refactoring log file 8e806a56-b28c-4e59-b505-4fe86d2d3b94';

PRINT N'Rename [dbo].[Schedule].[From] to TimeFrom';


GO
EXECUTE sp_rename @objname = N'[dbo].[Schedule].[From]', @newname = N'TimeFrom', @objtype = N'COLUMN';


GO
PRINT N'The following operation was generated from a refactoring log file 6397d019-3c40-4b9d-9f69-f7971a904040';

PRINT N'Rename [dbo].[Schedule].[To] to TimeTo';


GO
EXECUTE sp_rename @objname = N'[dbo].[Schedule].[To]', @newname = N'TimeTo', @objtype = N'COLUMN';


GO
PRINT N'Altering [dbo].[Appointment]...';


GO
ALTER TABLE [dbo].[Appointment] ALTER COLUMN [Symptom] NVARCHAR (MAX) NOT NULL;


GO
PRINT N'Altering [dbo].[OfferAdvise]...';


GO
ALTER TABLE [dbo].[OfferAdvise]
    ADD [Tags] NVARCHAR (150) NOT NULL;


GO
PRINT N'Starting rebuilding table [dbo].[Schedule]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Schedule] (
    [Id]        INT            NOT NULL,
    [Title]     NVARCHAR (50)  NOT NULL,
    [Priority]  TINYINT        NOT NULL,
    [Detail]    NVARCHAR (300) NOT NULL,
    [IsAlarm]   BIT            NOT NULL,
    [DateFrom]  DATE           NOT NULL,
    [DateTo]    DATE           NOT NULL,
    [TimeFrom]  INT            NOT NULL,
    [TimeTo]    INT            NOT NULL,
    [Color]     VARCHAR (6)    NOT NULL,
    [IsExamine] BIT            NOT NULL,
    [UserId]    INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Schedule])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Schedule] ([Id], [Title], [Priority], [Detail], [IsAlarm], [DateFrom], [TimeFrom], [TimeTo], [Color], [IsExamine])
        SELECT   [Id],
                 [Title],
                 [Priority],
                 [Detail],
                 [IsAlarm],
                 [DateFrom],
                 [TimeFrom],
                 [TimeTo],
                 [Color],
                 [IsExamine]
        FROM     [dbo].[Schedule]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[Schedule];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Schedule]', N'Schedule';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[FK_Schedule_User]...';


GO
ALTER TABLE [dbo].[Schedule] WITH NOCHECK
    ADD CONSTRAINT [FK_Schedule_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Refreshing [dbo].[usp_Appointment]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Appointment]';


GO
PRINT N'Refreshing [dbo].[usp_Appointment_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Appointment_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_OfferAdvise]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_OfferAdvise]';


GO
PRINT N'Refreshing [dbo].[usp_OfferAdvise_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_OfferAdvise_Transaction]';


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e61564e9-51a8-49f2-a26d-901a4e832207')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e61564e9-51a8-49f2-a26d-901a4e832207')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8e806a56-b28c-4e59-b505-4fe86d2d3b94')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8e806a56-b28c-4e59-b505-4fe86d2d3b94')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6397d019-3c40-4b9d-9f69-f7971a904040')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6397d019-3c40-4b9d-9f69-f7971a904040')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DELETE FROM [dbo].[Group]
GO
INSERT INTO [dbo].[Group] VALUES(N'Content Management System (CMS)', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Patient Services', 1)
GO
INSERT INTO [dbo].[Group] VALUES(N'Internal Services', 1)
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Schedule] WITH CHECK CHECK CONSTRAINT [FK_Schedule_User];


GO
PRINT N'Update complete.';


GO
