/*
Deployment script for HospitalCore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCore"
:setvar DefaultFilePrefix "HospitalCore"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Creating [dbo].[Appointment]...';


GO
CREATE TABLE [dbo].[Appointment] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [Date]         SMALLDATETIME  NOT NULL,
    [Time]         CHAR (5)       NOT NULL,
    [Medicine]     NVARCHAR (50)  NOT NULL,
    [PhysicianId]  INT            NOT NULL,
    [PatientId]    INT            NOT NULL,
    [Symptom]      NVARCHAR (300) NOT NULL,
    [CreatedDate]  VARCHAR (20)   NOT NULL,
    [ModifiedDate] VARCHAR (20)   NOT NULL,
    [Status]       TINYINT        NOT NULL,
    CONSTRAINT [PK_Appointment] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Appointment].[idxAppointmentDate]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentDate]
    ON [dbo].[Appointment]([Date] ASC);


GO
PRINT N'Creating [dbo].[Appointment].[idxAppointmentPatient]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentPatient]
    ON [dbo].[Appointment]([PatientId] ASC);


GO
PRINT N'Creating [dbo].[Appointment].[idxAppointmentPhysician]...';


GO
CREATE NONCLUSTERED INDEX [idxAppointmentPhysician]
    ON [dbo].[Appointment]([PhysicianId] ASC);


GO
PRINT N'Creating [dbo].[Article]...';


GO
CREATE TABLE [dbo].[Article] (
    [Id]        INT             IDENTITY (1, 1) NOT NULL,
    [Date]      SMALLDATETIME   NOT NULL,
    [Title]     NVARCHAR (150)  NOT NULL,
    [Detail]    NVARCHAR (1000) NOT NULL,
    [PatientId] INT             NOT NULL,
    [Status]    TINYINT         NOT NULL,
    CONSTRAINT [PK_Article] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ArticleComment]...';


GO
CREATE TABLE [dbo].[ArticleComment] (
    [Id]          SMALLINT        NOT NULL,
    [ArticleId]   INT             NOT NULL,
    [Date]        SMALLDATETIME   NOT NULL,
    [Detail]      NVARCHAR (1000) NOT NULL,
    [CreatedUser] INT             NOT NULL,
    [Status]      TINYINT         NOT NULL,
    CONSTRAINT [PK_ArticleComment] PRIMARY KEY CLUSTERED ([Id] ASC, [ArticleId] ASC)
);


GO
PRINT N'Creating [dbo].[Group]...';


GO
CREATE TABLE [dbo].[Group] (
    [Id]   TINYINT       IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_Group] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MailSetting]...';


GO
CREATE TABLE [dbo].[MailSetting] (
    [Id]    TINYINT       IDENTITY (1, 1) NOT NULL,
    [Email] VARCHAR (256) NOT NULL,
    [Host]  VARCHAR (150) NOT NULL,
    [Port]  NUMERIC (3)   NOT NULL,
    [IsSSL] BIT           NOT NULL,
    CONSTRAINT [PK_MailConfig] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Message]...';


GO
CREATE TABLE [dbo].[Message] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [FolderId]   TINYINT        NOT NULL,
    [Subject]    NVARCHAR (250) NOT NULL,
    [Date]       SMALLDATETIME  NOT NULL,
    [SenderId]   INT            NOT NULL,
    [ReceiverId] INT            NOT NULL,
    [IsRead]     BIT            NOT NULL,
    [IsSend]     BIT            NOT NULL,
    [IsPriority] BIT            NOT NULL,
    CONSTRAINT [PK_Message] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MessageContent]...';


GO
CREATE TABLE [dbo].[MessageContent] (
    [MessageId] INT            NOT NULL,
    [Detail]    NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_MessageContent] PRIMARY KEY CLUSTERED ([MessageId] ASC)
);


GO
PRINT N'Creating [dbo].[MessageFolder]...';


GO
CREATE TABLE [dbo].[MessageFolder] (
    [Id]   TINYINT        IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (50)  NOT NULL,
    [Path] NVARCHAR (256) NOT NULL,
    CONSTRAINT [PK_MessageFolder] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MessageRecipient]...';


GO
CREATE TABLE [dbo].[MessageRecipient] (
    [MessageId]  INT NOT NULL,
    [ReceiverId] INT NOT NULL,
    CONSTRAINT [PK_MessageRecipient] PRIMARY KEY CLUSTERED ([MessageId] ASC, [ReceiverId] ASC)
);


GO
PRINT N'Creating [dbo].[Module]...';


GO
CREATE TABLE [dbo].[Module] (
    [Id]       SMALLINT       IDENTITY (1, 1) NOT NULL,
    [Title]    NVARCHAR (128) NOT NULL,
    [Handler]  NVARCHAR (256) NOT NULL,
    [Sort]     TINYINT        NOT NULL,
    [ParentId] SMALLINT       NOT NULL,
    CONSTRAINT [PK_Module] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[OfferAdvise]...';


GO
CREATE TABLE [dbo].[OfferAdvise] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Date]      SMALLDATETIME  NOT NULL,
    [Detail]    NVARCHAR (MAX) NOT NULL,
    [PatientId] INT            NOT NULL,
    CONSTRAINT [PK_OfferAdvise] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Organization]...';


GO
CREATE TABLE [dbo].[Organization] (
    [Id]       SMALLINT       IDENTITY (1, 1) NOT NULL,
    [ParentId] SMALLINT       NOT NULL,
    [Name]     NVARCHAR (150) NOT NULL,
    [Phone]    VARCHAR (50)   NULL,
    [Fax]      VARCHAR (50)   NULL,
    [Email]    VARCHAR (256)  NULL,
    [Address]  VARCHAR (150)  NULL,
    CONSTRAINT [PK_Organization] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Permission]...';


GO
CREATE TABLE [dbo].[Permission] (
    [RoleId]    SMALLINT NOT NULL,
    [ModuleId]  SMALLINT NOT NULL,
    [IsRead]    BIT      NOT NULL,
    [IsWrite]   BIT      NOT NULL,
    [IsCreate]  BIT      NOT NULL,
    [IsModify]  BIT      NOT NULL,
    [IsDestroy] BIT      NOT NULL,
    [IsPrint]   BIT      NOT NULL,
    CONSTRAINT [PK_Permission] PRIMARY KEY CLUSTERED ([RoleId] ASC, [ModuleId] ASC)
);


GO
PRINT N'Creating [dbo].[Role]...';


GO
CREATE TABLE [dbo].[Role] (
    [Id]   SMALLINT       IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_Role] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Setting]...';


GO
CREATE TABLE [dbo].[Setting] (
    [Id]          TINYINT        IDENTITY (1, 1) NOT NULL,
    [Title]       NVARCHAR (70)  NOT NULL,
    [Description] NVARCHAR (150) NOT NULL,
    [Keyword]     NVARCHAR (150) NOT NULL,
    [Membership]  BIT            NOT NULL,
    [DefaultRole] SMALLINT       NOT NULL,
    [LoginURL]    VARCHAR (256)  NOT NULL,
    CONSTRAINT [PK_Setting] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UserGroup]...';


GO
CREATE TABLE [dbo].[UserGroup] (
    [UserId]  INT     NOT NULL,
    [GroupId] TINYINT NOT NULL,
    CONSTRAINT [PK_UserGroup] PRIMARY KEY CLUSTERED ([UserId] ASC, [GroupId] ASC)
);


GO
PRINT N'Creating [dbo].[UserRole]...';


GO
CREATE TABLE [dbo].[UserRole] (
    [UserId] INT      NOT NULL,
    [RoleId] SMALLINT NOT NULL,
    CONSTRAINT [PK_UserRole] PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [Name]           NVARCHAR (32)  NOT NULL,
    [Code]           CHAR (20)      NOT NULL,
    [Email]          NVARCHAR (256) NOT NULL,
    [PasswordHash]   VARCHAR (60)   NOT NULL,
    [PhoneNumber]    VARCHAR (20)   NULL,
    [HomePhone]      VARCHAR (20)   NULL,
    [DateOfBirth]    DATE           NULL,
    [Gender]         TINYINT        NOT NULL,
    [Image]          VARCHAR (256)  NULL,
    [OrganizationId] SMALLINT       NOT NULL,
    [Status]         BIT            NOT NULL,
    CONSTRAINT [PK_USERS] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQ__USERS__A9D1053429B4C0C0] UNIQUE NONCLUSTERED ([Email] ASC)
);


GO
PRINT N'Creating [dbo].[Users].[idxUserAccess]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [idxUserAccess]
    ON [dbo].[Users]([Code] ASC, [Email] ASC);


GO
PRINT N'Creating [dbo].[DF__USERS__Gender__108B795B]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [DF__USERS__Gender__108B795B] DEFAULT ((1)) FOR [Gender];


GO
PRINT N'Creating [dbo].[DF__USERS__Status__117F9D94]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [DF__USERS__Status__117F9D94] DEFAULT ((1)) FOR [Status];


GO
PRINT N'Creating [dbo].[FK_Article_Users]...';


GO
ALTER TABLE [dbo].[Article] WITH NOCHECK
    ADD CONSTRAINT [FK_Article_Users] FOREIGN KEY ([PatientId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_ArticleComment_Article]...';


GO
ALTER TABLE [dbo].[ArticleComment] WITH NOCHECK
    ADD CONSTRAINT [FK_ArticleComment_Article] FOREIGN KEY ([ArticleId]) REFERENCES [dbo].[Article] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Message_MessageFolder]...';


GO
ALTER TABLE [dbo].[Message] WITH NOCHECK
    ADD CONSTRAINT [FK_Message_MessageFolder] FOREIGN KEY ([FolderId]) REFERENCES [dbo].[MessageFolder] ([Id]);


GO
PRINT N'Creating [dbo].[FK_MessageContent_Message]...';


GO
ALTER TABLE [dbo].[MessageContent] WITH NOCHECK
    ADD CONSTRAINT [FK_MessageContent_Message] FOREIGN KEY ([MessageId]) REFERENCES [dbo].[Message] ([Id]);


GO
PRINT N'Creating [dbo].[FK_MessageRecipient_Message]...';


GO
ALTER TABLE [dbo].[MessageRecipient] WITH NOCHECK
    ADD CONSTRAINT [FK_MessageRecipient_Message] FOREIGN KEY ([MessageId]) REFERENCES [dbo].[Message] ([Id]);


GO
PRINT N'Creating [dbo].[FK_MessageRecipient_Users]...';


GO
ALTER TABLE [dbo].[MessageRecipient] WITH NOCHECK
    ADD CONSTRAINT [FK_MessageRecipient_Users] FOREIGN KEY ([ReceiverId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_OfferAdvise_Users]...';


GO
ALTER TABLE [dbo].[OfferAdvise] WITH NOCHECK
    ADD CONSTRAINT [FK_OfferAdvise_Users] FOREIGN KEY ([PatientId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Permission_Module]...';


GO
ALTER TABLE [dbo].[Permission] WITH NOCHECK
    ADD CONSTRAINT [FK_Permission_Module] FOREIGN KEY ([ModuleId]) REFERENCES [dbo].[Module] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Permission_Role]...';


GO
ALTER TABLE [dbo].[Permission] WITH NOCHECK
    ADD CONSTRAINT [FK_Permission_Role] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Role] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserGroup_Group]...';


GO
ALTER TABLE [dbo].[UserGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_UserGroup_Group] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[Group] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserGroup_Users]...';


GO
ALTER TABLE [dbo].[UserGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_UserGroup_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserRole_Role]...';


GO
ALTER TABLE [dbo].[UserRole] WITH NOCHECK
    ADD CONSTRAINT [FK_UserRole_Role] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Role] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserRole_Users]...';


GO
ALTER TABLE [dbo].[UserRole] WITH NOCHECK
    ADD CONSTRAINT [FK_UserRole_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Users_Organization]...';


GO
ALTER TABLE [dbo].[Users] WITH NOCHECK
    ADD CONSTRAINT [FK_Users_Organization] FOREIGN KEY ([OrganizationId]) REFERENCES [dbo].[Organization] ([Id]);


GO
PRINT N'Creating [dbo].[usp_Appointment]...';


GO
CREATE PROC [dbo].[usp_Appointment]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[Appointment]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Appointment_Transaction]...';


GO
CREATE PROC [dbo].[usp_Appointment_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Date SMALLDATETIME,
	@Time CHAR(5),
	@Medicine NVARCHAR(50) = '',
	@PhysicianId INT = 0,
	@PatientId INT = 0,
	@Symptom NVARCHAR(300) = '',
	@CreatedDate VARCHAR(20) = '',
	@ModifiedDate NVARCHAR(20) = '',
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return bit = 1

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Appointment]
				VALUES(@Date, @Time, @Medicine, @PhysicianId, @PatientId, @Symptom, @CreatedDate, @ModifiedDate, @Status)
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				UPDATE [dbo].[Appointment]
				SET [Date] = @Date, [Time] = @Time, [PhysicianId] = @PhysicianId, [PatientId] = @PatientId, [Symptom] = @Symptom, [CreatedDate] = @CreatedDate, [ModifiedDate] = @ModifiedDate, [Status] = @Status
				WHERE [Id] = @Id  
			END

			IF @Action = 'D' --DELETE
			BEGIN
				DELETE FROM [dbo].[Appointment]
				WHERE [Id] = @Id
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	RETURN @return;
END
GO
PRINT N'Creating [dbo].[usp_Article]...';


GO
CREATE PROC [dbo].[usp_Article]
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[Article]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Article_Transaction]...';


GO
CREATE PROC [dbo].[usp_Article_Transaction]
(
	@Action CHAR(1) = 'I',
	@Id INT = 1,
	@Date SMALLDATETIME,
	@Title NVARCHAR(150) = '',
	@Detail NVARCHAR(1000) = '',
	@PatientId INT = 0,
	@Status TINYINT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	DECLARE @return bit = 1

	BEGIN TRY
		BEGIN TRAN;
		
			IF @Action = 'I' --INSERT
			BEGIN
				INSERT [dbo].[Article]
				VALUES(@Date, @Title, @Detail, @PatientId, @Status)
			END

			IF @Action = 'U' --UPDATE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN
					UPDATE [dbo].[Article]
					SET [Date] = @Date, [Title] = @Title, [Detail] = @Detail, [Status] = @Status
					WHERE [Id] = @Id  
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' --DELETE
			BEGIN
				IF NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[ArticleComment] WHERE [ArticleId] = @Id)
				BEGIN
					DELETE FROM [dbo].[Article]
					WHERE [Id] = @Id
				END
				ELSE
					SET @return = 0
			END

			COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	RETURN @return;
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Article] WITH CHECK CHECK CONSTRAINT [FK_Article_Users];

ALTER TABLE [dbo].[ArticleComment] WITH CHECK CHECK CONSTRAINT [FK_ArticleComment_Article];

ALTER TABLE [dbo].[Message] WITH CHECK CHECK CONSTRAINT [FK_Message_MessageFolder];

ALTER TABLE [dbo].[MessageContent] WITH CHECK CHECK CONSTRAINT [FK_MessageContent_Message];

ALTER TABLE [dbo].[MessageRecipient] WITH CHECK CHECK CONSTRAINT [FK_MessageRecipient_Message];

ALTER TABLE [dbo].[MessageRecipient] WITH CHECK CHECK CONSTRAINT [FK_MessageRecipient_Users];

ALTER TABLE [dbo].[OfferAdvise] WITH CHECK CHECK CONSTRAINT [FK_OfferAdvise_Users];

ALTER TABLE [dbo].[Permission] WITH CHECK CHECK CONSTRAINT [FK_Permission_Module];

ALTER TABLE [dbo].[Permission] WITH CHECK CHECK CONSTRAINT [FK_Permission_Role];

ALTER TABLE [dbo].[UserGroup] WITH CHECK CHECK CONSTRAINT [FK_UserGroup_Group];

ALTER TABLE [dbo].[UserGroup] WITH CHECK CHECK CONSTRAINT [FK_UserGroup_Users];

ALTER TABLE [dbo].[UserRole] WITH CHECK CHECK CONSTRAINT [FK_UserRole_Role];

ALTER TABLE [dbo].[UserRole] WITH CHECK CHECK CONSTRAINT [FK_UserRole_Users];

ALTER TABLE [dbo].[Users] WITH CHECK CHECK CONSTRAINT [FK_Users_Organization];


GO
PRINT N'Update complete.';


GO
