/*
Deployment script for HospitalCMS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCMS"
:setvar DefaultFilePrefix "HospitalCMS"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The column [dbo].[Post].[ExpiredDate] on table [dbo].[Post] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[Post].[Priority] on table [dbo].[Post] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Post])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Altering [dbo].[Post]...';


GO
ALTER TABLE [dbo].[Post]
    ADD [Priority]    TINYINT NOT NULL,
        [ExpiredDate] DATE    NOT NULL;


GO
PRINT N'Creating [dbo].[CMS]...';


GO
CREATE TABLE [dbo].[CMS] (
    [Id]                 TINYINT        NOT NULL,
    [Name]               NVARCHAR (250) NOT NULL,
    [Address]            NVARCHAR (250) NOT NULL,
    [Phone]              VARCHAR (100)  NOT NULL,
    [Fax]                VARCHAR (100)  NOT NULL,
    [Hotline]            VARCHAR (50)   NOT NULL,
    [GoogleMap]          NVARCHAR (MAX) NOT NULL,
    [GoogleEngineScript] NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Altering [dbo].[usp_Post_Transaction]...';


GO
ALTER PROCEDURE [dbo].[usp_Post_Transaction]
	@Action CHAR(1) = 'I',
	@Id INT,
	@Image VARCHAR(256),
	@Author NVARCHAR(50),
	@WorkflowStateId TINYINT = 1,
	@CategoryId TINYINT,
	@Status TINYINT = 1,
	@CreatedBy INT,
	@ModifiedBy INT,
	@Priority TINYINT,
	@ExpiredDate DATE,
	-- PostSEO
	@PostId INT,
	@TitleSEO NVARCHAR(71),
	@DescriptionSEO NVARCHAR(160),
	@Canonical VARCHAR(256),
	@BreadcrumbsTitle NVARCHAR(71),
	@MetaRobotIndex TINYINT,
	@MetaRobotFollow TINYINT,
	@MetaRobotAdvanced TINYINT,
	-- PostTrans
	@LanguageId TINYINT,
	@TitleTrans NVARCHAR(256),
	@DecriptionTrans NVARCHAR(1000),
	@Detail NVARCHAR(MAX),
	@Tag NVARCHAR(60),
	-- PostStateHistory
	@UserId INT,
	@Note NVARCHAR(500) 
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return BIT = 1
	DECLARE @Date SMALLDATETIME, @PresentDate VARCHAR(20)
	SET @Date = GETDATE()
	SET @PresentDate = [dbo].[ufnGetDate]()

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I' 
			BEGIN
				-- Post Table
				INSERT INTO [dbo].[Post]
				VALUES(@Date, @Image, @Author, @WorkflowStateId, @CategoryId, @Status, @PresentDate,
				@CreatedBy, @PresentDate, @ModifiedBy, @Priority, @ExpiredDate)

				-- PostSEO Table
				SET @PostId = SCOPE_IDENTITY()
				INSERT INTO [dbo].[PostSEO]
				VALUES(@PostId, @TitleSEO, @DescriptionSEO, @Canonical, @BreadcrumbsTitle, @MetaRobotIndex,
				@MetaRobotFollow, @MetaRobotAdvanced)

				-- PostTrans Table
				INSERT INTO [dbo].[PostTrans]
				VALUES(@PostId, @LanguageId, @TitleTrans, @DecriptionTrans, @Detail, @Tag)

				-- PostStateHistory Table
				INSERT INTO [dbo].[PostStateHistory]
				VALUES(@PostId, @WorkflowStateId, @UserId, @Note, @PresentDate)
			END				
			IF @Action = 'U' 
			BEGIN
				-- Post Table
				UPDATE [dbo].[Post]
				SET [PublishDate] = @Date, [Image] = @Image, [Author] = @Author, [WorkflowStateId] = @WorkflowStateId,
				[CategoryId] = @CategoryId, [Status] = @Status,
				[ModifiedDate] = @PresentDate, [ModifiedBy] = @ModifiedBy,
				[Priority] = @Priority, [ExpiredDate] = @ExpiredDate
				WHERE [Id] = @Id

				-- PostSEO Table
				UPDATE [dbo].[PostSEO]
				SET [PostId] = @Id, [Title] = @TitleSEO, [Description] = @DescriptionSEO,
				[Canonical] = @Canonical, [BreadcrumbsTitle] = @BreadcrumbsTitle, [MetaRobotIndex] = @MetaRobotIndex,
				[MetaRobotFollow] = @MetaRobotFollow, [MetaRobotAdvanced] = @MetaRobotAdvanced
				WHERE [PostId] = @Id

				-- PostTrans Table
				UPDATE [dbo].[PostTrans]
				SET [LanguageId] = @LanguageId, [Title] = @TitleTrans,
				[Description] = @DecriptionTrans, [Detail] = @Detail, [Tag] = @Tag
				WHERE [PostId] = @Id AND [LanguageId] = @LanguageId

				-- PostStateHistory Table
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[PostStateHistory] WITH(INDEX(IdxPostStateHistoryPost)) WHERE [PostId] = @Id AND [WorkflowStateId] = @WorkflowStateId )
				BEGIN
					INSERT INTO [dbo].[PostStateHistory]
					VALUES(@Id, @WorkflowStateId, @UserId, @Note, @PresentDate)
				END
			END
			IF @Action = 'D' 
			BEGIN
				--  PostSEO Table
				DELETE FROM [dbo].[PostSEO]
				WHERE [PostId] = @Id

				-- PostTrans Table
				DELETE FROM [dbo].[PostTrans]
				WHERE [PostId] = @Id

				-- PostStateHistory
				DELETE FROM [dbo].[PostStateHistory]
				WHERE [PostId] = @Id

				-- Post Table
				DELETE FROM [dbo].[Post]
				WHERE [Id] = @Id
			END
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_WorkflowState_Transaction]...';


GO
ALTER PROCEDURE [dbo].[usp_WorkflowState_Transaction]
	@Action VARCHAR(1) = 'I',
	@Id SMALLINT,
	@Name NVARCHAR(50) = '',
	@WorkflowId TINYINT = 0,
	@IsActive BIT = 1,
	@IsFirst BIT = 0
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return BIT = 1
	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I' -- INSERT
			BEGIN
				INSERT INTO [dbo].[WorkflowState]
				VALUES(@Name, @WorkflowId, @IsActive, @IsFirst)
				DECLARE @newId SMALLINT = SCOPE_IDENTITY()
				IF(@IsFirst = 1)
					UPDATE	[dbo].[WorkflowState]
					SET		[IsFirst] = 0
					WHERE	[Id] <> @newId and [WorkflowId] = @WorkflowId
			END

			IF @Action = 'U' -- UPDATE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[WorkflowNavigation] WHERE [WorkflowStateId] = @Id)  AND NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[Post] WHERE [WorkflowStateId] = @Id)
				BEGIN
					UPDATE [dbo].[WorkflowState]
					SET [Name] = @Name, [WorkflowId] = @WorkflowId, [IsActive] = @IsActive, [IsFirst] = @IsFirst
					WHERE [Id] = @Id

					IF(@IsFirst = 1)
						UPDATE	[dbo].[WorkflowState]
						SET		[IsFirst] = 0
						WHERE	[Id] <> @Id and [WorkflowId] = @WorkflowId
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' -- DELETE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[Post] WHERE [WorkflowStateId] = @Id)
				BEGIN
					DECLARE @wfId TINYINT = 0 
					---get workflowId by StateId
					SET @WorkflowId = (SELECT TOP 1 WorkflowId FROM [dbo].[WorkflowState] WHERE [Id] = @Id)
					---delete state
					DELETE FROM [dbo].[WorkflowState]
					WHERE [Id] = @Id

					---get all state by workflow Id
					IF(@wfId != 0)
					BEGIN
						IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[WorkflowState] WHERE [WorkflowId] = @wfId AND [IsFirst] = 1)
						BEGIN
							DECLARE @stateId SMALLINT = (SELECT TOP 1 Id FROM [dbo].[WorkflowState] WHERE [WorkflowId] = @wfId)
							
							---update First state that have WorkflowId
							UPDATE	[dbo].[WorkflowState]
							SET		[IsFirst] = 0
							WHERE	[Id] = @stateId
						END
					END

				END
				ELSE
					SET @return = 0
			END

		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_Category_CheckExistName]...';


GO
ALTER PROCEDURE [dbo].[usp_Category_CheckExistName]
	@Name  NVARCHAR(50),
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0

	print @Id
	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Category] WHERE [Name] = @Name))
			SET @return = 1
	ELSE
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Category] WHERE [Name] = @Name and Id <> @Id))
			SET @return = 1
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_Language_CheckExistCode]...';


GO
ALTER PROCEDURE [dbo].[usp_Language_CheckExistCode]
	@Code  CHAR(3),
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0;

	IF(@Id = 0)
	BEGIN
		IF (EXISTS(SELECT	TOP 1 1 FROM		[dbo].[Language] WHERE		[Code] = @Code))
			SET @return = 1
	END
	ELSE
	BEGIN
		IF(EXISTS(SELECT	TOP 1 1 FROM		[dbo].[Language] WHERE		[Id] != @Id AND [Code] = @Code))
			SET @return = 1
	END

	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_LinkBuilding_CheckExistTitle]...';


GO
ALTER PROCEDURE [dbo].[usp_LinkBuilding_CheckExistTitle]
	@Title  NVARCHAR(150),
	@Id SMALLINT
AS
BEGIN
	DECLARE @return BIT = 0;
	IF(@Id = 0)
	BEGIN
		IF(EXISTS(SELECT	TOP 1 1
					  FROM		[dbo].[LinkBuilding]
					  WHERE		[Title] = @Title))
			SET @return =1
	END
	ELSE
	BEGIN
		
		IF(EXISTS(SELECT	TOP 1 1
					  FROM		[dbo].[LinkBuilding]
					  WHERE		[Title] = @Title and Id != @Id))
			SET @return =1
	END
RETURN @return
END
GO
PRINT N'Altering [dbo].[usp_Workflow_CheckExistName]...';


GO
ALTER PROCEDURE [dbo].[usp_Workflow_CheckExistName]
	@Name  NVARCHAR(50),
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0;

	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Workflow] WHERE [Name] = @Name))
			begin
				SET @return = 1;
			end
	ELSE
	BEGIN
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Workflow] WHERE [Name] = @Name and Id != @Id))
		begin
			SET @return = 1;
		end
	END
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_WorkflowState_CheckExistName]...';


GO
ALTER PROCEDURE [dbo].[usp_WorkflowState_CheckExistName]
	@Id SMALLINT,
	@Name NVARCHAR(50) = '',
	@WorkflowId TINYINT
AS
BEGIN
	DECLARE @return BIT = 0;

	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[WorkflowState] WHERE [Name] = @Name and [WorkflowId] = @WorkflowId))
			BEGIN
				SET @return = 1;
			END
	ELSE
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[WorkflowState] WHERE [Name] = @Name and [WorkflowId] = @WorkflowId and Id != @Id))
			BEGIN
				SET @return = 1;
			END
		
	SELECT @return
END
GO
PRINT N'Refreshing [dbo].[usp_ApprovePost_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_ApprovePost_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_Category_CheckHasChildOrPost]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Category_CheckHasChildOrPost]';


GO
PRINT N'Refreshing [dbo].[usp_Category_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Category_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_Language_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Language_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_Post]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Post]';


GO
PRINT N'Refreshing [dbo].[usp_PublishPost_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_PublishPost_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_WorkflowNavigation_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_WorkflowNavigation_Transaction]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[Workflow] WHERE Name = N'Workflow post')
BEGIN
	DECLARE @WorkflowId TINYINT = 0
	DECLARE @WorkflowStateId TINYINT = 0
	DECLARE @NextWorkflowStateId TINYINT = 0
	---------------
	INSERT INTO [dbo].Workflow
	VALUES(N'Workflow post')
	---------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đang soạn thảo')
		BEGIN
			SET @WorkflowId = SCOPE_IDENTITY()
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đang soạn thảo', @WorkflowId, 1, 1)

			SET @WorkflowStateId = SCOPE_IDENTITY()
		END
	---------------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đã duyệt')
		BEGIN
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đã duyệt', @WorkflowId, 1, 0)

			SET @WorkflowStateId = SCOPE_IDENTITY()
		END
	--------------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đã đăng bài')
		BEGIN
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đã đăng bài', @WorkflowId, 1, 0)

			SET @NextWorkflowStateId = SCOPE_IDENTITY()
		END
	----------------------
	IF @WorkflowStateId > 0 AND @NextWorkflowStateId > 0
		BEGIN
			INSERT INTO [dbo].WorkflowNavigation
			VALUES(@WorkflowStateId, @NextWorkflowStateId)
		END
END
GO

GO
PRINT N'Update complete.';


GO
