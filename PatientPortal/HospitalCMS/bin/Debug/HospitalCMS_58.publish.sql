/*
Deployment script for HospitalCMS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCMS"
:setvar DefaultFilePrefix "HospitalCMS"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Altering [dbo].[usp_Category_CheckExistName]...';


GO
ALTER PROCEDURE [dbo].[usp_Category_CheckExistName]
	@Name  NVARCHAR(50),
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0;
	DECLARE @count TINYINT = 0;
	IF(@Id > 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Category] WHERE [Name] = @Name and Id != @Id))
			SET @return = 1
	ELSE
	BEGIN
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Category] WHERE [Name] = @Name))
			SET @return = 1
	END
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_Category_CheckHasChildOrPost]...';


GO
ALTER PROCEDURE [dbo].[usp_Category_CheckHasChildOrPost]
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0
	IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Category] WHERE [Id] = @Id) OR EXISTS(SELECT TOP 1 1 FROM [dbo].[Post] WHERE [CategoryId] = @Id))
		SET @return = 1
	
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_DefaultData_Insert]...';


GO
ALTER PROC usp_DefaultData_Insert
AS
BEGIN
	SET NOCOUNT ON
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED

		BEGIN TRY
			---Insert Category
			IF(NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[Category]))
				INSERT INTO Category(Name, Handler, Sort, ParentId) VALUES(N'Tin sức khỏe', N'', 1, 0)
			
			---Insert workflow
			IF(NOT EXISTS(SELECT TOP 1 1 FROM [dbo].Workflow))
				INSERT INTO Workflow(Name) VALUES(N'workflow 1')

			---Insert workfow state
			IF(NOT EXISTS(SELECT COUNT(*) FROM WorkflowState))
			BEGIN
				DECLARE @workflowId TINYINT;
				SET @workflowId = (SELECT MAX(Id) FROM Workflow)
				INSERT INTO WorkflowState(Name, WorkflowId, IsActive) VALUES(N'work flow state 1', @workflowId, 1)
			END

			---Insert languge
			IF(NOT EXISTS(SELECT COUNT(*) FROM [dbo].[Language]))
				INSERT INTO [dbo].[Language] VALUES('vi',N'Việt Nam')

		END TRY
		BEGIN CATCH
			IF @@TRANCOUNT <> 0 
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_Language_Transaction]...';


GO
ALTER PROCEDURE [dbo].[usp_Language_Transaction]
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Name NVARCHAR(50) = '',
	@Code NVARCHAR(50) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			INSERT [dbo].[Language](Name, Code)
			VALUES(@Name, @Code)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[Language]
			SET [Name] = @Name, [Code] = @Code
			WHERE [Id] = @Id  
		END

		IF @Action = 'D' --DELETE
		BEGIN
			IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[Post] WITH(INDEX(idxPostCategory)) WHERE [CategoryId] = @Id)
			BEGIN
				DELETE FROM [dbo].[Language]
				WHERE [Id] = @Id
			END
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Altering [dbo].[usp_PublishPost_Transaction]...';


GO
ALTER PROCEDURE [dbo].[usp_PublishPost_Transaction]
	@PosId TINYINT,
	@UserId INT,
	@Note NVARCHAR(500),
	@Action CHAR = 'U'
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	DECLARE @WorkflowStateId TINYINT = 3
	DECLARE @CreateDate VARCHAR(20) = [dbo].[ufnGetDate]()
	BEGIN TRY
		BEGIN TRAN
			IF @PosId > 0 AND @Action = 'U'
				BEGIN
					UPDATE [dbo].Post
					SET WorkflowStateId = @WorkflowStateId
					WHERE Id = @PosId

					INSERT INTO [dbo].PostStateHistory
					VALUES(@PosId, @WorkflowStateId, @UserId, @Note, @CreateDate)
				END
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Language_CheckExistCode]...';


GO
CREATE PROCEDURE [dbo].[usp_Language_CheckExistCode]
	@Code  CHAR(3),
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0;

	IF(@Id > 0)
	BEGIN
		IF(EXISTS(SELECT	TOP 1 1
					  FROM		[dbo].[Language]
					  WHERE		[Id] != @Id AND [Code] = @Code
					  ))
			SET @return = 1
	END
	ELSE
		BEGIN
			IF (EXISTS(SELECT	TOP 1 1
						  FROM		[dbo].[Language]
						  WHERE		[Code] = @Code))
				SET @return = 1
		END

	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Language_CheckIsUsed]...';


GO
CREATE PROCEDURE [dbo].[usp_Language_CheckIsUsed]
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0;
	IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[PostTrans] WHERE [LanguageId] = @Id))
		SET @return = 1

	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_LinkBuilding]...';


GO
CREATE PROC [dbo].[usp_LinkBuilding]
	@Id SMALLINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[LinkBuilding]
			WHERE [Id] = @Id
			order by [Id]
		ELSE
			SELECT * FROM [dbo].[LinkBuilding]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_LinkBuilding_CheckExistTitle]...';


GO
CREATE PROCEDURE [dbo].[usp_LinkBuilding_CheckExistTitle]
	@Title  NVARCHAR(150),
	@Id SMALLINT
AS
BEGIN
	DECLARE @return BIT = 0;
	IF(@Id > 0)
	BEGIN
		IF(EXISTS(SELECT	TOP 1 1
					  FROM		[dbo].[LinkBuilding]
					  WHERE		[Title] = @Title and Id != @Id))
			SET @return =1
	END
	ELSE
	BEGIN
		IF(EXISTS(SELECT	TOP 1 1
					  FROM		[dbo].[LinkBuilding]
					  WHERE		[Title] = @Title))
			SET @return =1
	END
RETURN @return
END
GO
PRINT N'Creating [dbo].[usp_LinkBuilding_Transaction]...';


GO
CREATE PROC [dbo].[usp_LinkBuilding_Transaction](
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1,
	@Title NVARCHAR(150) = '',
	@Url VARCHAR(256) = '',
	@IsUsed BIT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			INSERT [dbo].[LinkBuilding] ([Title], [Url], [IsUsed])
			VALUES(@Title, @Url, @IsUsed)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[LinkBuilding]
			SET [Title] = @Title, [Url] = @Url, [IsUsed] = @IsUsed
			WHERE [Id] = @Id  
		END

		IF @Action = 'D' --DELETE
		BEGIN
			
			DELETE FROM [dbo].[LinkBuilding]
			WHERE [Id] = @Id
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Refreshing [dbo].[usp_DefaultData_Exec]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DefaultData_Exec]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Workflow WHERE Name = N'Workflow post')
BEGIN
	DECLARE @WorkflowId TINYINT = 0
	DECLARE @WorkflowStateId TINYINT = 0
	DECLARE @NextWorkflowStateId TINYINT = 0
	---------------
	INSERT INTO [dbo].Workflow
	VALUES(N'Workflow post')
	---------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đã duyệt')
		BEGIN
			SET @WorkflowId = SCOPE_IDENTITY()
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đã duyệt', @WorkflowId, 1)

			SET @WorkflowStateId = SCOPE_IDENTITY()
		END
	--------------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đã đăng bài')
		BEGIN
			SET @WorkflowId = SCOPE_IDENTITY()
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đã đăng bài', @WorkflowId, 1)

			SET @NextWorkflowStateId = SCOPE_IDENTITY()
		END
	----------------------
	IF @WorkflowStateId > 0 AND @NextWorkflowStateId > 0
		BEGIN
			INSERT INTO [dbo].WorkflowNavigation
			VALUES(@WorkflowStateId, @NextWorkflowStateId)
		END
END
GO

GO
PRINT N'Update complete.';


GO
