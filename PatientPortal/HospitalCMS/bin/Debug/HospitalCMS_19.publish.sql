/*
Deployment script for HospitalCMS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCMS"
:setvar DefaultFilePrefix "HospitalCMS"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Altering [dbo].[usp_DefaultData_Insert]...';


GO
ALTER proc usp_DefaultData_Insert
as
begin
	SET NOCOUNT ON
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED

		BEGIN TRY
			declare @countCat int;
			---Insert Category
			set @countCat = (SELECT count(*) FROM [dbo].[Category]);
			if(@countCat = 0)
			begin
				insert into Category(Name, Handler, Sort, ParentId) values(N'Tin sức khỏe', N'', 1, 0)
			end
			
			---Insert workflow
			declare @countWorkflow int;
			set @countWorkflow = (select COUNT(*) from [dbo].Workflow);
			if(@countWorkflow = 0)
			begin
				insert into Workflow(Name) values(N'workflow 1')
			end

			---Insert workfow state
			declare @countWorkflowSate int;
			set @countWorkflowSate = (select COUNT(*) from WorkflowState)
			if(@countWorkflowSate = 0)
			begin
				declare @workflowId tinyint;
				set @workflowId = (SELECT MAX(Id) FROM Workflow)
				insert into WorkflowState(Name, WorkflowId, IsActive) values(N'work flow state 1', @workflowId, 1)
			end

			---Insert languge
			declare @countLanguge int;
			set @countLanguge = (select COUNT(*) from [dbo].[Language]);
			if(@countLanguge = 0)
			begin
				insert into [dbo].[Language] values('vi',N'Việt Nam')
			end

		END TRY
		BEGIN CATCH
			IF @@TRANCOUNT <> 0 
			BEGIN
				RETURN NULL
			END
	END CATCH
end
GO
PRINT N'Altering [dbo].[usp_Post_Transaction]...';


GO
ALTER PROCEDURE [dbo].[usp_Post_Transaction]
	@Action CHAR(1) = 'I',
	@Id INT,
	@Image VARCHAR(256),
	@Author NVARCHAR(50),
	@WorkflowStateId TINYINT,
	@CategoryId TINYINT,
	@Status TINYINT,
	@CreatedBy INT,
	@ModifiedBy INT,
	-- PostSEO
	@PostId INT,
	@Title_SEO NVARCHAR(71),
	@Description_SEO NVARCHAR(160),
	@Canonical VARCHAR(256),
	@BreadcrumbsTitle NVARCHAR(71),
	@MetaRobotIndex TINYINT,
	@MetaRobotFollow TINYINT,
	@MetaRobotAdvanced TINYINT,
	-- PostTrans
	@LanguageId TINYINT,
	@Title_Trans NVARCHAR(256),
	@Decription_Trans NVARCHAR(1000),
	@Detail NVARCHAR(MAX),
	@Tag NVARCHAR(60),
	-- PostStateHistory
	@PostStateHistoryId INT,
	@UserId INT,
	@Note NVARCHAR(500)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return BIT = 1
	DECLARE @Date SMALLDATETIME, @PresentDate VARCHAR(20)
	SET @Date = GETDATE()
	SET @PresentDate = [dbo].[ufnGetDate]()

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I' 
			BEGIN
				-- Post Table
				INSERT INTO [dbo].[Post]
				VALUES(@Date, @Image, @Author, @WorkflowStateId, @CategoryId, @Status, @PresentDate,
				@CreatedBy, @PresentDate,@ModifiedBy)

				-- PostSEO Table
				SET @PostId = SCOPE_IDENTITY()
				INSERT INTO [dbo].[PostSEO]
				VALUES(@PostId, @Title_SEO, @Description_SEO, @Canonical, @BreadcrumbsTitle, @MetaRobotIndex,
				@MetaRobotFollow, @MetaRobotAdvanced)

				-- PostTrans Table
				INSERT INTO [dbo].[PostTrans]
				VALUES(@PostId, @LanguageId, @Title_Trans, @Decription_Trans, @Detail, @Tag)

				-- PostStateHistory Table
				INSERT INTO [dbo].[PostStateHistory]
				VALUES(@PostId, @WorkflowStateId, @UserId, @Note, @PresentDate)
			END				
			IF @Action = 'U' 
			BEGIN
				-- Post Table
				UPDATE [dbo].[Post]
				SET [Date] = @Date, [Image] = @Image, [Author] = @Author, [WorkflowStateId] = @WorkflowStateId,
				[CategoryId] = @CategoryId, [Status] = @Status,
				[ModifiedDate] = @PresentDate, [ModifiedBy] = @ModifiedBy
				WHERE [Id] = @Id

				-- PostSEO Table
				UPDATE [dbo].[PostSEO]
				SET [PostId] = @Id, [Title] = @Title_SEO, [Description] = @Description_SEO,
				[Canonical] = @Canonical, [BreadcrumbsTitle] = @BreadcrumbsTitle, [MetaRobotIndex] = @MetaRobotIndex,
				[MetaRobotFollow] = @MetaRobotFollow, [MetaRobotAdvanced] = @MetaRobotAdvanced
				WHERE [PostId] = @Id

				-- PostTrans Table
				UPDATE [dbo].[PostTrans]
				SET [LanguageId] = @LanguageId, [Title] = @Title_Trans,
				[Description] = @Decription_Trans, [Detail] = @Detail, [Tag] = @Tag
				WHERE [PostId] = @Id AND [LanguageId] = @LanguageId

				-- PostStateHistory Table
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[PostStateHistory] WITH(INDEX(IdxPostStateHistoryPost)) WHERE [PostId] = @Id AND [WorkflowStateId] = @WorkflowStateId )
				BEGIN
					INSERT INTO [dbo].[PostStateHistory]
					VALUES(@Id, @WorkflowStateId, @UserId, @Note, @PresentDate)
				END
			END
			IF @Action = 'D' 
			BEGIN
				--  PostSEO Table
				DELETE FROM [dbo].[PostSEO]
				WHERE [PostId] = @Id

				-- PostTrans Table
				DELETE FROM [dbo].[PostTrans]
				WHERE [PostId] = @Id

				-- PostStateHistory
				DELETE FROM [dbo].[PostStateHistory]
				WHERE [PostId] = @Id

				-- Post Table
				DELETE FROM [dbo].[Post]
				WHERE [Id] = @Id
			END
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Refreshing [dbo].[usp_DefaultData_Exec]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DefaultData_Exec]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Update complete.';


GO
