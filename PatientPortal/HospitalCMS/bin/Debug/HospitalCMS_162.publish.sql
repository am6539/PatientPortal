/*
Deployment script for HospitalCMS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCMS"
:setvar DefaultFilePrefix "HospitalCMS"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Rename refactoring operation with key f87a464a-608c-431e-a4c7-f4b092a93cd0 is skipped, element [dbo].[Advertise].[IsUsed] (SqlSimpleColumn) will not be renamed to Handler';


GO
PRINT N'Rename refactoring operation with key dbc242c7-db6d-43ac-bf0c-1cead3121561 is skipped, element [dbo].[Post].[MdifiedBy] (SqlSimpleColumn) will not be renamed to ModifiedBy';


GO
PRINT N'Rename refactoring operation with key 7ca6bdbf-99e7-478b-a1f1-dffd2a3e77ba is skipped, element [dbo].[Post].[Date] (SqlSimpleColumn) will not be renamed to PublishDate';


GO
PRINT N'Rename refactoring operation with key a9f22813-918e-4223-a4b2-1234714bfdc2 is skipped, element [dbo].[LinkBuilding].[Name] (SqlSimpleColumn) will not be renamed to Title';


GO
PRINT N'Rename refactoring operation with key 590e78a9-acf5-4749-8fc1-59532a4a07f8 is skipped, element [dbo].[Slider].[ExpriedDate] (SqlSimpleColumn) will not be renamed to ExpiredDate';


GO
PRINT N'Rename refactoring operation with key 83127367-6a9f-4c84-b99e-e411428bd3be is skipped, element [dbo].[Department].[Order] (SqlSimpleColumn) will not be renamed to Sort';


GO
PRINT N'Rename refactoring operation with key 018a1622-59c2-47d9-a142-6425933c8b53 is skipped, element [dbo].[Advertise].[IsUsed] (SqlSimpleColumn) will not be renamed to Resouce';


GO
PRINT N'Creating [dbo].[usp_DefaultData_Insert]...';


GO
CREATE PROC usp_DefaultData_Insert
AS
BEGIN
	SET NOCOUNT ON
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED

		BEGIN TRY
			---Insert Category
			IF(NOT EXISTS(SELECT TOP 1 1 FROM [dbo].[Category]))
				INSERT INTO Category(Name, Handler, Sort, ParentId) VALUES(N'Tin sức khỏe', N'', 1, 0)
			
			---Insert workflow
			IF(NOT EXISTS(SELECT TOP 1 1 FROM [dbo].Workflow))
				INSERT INTO Workflow(Name) VALUES(N'workflow 1')

			---Insert workfow state
			IF(NOT EXISTS(SELECT COUNT(*) FROM WorkflowState))
			BEGIN
				DECLARE @workflowId TINYINT;
				SET @workflowId = (SELECT MAX(Id) FROM Workflow)
				INSERT INTO WorkflowState(Name, WorkflowId, IsActive) VALUES(N'work flow state 1', @workflowId, 1)
			END

			---Insert languge
			IF(NOT EXISTS(SELECT COUNT(*) FROM [dbo].[Language]))
				INSERT INTO [dbo].[Language] VALUES('vi',N'Việt Nam')

		END TRY
		BEGIN CATCH
			IF @@TRANCOUNT <> 0 
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Feature]...';


GO
CREATE PROC [dbo].[usp_Feature]
	@Id TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Feature]
			WHERE [Id] = @Id
			ORDER BY [Id]
		ELSE
			SELECT * FROM [dbo].[Feature]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Feature_CheckExistTitle]...';


GO
CREATE PROCEDURE [dbo].[usp_Feature_CheckExistTitle]
	@Title  NVARCHAR(50),
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0

	print @Id
	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Feature] WHERE [Title] = @Title))
			SET @return = 1
	ELSE
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Feature] WHERE [Title] = @Title and Id <> @Id))
			SET @return = 1
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Feature_Transaction]...';


GO
CREATE PROC [dbo].[usp_Feature_Transaction](
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Title NVARCHAR(50) = '',
	@Image VARCHAR(256) = '',
	@Description NVARCHAR(256) = '',
	@Handler NVARCHAR(256) = '',
	@IsUsed BIT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			INSERT [dbo].[Feature] ([Title], [Image], [Description], [Handler], [IsUsed])
			VALUES(@Title, @Image, @Description, @Handler, @IsUsed)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[Feature]
			SET [Title] = @Title, [Image] = @Image, [Description] = @Description, [Handler] = @Handler, [IsUsed] = @IsUsed
			WHERE [Id] = @Id  
		END

		IF @Action = 'D' --DELETE
		BEGIN
			DELETE FROM [dbo].[Feature]
			WHERE [Id] = @Id
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Creating [dbo].[usp_Gallery]...';


GO
CREATE PROC [dbo].[usp_Gallery]
	@Id VARCHAR(128)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id <> ''
			SELECT * FROM [dbo].[Gallery]
			WHERE [Id] = @Id
			ORDER BY [Id]
		ELSE
			SELECT * FROM [dbo].[Gallery]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Gallery_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Gallery_Transaction]
	@Action CHAR(1) = 'I',
	@Id VARCHAR(128) = '',
	@Title NVARCHAR(128) = '',
	@Description NVARCHAR(300) = '',
	@Highlight NVARCHAR(100) = '',
	@Img VARCHAR(256) = '',
	@YoutubeURL VARCHAR(500) = '',
	@Date VARCHAR(20) = '',
	@DepartmentId SMALLINT = 1,
	@IsMultiple BIT = 0	
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			SET @Date = [dbo].[ufnGetDate]();
			INSERT [dbo].[Gallery]([Id], [Title], [Description], [Highlight], [Img], [YoutubeURL], [Date], [DepartmentId], [IsMultiple])
			VALUES(@Id, @Title, @Description, @Highlight, @Img, @YoutubeURL, @Date, @DepartmentId, @IsMultiple)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[Gallery]
			SET [Title] = @Title, [Description] = @Description, [Highlight] = @Highlight, [Img] = @Img, [YoutubeURL] = @YoutubeURL,
			[Date] = @Date, [DepartmentId] = @DepartmentId, [IsMultiple] = @IsMultiple
			WHERE [Id] = @Id  
		END

		IF @Action = 'D' --DELETE
		BEGIN
			DELETE FROM [dbo].[GalleryStore]
			WHERE [ParentId] = @Id

			DELETE FROM [dbo].[Gallery]
			WHERE [Id] = @Id
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Creating [dbo].[usp_GalleryStore]...';


GO
CREATE PROC [dbo].[usp_GalleryStore]
	@Id VARCHAR(128) = '',
	@ParentId VARCHAR(128) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id <> ''
			SELECT * FROM [dbo].[GalleryStore]
			WHERE [Id] = @Id
			ORDER BY [Id]
		ELSE
			SELECT * FROM [dbo].[GalleryStore] WHERE [ParentId] = @ParentId
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_GalleryStore_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_GalleryStore_Transaction]
	@Action CHAR(1) = 'I',
	@Id VARCHAR(128) = '',
	@ParentId VARCHAR(128)= '',
	@Img VARCHAR(256) = ''
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;

		IF @Action = 'I' --INSERT
		BEGIN
			INSERT [dbo].[GalleryStore]([Id], [ParentId],[Img])
			VALUES(@Id, @ParentId, @Img)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[GalleryStore]
			SET [Img] = @Img
			WHERE [Id] = @Id  
		END

		IF @Action = 'D' --DELETE
		BEGIN
			DELETE FROM [dbo].[GalleryStore]
			WHERE [Id] = @Id

		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Creating [dbo].[usp_Language]...';


GO
CREATE PROCEDURE [dbo].[usp_Language]
	@Id TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Language]
			WHERE Id = @Id
		ELSE
			SELECT * FROM [dbo].[Language]
			ORDER BY Id
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Language_CheckExistCode]...';


GO
CREATE PROCEDURE [dbo].[usp_Language_CheckExistCode]
	@Code  CHAR(3),
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0;

	IF(@Id = 0)
	BEGIN
		IF (EXISTS(SELECT	TOP 1 1 FROM		[dbo].[Language] WHERE		[Code] = @Code))
			SET @return = 1
	END
	IF (@Id <> 0)
	BEGIN
		IF(EXISTS(SELECT	TOP 1 1 FROM		[dbo].[Language] WHERE		[Id] != @Id AND [Code] = @Code))
			SET @return = 1
	END

	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Language_CheckIsUsed]...';


GO
CREATE PROCEDURE [dbo].[usp_Language_CheckIsUsed]
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0;
	IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[PostTrans] WHERE [LanguageId] = @Id))
		SET @return = 1

	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Language_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Language_Transaction]
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Code NVARCHAR(50) = '',
	@Name NVARCHAR(50) = '',
	@Icon VARBINARY(MAX)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			INSERT [dbo].[Language]([Name], [Code], [Icon])
			VALUES(@Name, @Code, @Icon)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[Language]
			SET [Name] = @Name, [Code] = @Code, [Icon] = @Icon
			WHERE [Id] = @Id  
		END

		IF @Action = 'D' --DELETE
		BEGIN
			IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[PostTrans] WHERE [LanguageId] = @Id)
			BEGIN
				DELETE FROM [dbo].[Language] WHERE [Id] = @Id
			END
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Creating [dbo].[usp_LinkBuilding]...';


GO
CREATE PROC [dbo].[usp_LinkBuilding]
	@Id SMALLINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[LinkBuilding]
			WHERE [Id] = @Id
			order by [Id]
		ELSE
			SELECT * FROM [dbo].[LinkBuilding]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_LinkBuilding_CheckExistTitle]...';


GO
CREATE PROCEDURE [dbo].[usp_LinkBuilding_CheckExistTitle]
	@Title  NVARCHAR(150),
	@Id SMALLINT
AS
BEGIN
	DECLARE @return BIT = 0;
	IF(@Id = 0)
	BEGIN
		IF(EXISTS(SELECT	TOP 1 1
					  FROM		[dbo].[LinkBuilding]
					  WHERE		[Title] = @Title))
			SET @return =1
	END
	IF(EXISTS(SELECT	TOP 1 1
					  FROM		[dbo].[LinkBuilding]
					  WHERE		[Title] = @Title and Id != @Id))
			SET @return =1
SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_LinkBuilding_Transaction]...';


GO
CREATE PROC [dbo].[usp_LinkBuilding_Transaction](
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1,
	@Title NVARCHAR(150) = '',
	@Url VARCHAR(256) = '',
	@IsUsed BIT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			INSERT [dbo].[LinkBuilding] ([Title], [Url], [IsUsed])
			VALUES(@Title, @Url, @IsUsed)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[LinkBuilding]
			SET [Title] = @Title, [Url] = @Url, [IsUsed] = @IsUsed
			WHERE [Id] = @Id  
		END

		IF @Action = 'D' --DELETE
		BEGIN
			
			DELETE FROM [dbo].[LinkBuilding]
			WHERE [Id] = @Id
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Creating [dbo].[usp_Post]...';


GO
CREATE PROCEDURE [dbo].[usp_Post]
	@Id INT = 0,
	@LanguageCode CHAR(3) = 'vi',
	@WorkflowStateId TINYINT = 1,
	@CategoryId  TINYINT = 0
	--@PageIndex int, 
	--@NumberPerPage int, 
	--@TotalRecordCount int out
AS BEGIN
	BEGIN TRY
		SET NOCOUNT ON
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED
		DECLARE @return BIT = 1;

		IF @LanguageCode != '' AND @Id = 0
			IF @CategoryId = 0
				SELECT p.Id, t.Title, 
				c.Name AS CategoryName, 
				p.CategoryId,
				p.PublishDate,
				ws.Id AS WorkflowStateId,
				ws.Name AS WorkflowStateName,
				0 AS [Roles]
				FROM [dbo].Post p, [dbo].PostTrans t, [dbo].Category c, WorkflowState ws, [dbo].[Language] l--, PostRole r
				WHERE p.Id = t.PostId
				AND p.CategoryId = c.Id
				AND p.WorkflowStateId = ws.Id
				AND P.WorkflowStateId = @WorkflowStateId
				AND t.PostId = p.Id
				AND t.LanguageId = l.Id
				AND l.Code = @LanguageCode
			ELSE
				SELECT p.Id, t.Title, 
				c.Name AS CategoryName, 
				p.CategoryId,
				p.PublishDate,
				ws.Id AS WorkflowStateId,
				ws.Name AS WorkflowStateName,
				0 AS [Roles]
				FROM [dbo].Post p, [dbo].PostTrans t, [dbo].Category c, WorkflowState ws, PostRole r
				WHERE p.Id = t.PostId
				AND p.CategoryId = c.Id AND p.CategoryId = @CategoryId
				AND p.WorkflowStateId = ws.Id
				AND P.WorkflowStateId = @WorkflowStateId
				AND r.PostId = p.Id
		ELSE IF @languageCode = '' AND @Id > 0
			SELECT p.Id, 
			p.[Image],
			p.PublishDate,
			p.Author, 
			p.WorkflowStateId,
			p.CategoryId,
			p.[Status],
			p.CreatedBy,
			p.ModifiedBy,
			p.[Priority],
			p.ExpiredDate,

			ps.Title as TitleSEO, 
			ps.[Description] as DescriptionSEO, 
			ps.Canonical,
			ps.MetaRobotIndex,
			ps.MetaRobotFollow,
			ps.MetaRobotAdvanced,

			t.Title as TitleTrans, 
			c.Name as CategoryName, 
			t.[Description] as DescriptionTrans, 
			t.Detail,
			t.Tag

			FROM [dbo].Post p, [dbo].PostTrans t, [dbo].Category c, [dbo].PostSEO ps
			WHERE p.Id = t.PostId
			AND p.CategoryId = c.Id
			AND p.Id = ps.PostId
			--AND p.[Status] = 1
			AND p.Id = @Id
		ELSE
			SET @return = 0

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Post_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Post_Transaction]
	@Action CHAR(1) = 'I',
	@Id INT,
	@Image VARCHAR(256),
	@Author NVARCHAR(50),
	@WorkflowStateId TINYINT = 1,
	@CategoryId TINYINT,
	@Status TINYINT = 1,
	@CreatedBy NVARCHAR(128),
	@ModifiedBy NVARCHAR(128),
	@Priority TINYINT,
	@ExpiredDate DATE,
	@Type TINYINT = 1,
	-- PostSEO
	@PostId INT,
	@TitleSEO NVARCHAR(71),
	@DescriptionSEO NVARCHAR(160),
	@Canonical VARCHAR(256),
	@BreadcrumbsTitle NVARCHAR(71),
	@MetaRobotIndex TINYINT,
	@MetaRobotFollow TINYINT,
	@MetaRobotAdvanced TINYINT,
	-- PostTrans
	@LanguageId TINYINT,
	@TitleTrans NVARCHAR(256),
	@DescriptionTrans NVARCHAR(1000),
	@Detail NVARCHAR(MAX),
	@Tag NVARCHAR(60),
	-- PostStateHistory
	@UserId NVARCHAR(128),
	@Note NVARCHAR(500) 
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return INT = 0
	DECLARE @Date SMALLDATETIME, @PresentDate VARCHAR(20)
	SET @Date = GETDATE()
	SET @PresentDate = [dbo].[ufnGetDate]()

	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I' 
			BEGIN
				-- Post Table
				INSERT INTO [dbo].[Post]
				VALUES(@Date, @Image, @Author, @WorkflowStateId, @CategoryId, @Status, @PresentDate,
				@CreatedBy, @PresentDate, @ModifiedBy, @Priority, @ExpiredDate, @Type)

				-- PostSEO Table
				SET @PostId = SCOPE_IDENTITY()
				INSERT INTO [dbo].[PostSEO]
				VALUES(@PostId, @TitleSEO, @DescriptionSEO, @Canonical, @BreadcrumbsTitle, @MetaRobotIndex,
				@MetaRobotFollow, @MetaRobotAdvanced)

				-- PostTrans Table
				INSERT INTO [dbo].[PostTrans]
				VALUES(@PostId, @LanguageId, @TitleTrans, @DescriptionTrans, @Detail, @Tag)

				-- PostStateHistory Table
				INSERT INTO [dbo].[PostStateHistory]
				VALUES(@PostId, @WorkflowStateId, @UserId, @Note, @PresentDate)

				--SET RETURN ID
				SET @return = @PostId
			END				
			IF @Action = 'U' 
			BEGIN
				
				IF((SELECT WorkflowStateId FROM [dbo].Post WHERE Id = @Id) = 1)
				BEGIN
					-- Post Table
					UPDATE [dbo].[Post]
					SET [PublishDate] = @Date, [Image] = @Image, [Author] = @Author,
					[CategoryId] = @CategoryId, [Status] = @Status,
					[ModifiedDate] = @PresentDate, [ModifiedBy] = @ModifiedBy,
					[Priority] = @Priority, [ExpiredDate] = @ExpiredDate, [Type] = @Type
					WHERE [Id] = @Id

					-- PostSEO Table
					UPDATE [dbo].[PostSEO]
					SET [PostId] = @Id, [Title] = @TitleSEO, [Description] = @DescriptionSEO,
					[Canonical] = @Canonical, [BreadcrumbsTitle] = @BreadcrumbsTitle, [MetaRobotIndex] = @MetaRobotIndex,
					[MetaRobotFollow] = @MetaRobotFollow, [MetaRobotAdvanced] = @MetaRobotAdvanced
					WHERE [PostId] = @Id

					-- PostTrans Table
					UPDATE [dbo].[PostTrans]
					SET [LanguageId] = @LanguageId, [Title] = @TitleTrans,
					[Description] = @DescriptionTrans, [Detail] = @Detail, [Tag] = @Tag
					WHERE [PostId] = @Id AND [LanguageId] = @LanguageId

					-- PostStateHistory Table
					IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[PostStateHistory] WITH(INDEX(IdxPostStateHistoryPost)) WHERE [PostId] = @Id AND [WorkflowStateId] = @WorkflowStateId )
					BEGIN
						INSERT INTO [dbo].[PostStateHistory]
						VALUES(@Id, @WorkflowStateId, @UserId, @Note, @PresentDate)
					END

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END
			IF @Action = 'D' 
			BEGIN
				IF((SELECT WorkflowStateId FROM [dbo].Post WHERE Id = @Id) = 1)
				BEGIN
					--  PostSEO Table
					DELETE FROM [dbo].[PostSEO]
					WHERE [PostId] = @Id

					-- PostTrans Table
					DELETE FROM [dbo].[PostTrans]
					WHERE [PostId] = @Id

					-- PostStateHistory
					DELETE FROM [dbo].[PostStateHistory]
					WHERE [PostId] = @Id

					-- Post Table
					DELETE FROM [dbo].[Post]
					WHERE [Id] = @Id

					SET @return = @Id
				END
				ELSE
					SET @return = 0
			END
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Post_WorkflowState_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Post_WorkflowState_Transaction](
	@Action CHAR = 'U',
	@Id INT = 0,
	@PostId INT,
	@WorkflowStateId TINYINT,
	@UserId NVARCHAR(128),
	@Note NVARCHAR(500)
	)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	DECLARE @CreateDate VARCHAR(20) = [dbo].[ufnGetDate]()
	BEGIN TRY
		BEGIN TRAN
			IF @PostId > 0 AND @Action = 'U'
				BEGIN
					UPDATE [dbo].Post
					SET WorkflowStateId = @WorkflowStateId
					WHERE Id = @PostId

					INSERT INTO [dbo].PostStateHistory
					VALUES(@PostId, @WorkflowStateId, @UserId, @Note, @CreateDate)
				END
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_PostStateHistory]...';


GO
CREATE PROCEDURE [dbo].[usp_PostStateHistory]
(
	@PostId INT	
)
AS BEGIN
	BEGIN TRY
		SELECT * FROM [dbo].[PostStateHistory] WHERE [PostId] = @PostId
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_PostStateHistory_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_PostStateHistory_Transaction]
	@Action CHAR(1) = 'I',
	@PostId INT,
	@WorkflowStateId TINYINT,
	@UserId INT,
	@Note NVARCHAR(500)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN

			IF @Action = 'I' -- INSERT
			BEGIN
				INSERT INTO [dbo].[PostStateHistory]
				VALUES(@PostId, @WorkflowStateId, @UserId, @Note, [dbo].[ufnGetDate]())
			END				
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_PostTrans]...';


GO
CREATE PROCEDURE [dbo].[usp_PostTrans]
	@PostId INT = 0,
	@LanguageId TINYINT
AS
BEGIN
SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		SELECT * FROM [dbo].[PostTrans]
			WHERE [PostId] = @PostId and [LanguageId] = @LanguageId
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_PostTrans_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_PostTrans_Transaction]
	@Action CHAR = 'I',
	@PostId	INT,
    @LanguageId  TINYINT  = 1,
    @Title       NVARCHAR (256),
    @Description NVARCHAR (1000),
    @Detail      NVARCHAR (MAX),
    @Tag         NVARCHAR (60)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			IF EXISTS( SELECT TOP 1 1 FROM [dbo].[PostTrans] WHERE [LanguageId] = @LanguageId AND [PostId] = @PostId)
			BEGIN
				UPDATE [dbo].[PostTrans]
				SET Title = @Title,
					[Description] = @Description,
					Detail = @Detail,
					Tag = @Tag
				WHERE [PostId] = @PostId AND [LanguageId] = @LanguageId  
			END
			ELSE
			BEGIN
				INSERT [dbo].[PostTrans](PostId, LanguageId, Title, [Description], Detail, Tag)
				VALUES(@PostId, @LanguageId, @Title, @Description, @Detail, @Tag)
			END
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[PostTrans]
			SET Title = @Title,
				[Description] = @Description,
				Detail = @Detail,
				Tag = @Tag
			WHERE [PostId] = @PostId AND [LanguageId] = @LanguageId  
		END

		IF @Action = 'D' --DELETE
		BEGIN
			IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[PostTrans] WHERE [LanguageId] = @LanguageId AND [PostId] = @PostId)
			BEGIN
				DELETE FROM [dbo].[PostTrans] WHERE [PostId] = @PostId AND [LanguageId] = @LanguageId  
			END
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Creating [dbo].[usp_PublishPost_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_PublishPost_Transaction]
	@PostId INT,
	@WorkflowStateId TINYINT,
	@UserId NVARCHAR(128),
	@Note NVARCHAR(500),
	@Action CHAR = 'U'
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	DECLARE @CreateDate VARCHAR(20) = [dbo].[ufnGetDate]()
	BEGIN TRY
		BEGIN TRAN
			IF @PostId > 0 AND @Action = 'U'
				BEGIN
					UPDATE [dbo].Post
					SET WorkflowStateId = @WorkflowStateId
					WHERE Id = @PostId

					INSERT INTO [dbo].PostStateHistory
					VALUES(@PostId, @WorkflowStateId, @UserId, @Note, @CreateDate)
				END
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Slider]...';


GO
CREATE PROC [dbo].[usp_Slider]
	@Id TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Slider]
			WHERE [Id] = @Id
			ORDER BY [Id]
		ELSE
			SELECT * FROM [dbo].[Slider]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Slider_Transaction]...';


GO
CREATE PROC [dbo].[usp_Slider_Transaction](
	@Action CHAR(1) = 'I',
	@Id SMALLINT = 1,
	@Title NVARCHAR(150) = '',
	@Description NVARCHAR(300) = '',
	@Image VARCHAR(256) = '',
	@ExpiredDate Date = '',
	@IsUsed BIT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			INSERT [dbo].[Slider] ([Title], [Description], [Image], [ExpiredDate], [IsUsed])
			VALUES(@Title, @Description, @Image, @ExpiredDate, @IsUsed)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[Slider]
			SET [Title] = @Title, [Image] = @Image, [Description] = @Description, [ExpiredDate] = @ExpiredDate, [IsUsed] = @IsUsed
			WHERE [Id] = @Id  
		END

		IF @Action = 'D' --DELETE
		BEGIN
			DELETE FROM [dbo].[Slider]
			WHERE [Id] = @Id
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
PRINT N'Creating [dbo].[usp_spa_Advertise]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_Advertise]
	@Id TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Advertise]
			WHERE [Id] = @Id
		ELSE
			SELECT	* 
			FROM [dbo].[Advertise]
			WHERE	EndDate >= GETDATE()
			ORDER BY [Id]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_Category]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_Category]
	@ParentId TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @ParentId > 0
			SELECT * FROM [dbo].[Category]
			WHERE [ParentId] = @ParentId
			ORDER BY [Id]
		ELSE
			SELECT * FROM [dbo].[Category]
			ORDER BY [Id]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_CategoryDept]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_CategoryDept]
	@handler NVARCHAR(256) = '',
	@parentId TINYINT = 0
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	BEGIN TRY
		SELECT * FROM [dbo].[Category]
		WHERE [Handler] = @handler
		AND [ParentId] = @parentId
		ORDER BY [Id]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_CMSConfig]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_CMSConfig]
	@Id TINYINT
AS BEGIN
SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ COMMITTED

BEGIN TRY
	IF @Id > 0
		SELECT * FROM [dbo].[CMS]
		WHERE [Id] = @Id
	ELSE
		SELECT * FROM [dbo].[CMS]
		ORDER BY [Id]
END TRY
BEGIN CATCH
	IF @@TRANCOUNT <> 0 
	BEGIN
		RETURN NULL
	END
END CATCH

END
GO
PRINT N'Creating [dbo].[usp_spa_Feature]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_Feature]
	@Id TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Feature]
			WHERE [Id] = @Id
		ELSE
			SELECT * FROM [dbo].[Feature]
			ORDER BY [Id]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_Gallery]...';


GO
CREATE PROC [dbo].[usp_spa_Gallery]
	@Id VARCHAR(128),
	@DepartmentId TINYINT = 0
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id <> ''
			SELECT * FROM [dbo].[Gallery]
			WHERE [Id] = @Id
			ORDER BY [Id]
		ELSE
		BEGIN
			IF @departmentId > 0
				SELECT * FROM [dbo].[Gallery]
				WHERE [DepartmentId] = @departmentId
			ELSE
				SELECT * FROM [dbo].[Gallery]
		END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_Post]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_Post]
	@languageCode CHAR(3) = 'vi',
	@categoryId TINYINT = 0,
	@numTop TINYINT = 1,
	@priority TINYINT = 1,
	@type TINYINT = 1
AS BEGIN
	BEGIN TRY
	SET NOCOUNT ON
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED
		IF @languageCode != '' AND @categoryId > 0
			IF @priority = 3
			BEGIN	--- get posts order by priority
				
				SELECT TOP (@numTop)
					p.Id, 
					p.CategoryId,
					p.PublishDate,
					P.[Image],
					P.Author,
					t.Title as TitleTran,
					t.Detail,
					t.[Description] as DescriptionTrans,
					c.Name AS CategoryName, 
					ws.Id AS WorkflowStateId,
					ws.Name AS WorkflowStateName,
					p.[Priority]
				FROM 
					[dbo].Post p, 
					[dbo].PostTrans t, 
					[dbo].Category c, 
					WorkflowState ws
				WHERE 
					p.Id = t.PostId
					AND p.CategoryId = c.Id
					AND p.WorkflowStateId = ws.Id
					AND WorkflowStateId = 3
					AND p.CategoryId = @categoryId
				ORDER BY p.PublishDate DESC
			END
			ELSE	
			BEGIN
				SELECT TOP (@numTop)
					p.Id, 
					p.CategoryId,
					p.PublishDate,
					P.[Image],
					P.Author,
					t.Title as TitleTran,
					t.Detail,
					t.[Description] as DescriptionTrans,
					c.Name AS CategoryName, 
					ws.Id AS WorkflowStateId,
					ws.Name AS WorkflowStateName,
					p.[Priority]
				FROM 
					[dbo].Post p, 
					[dbo].PostTrans t, 
					[dbo].Category c, 
					WorkflowState ws
				WHERE 
					p.Id = t.PostId
					AND p.CategoryId = c.Id
					AND p.WorkflowStateId = ws.Id
					AND WorkflowStateId = 3
					AND p.CategoryId = @categoryId
				ORDER BY p.PublishDate DESC
			END
		ELSE
			SELECT TOP (@numTop)
					p.Id, 
					p.CategoryId,
					p.PublishDate,
					P.[Image],
					P.Author,
					t.Title as TitleTran,
					t.Detail,
					t.[Description] as DescriptionTrans,
					c.Name AS CategoryName, 
					ws.Id AS WorkflowStateId,
					ws.Name AS WorkflowStateName,
					p.[Priority]
				FROM 
					[dbo].Post p, 
					[dbo].PostTrans t, 
					[dbo].Category c, 
					WorkflowState ws
				WHERE 
					p.Id = t.PostId
					AND p.CategoryId = c.Id
					AND p.WorkflowStateId = ws.Id
					AND WorkflowStateId = 3
					AND p.[Type] != 4
				ORDER BY p.PublishDate DESC

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_Post_ById]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_Post_ById]
	@Id int
AS
BEGIN
	BEGIN TRY
	SET NOCOUNT ON
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED

		SELECT p.Id, 
			p.[Image],
			p.PublishDate,
			p.Author, 
			p.WorkflowStateId,
			p.CategoryId,
			p.[Status],
			p.CreatedBy,
			p.ModifiedBy,
			p.[Priority],
			p.ExpiredDate,
			p.[Type],

			ps.Title as TitleSEO, 
			ps.[Description] as DescriptionSEO, 
			ps.Canonical,
			ps.MetaRobotIndex,
			ps.MetaRobotFollow,
			ps.MetaRobotAdvanced,
			ps.BreadcrumbsTitle,

			t.Title as TitleTrans, 
			c.Name as CategoryName, 
			t.[Description] as DescriptionTrans, 
			t.Detail,
			t.Tag

			FROM [dbo].Post p, [dbo].PostTrans t, [dbo].Category c, [dbo].PostSEO ps
			WHERE p.Id = t.PostId
			AND p.CategoryId = c.Id
			AND p.Id = ps.PostId
			--AND p.[Status] = 1
			AND p.Id = @Id

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_Post_Paging]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_Post_Paging]
	@languageCode CHAR(3) = 'vi',
	@categoryId TINYINT = 0,
	@priority TINYINT = 1, 
	@pageIndex TINYINT = 1, 
	@numberInPage TINYINT = 10, 
	@Search nvarchar(250) = '',
	@totalItem int out
AS BEGIN
	BEGIN TRY
	SET NOCOUNT ON
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED

		IF @languageCode != '' AND @categoryId > 0
			IF @priority = 3
			BEGIN	----get new posts
				SELECT  *, ROW_NUMBER() OVER (ORDER BY PublishDate) AS RowNum INTO #tmpPost FROM (
					
				SELECT 
					p.Id, 
					p.CategoryId,
					p.PublishDate,
					P.[Image],
					P.Author,
					t.Title as TitleTran,
					t.Detail,
					t.[Description] as DescriptionTrans,
					c.Name AS CategoryName, 
					ws.Id AS WorkflowStateId,
					ws.Name AS WorkflowStateName,
					p.[Priority]
				FROM 
					[dbo].Post p, 
					[dbo].PostTrans t, 
					[dbo].Category c, 
					WorkflowState ws
				WHERE 
					p.Id = t.PostId
					AND p.CategoryId = c.Id
					AND p.WorkflowStateId = ws.Id
					AND WorkflowStateId = 3
					AND p.CategoryId = @categoryId
					AND ((t.Title like '%' + @Search + '%' OR  @Search is null OR @Search = '')
					OR (P.Author like N'%' + @Search +'%' OR  @Search is null OR @Search = ''))

				) as tmp
				

				set @totalItem = (SELECT count(*) FROM #tmpPost)
				SELECT  *
				FROM	#tmpPost
				WHERE   RowNum BETWEEN (@PageIndex - 1) * @numberInPage + 1
						AND @PageIndex * @numberInPage ;
			END
			ELSE	--- get posts order by priority
			BEGIN
				SELECT  *, ROW_NUMBER() OVER (ORDER BY PublishDate) AS RowNum INTO #tmppriorityPost FROM (
				SELECT 
					p.Id, 
					p.CategoryId,
					p.PublishDate,
					P.[Image],
					P.Author,
					t.Title as TitleTran,
					t.Detail,
					t.[Description] as DescriptionTrans,
					c.Name AS CategoryName, 
					ws.Id AS WorkflowStateId,
					ws.Name AS WorkflowStateName,
					p.[Priority]
				FROM 
					[dbo].Post p, 
					[dbo].PostTrans t, 
					[dbo].Category c, 
					WorkflowState ws
				WHERE 
					p.Id = t.PostId
					AND p.CategoryId = c.Id
					AND p.WorkflowStateId = ws.Id
					AND WorkflowStateId = 3
					AND p.CategoryId = @categoryId
					AND p.[Priority] = @priority
					AND ((t.Title like '%' + @Search + '%' OR  @Search is null OR @Search = '')
					OR (P.Author like N'%' + @Search +'%' OR  @Search is null OR @Search = ''))
				) as tmppriority
				set @totalItem = (SELECT count(*) FROM #tmppriorityPost)
				SELECT  *
				FROM	#tmppriorityPost
				WHERE   RowNum BETWEEN (@PageIndex - 1) * @numberInPage + 1
						AND @PageIndex * @numberInPage ;
			END
		ELSE
		BEGIN
		
			SELECT  *, ROW_NUMBER() OVER (ORDER BY PublishDate) AS RowNum INTO #tmpAllPost FROM (
					
				SELECT 
					p.Id, 
					p.CategoryId,
					p.PublishDate,
					P.[Image],
					P.Author,
					t.Title as TitleTran,
					t.Detail,
					t.[Description] as DescriptionTrans,
					c.Name AS CategoryName, 
					ws.Id AS WorkflowStateId,
					ws.Name AS WorkflowStateName,
					p.[Priority]
				FROM 
					[dbo].Post p, 
					[dbo].PostTrans t, 
					[dbo].Category c, 
					WorkflowState ws
				WHERE 
					p.Id = t.PostId
					AND p.CategoryId = c.Id
					AND p.WorkflowStateId = ws.Id
					AND WorkflowStateId = 3
					AND ((t.Title like '%' + @Search + '%' OR  @Search is null OR @Search = '')
					OR (P.Author like N'%' + @Search +'%' OR  @Search is null OR @Search = ''))

				) as tmp
				

				set @totalItem = (SELECT count(*) FROM #tmpAllPost)
				SELECT  *
				FROM	#tmpAllPost
				WHERE   RowNum BETWEEN (@PageIndex - 1) * @numberInPage + 1
						AND @PageIndex * @numberInPage ;
		END

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_Slider]...';


GO
CREATE PROC [dbo].[usp_spa_Slider]
	@Id TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Slider]
			WHERE [Id] = @Id
		ELSE
			SELECT * FROM [dbo].[Slider] WHERE ([IsUsed] = 1 AND [ExpiredDate]  >= convert(varchar(10), GETDATE(), 120)) AND [Image] <> '' 
			ORDER BY [Id]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Workflow]...';


GO
CREATE PROCEDURE [dbo].[usp_Workflow]
	@Id TINYINT
AS BEGIN
	BEGIN TRY
	IF(@Id > 0)
	BEGIN
		SELECT * FROM [dbo].[Workflow] WHERE [Id] = @ID
	END
	ELSE
	BEGIN
		SELECT * FROM [dbo].[Workflow]
	END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Workflow_CheckExistName]...';


GO
CREATE PROCEDURE [dbo].[usp_Workflow_CheckExistName]
	@Name  NVARCHAR(50),
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0;

	IF(@Id = 0)
	BEGIN
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Workflow] WHERE [Name] = @Name))
		BEGIN
			SET @return= 1
		END
	END
	ELSE
	BEGIN
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Workflow] WHERE [Name] = @Name and Id <> @Id))
		BEGIN
			SET @return= 1
		END
	END

	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Workflow_CheckIsUsed]...';


GO
CREATE PROCEDURE [dbo].[usp_Workflow_CheckIsUsed]
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0;
	IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[WorkflowState] WHERE WorkflowId = @Id))
		SET @return = 1

	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Workflow_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_Workflow_Transaction]
	@Action VARCHAR(1) = 'I',
	@Id TINYINT,
	@Name NVARCHAR(50)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return BIT = 1
	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I' -- INSERT
			BEGIN
				INSERT INTO [dbo].[Workflow]
				VALUES(@Name)
			END

			IF @Action = 'U' -- UPDATE
			BEGIN
				UPDATE [dbo].[Workflow]
				SET [Name] = @Name
				WHERE [Id] = @Id
			END

			IF @Action = 'D' -- DELETE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[WorkflowState] WITH(INDEX(idxWorkflowStateWorkflow)) WHERE [WorkflowId] = @Id)
				BEGIN
					DELETE FROM [dbo].[Workflow]
					WHERE [Id] = @Id
				END
				ELSE
					SET @return = 0
			END

		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_WorkflowNavigation]...';


GO
CREATE PROCEDURE [dbo].[usp_WorkflowNavigation]
	@WorkflowId smallint = 0
AS BEGIN
	BEGIN TRY
	IF(@WorkflowId > 0)
	BEGIN
		SELECT DISTINCT wfs.*
		FROM dbo.WorkflowState wf
		INNER JOIN dbo.WorkflowNavigation wfs ON wf.WorkflowId = @WorkflowId
	END
	ELSE
	BEGIN
		SELECT * FROM [dbo].[WorkflowNavigation]
	END
		
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_WorkflowNavigation_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_WorkflowNavigation_Transaction]
	@Action VARCHAR(1) = 'I',
	@WorkflowStateId SMALLINT,
	@NextWorkflowStateId SMALLINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return BIT = 1
	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I' -- INSERT
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[Post] WHERE [WorkflowStateId] = @WorkflowStateId)
				BEGIN
					DELETE FROM [dbo].[WorkflowNavigation] WHERE [WorkflowStateId] = @WorkflowStateId

					INSERT INTO [dbo].[WorkflowNavigation]
					VALUES(@WorkflowStateId, @NextWorkflowStateId)
				END
				ELSE
					SET @return = 0
			END
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_WorkflowState]...';


GO
CREATE PROCEDURE [dbo].[usp_WorkflowState]
	@Id SMALLINT,
	@WorkflowId TINYINT
AS BEGIN
	BEGIN TRY
		IF(@Id > 0) ---get 'WorkflowState' by Id
		BEGIN
			SELECT	wfs.*, wf.Name as WorkflowName
			FROM	[dbo].[WorkflowState] wfs
					INNER JOIN [dbo].[Workflow] wf on wf.Id = wfs.WorkflowId
			WHERE	wfs.Id = @Id
		END
		BEGIN       ---get 'WorkflowState' by workflowId
			IF(@WorkflowId > 0)
			BEGIN
				SELECT	wfs.*, wf.Name as WorkflowName
				FROM	[dbo].[WorkflowState] wfs
						INNER JOIN [dbo].[Workflow] wf on wf.Id = wfs.WorkflowId
				WHERE   wfs.WorkflowId = @WorkflowId
			END
			ELSE
			BEGIN
				SELECT	wfs.*, wf.Name as WorkflowName
				FROM	[dbo].[WorkflowState] wfs
						INNER JOIN [dbo].[Workflow] wf on wf.Id = wfs.WorkflowId
			END
		END

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_WorkflowState_CheckExistName]...';


GO
CREATE PROCEDURE [dbo].[usp_WorkflowState_CheckExistName]
	@Id SMALLINT,
	@Name NVARCHAR(50) = '',
	@WorkflowId TINYINT
AS
BEGIN
	DECLARE @return BIT = 0;

	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[WorkflowState] WHERE [Name] = @Name and [WorkflowId] = @WorkflowId))
			BEGIN
				SET @return = 1;
			END
	IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[WorkflowState] WHERE [Name] = @Name and [WorkflowId] = @WorkflowId and Id != @Id))
			BEGIN
				SET @return = 1;
			END
		
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_WorkflowState_CheckIsUsed]...';


GO
CREATE PROCEDURE [dbo].[usp_WorkflowState_CheckIsUsed]
	@Id SMALLINT
AS
BEGIN
	DECLARE @return BIT = 0;
	IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[WorkflowNavigation] WHERE [WorkflowStateId] = @Id or [NextWorkflowStateId] = @Id))
		SET @return = 1

	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_WorkflowState_Transaction]...';


GO
CREATE PROCEDURE [dbo].[usp_WorkflowState_Transaction]
	@Action VARCHAR(1) = 'I',
	@Id SMALLINT,
	@Name NVARCHAR(50) = '',
	@WorkflowId TINYINT = 0,
	@IsActive BIT = 1,
	@IsFirst BIT = 0
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return BIT = 1
	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I' -- INSERT
			BEGIN
				INSERT INTO [dbo].[WorkflowState]
				VALUES(@Name, @WorkflowId, @IsActive, @IsFirst)
				DECLARE @newId SMALLINT = SCOPE_IDENTITY()
				IF(@IsFirst = 1)
					UPDATE	[dbo].[WorkflowState]
					SET		[IsFirst] = 0
					WHERE	[Id] <> @newId and [WorkflowId] = @WorkflowId
			END

			IF @Action = 'U' -- UPDATE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[WorkflowNavigation] WHERE [WorkflowStateId] = @Id)  AND NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[Post] WHERE [WorkflowStateId] = @Id)
				BEGIN
					UPDATE [dbo].[WorkflowState]
					SET [Name] = @Name, [WorkflowId] = @WorkflowId, [IsActive] = @IsActive, [IsFirst] = @IsFirst
					WHERE [Id] = @Id

					IF(@IsFirst = 1)
						UPDATE	[dbo].[WorkflowState]
						SET		[IsFirst] = 0
						WHERE	[Id] <> @Id and [WorkflowId] = @WorkflowId
				END
				ELSE
					SET @return = 0
			END

			IF @Action = 'D' -- DELETE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[Post] WHERE [WorkflowStateId] = @Id)
				BEGIN
					DECLARE @wfId TINYINT = 0 
					---get workflowId by StateId
					SET @WorkflowId = (SELECT TOP 1 WorkflowId FROM [dbo].[WorkflowState] WHERE [Id] = @Id)
					---delete state
					DELETE FROM [dbo].[WorkflowState]
					WHERE [Id] = @Id

					---get all state by workflow Id
					IF(@wfId != 0)
					BEGIN
						IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[WorkflowState] WHERE [WorkflowId] = @wfId AND [IsFirst] = 1)
						BEGIN
							DECLARE @stateId SMALLINT = (SELECT TOP 1 Id FROM [dbo].[WorkflowState] WHERE [WorkflowId] = @wfId)
							
							---update First state that have WorkflowId
							UPDATE	[dbo].[WorkflowState]
							SET		[IsFirst] = 0
							WHERE	[Id] = @stateId
						END
					END

				END
				ELSE
					SET @return = 0
			END

		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_DefaultData_Exec]...';


GO


CREATE PROC [dbo].[usp_DefaultData_Exec]
AS
BEGIN
	EXEC usp_DefaultData_Insert
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dbc242c7-db6d-43ac-bf0c-1cead3121561')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dbc242c7-db6d-43ac-bf0c-1cead3121561')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7ca6bdbf-99e7-478b-a1f1-dffd2a3e77ba')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7ca6bdbf-99e7-478b-a1f1-dffd2a3e77ba')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a9f22813-918e-4223-a4b2-1234714bfdc2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a9f22813-918e-4223-a4b2-1234714bfdc2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '590e78a9-acf5-4749-8fc1-59532a4a07f8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('590e78a9-acf5-4749-8fc1-59532a4a07f8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '83127367-6a9f-4c84-b99e-e411428bd3be')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('83127367-6a9f-4c84-b99e-e411428bd3be')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f87a464a-608c-431e-a4c7-f4b092a93cd0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f87a464a-608c-431e-a4c7-f4b092a93cd0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '018a1622-59c2-47d9-a142-6425933c8b53')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('018a1622-59c2-47d9-a142-6425933c8b53')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[Workflow] WHERE Name = N'Workflow post')
BEGIN
	DECLARE @WorkflowId TINYINT = 0
	DECLARE @WorkflowStateId TINYINT = 0
	DECLARE @NextWorkflowStateId TINYINT = 0
	---------------
	INSERT INTO [dbo].Workflow
	VALUES(N'Workflow post')
	---------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đang soạn thảo')
		BEGIN
			SET @WorkflowId = SCOPE_IDENTITY()
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đang soạn thảo', @WorkflowId, 1, 1)

			SET @WorkflowStateId = SCOPE_IDENTITY()
		END
	---------------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đã duyệt')
		BEGIN
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đã duyệt', @WorkflowId, 1, 0)

			SET @WorkflowStateId = SCOPE_IDENTITY()
		END
	--------------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đã đăng bài')
		BEGIN
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đã đăng bài', @WorkflowId, 1, 0)

			SET @NextWorkflowStateId = SCOPE_IDENTITY()
		END
	----------------------
	IF @WorkflowStateId > 0 AND @NextWorkflowStateId > 0
		BEGIN
			INSERT INTO [dbo].WorkflowNavigation
			VALUES(@WorkflowStateId, @NextWorkflowStateId)
		END
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Trang chủ')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES(N'Trang chủ', '', '/', 1, 0)	
	END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Dịch vụ')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES(N'Dịch vụ', '', '#services', 2, 0)	
	END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Chuyên khoa')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES(N'Chuyên khoa', '', '#portfolio', 3, 0)	
	END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Giới thiệu')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES(N'Giới thiệu', '', '#about', 4, 0)	
	END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Tin tức')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES(N'Tin tức', '', '#blog', 5, 0)	
	END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Liên hệ')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES(N'Liên hệ', '', '#get-in-touch', 6, 0)	
	END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Tuyển dụng')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES(N'Tuyển dụng', '', '#career', 7, 0)	
	END
GO

--IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Language WHERE Code = 'vi')
--	BEGIN
--		INSERT INTO [dbo].Language
--		VALUES('vi', 'VietNam')	
--	END
--GO
GO

GO
PRINT N'Update complete.';


GO
