/*
Deployment script for HospitalCMS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCMS"
:setvar DefaultFilePrefix "HospitalCMS"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Creating [dbo].[Feature]...';


GO
CREATE TABLE [dbo].[Feature] (
    [Id]          TINYINT        IDENTITY (1, 1) NOT NULL,
    [Title]       NVARCHAR (50)  NOT NULL,
    [Image]       VARCHAR (256)  NOT NULL,
    [Description] NVARCHAR (256) NOT NULL,
    [Handler]     NVARCHAR (256) NOT NULL,
    [IsUsed]      BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Altering [dbo].[usp_Category]...';


GO
ALTER PROC [dbo].[usp_Category]
	@Id TINYINT,
	@ParentId TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Category]
			WHERE [Id] = @Id
			ORDER BY [Id]
		ELSE
		BEGIN
			IF @ParentId > 0
				SELECT * FROM [dbo].[Category]
				WHERE [ParentId] = @ParentId
				ORDER BY [Id]
			ELSE
				SELECT * FROM [dbo].[Category]
		END
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_Post]...';


GO
ALTER PROCEDURE [dbo].[usp_Post]
	@languageCode CHAR(3) = 'vi',
	@PostId INT = 0,
	@WorkflowStateId TINYINT = 1
	--@PageIndex int, 
	--@NumberPerPage int, 
	--@TotalRecordCount int out
AS BEGIN
	BEGIN TRY
		SET NOCOUNT ON
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED
		DECLARE @return BIT = 1;

		--IF @languageId > 0
		--	BEGIN
		--		SET @TotalRecordCount = (SELECT COUNT(Id)
		--		FROM [dbo].Post
		--		WHERE [Status] = 1)

		--		;WITH tmpData AS
		--		(
		--			SELECT t.Title, c.Name, p.PublishDate,
		--			ROW_NUMBER() OVER (ORDER BY p.Id) AS RowNum
		--			FROM [dbo].Post p, [dbo].PostTrans t, [dbo].Category c
		--			WHERE p.Id = t.PostId
		--			AND p.CategoryId = c.Id
		--			AND p.[Status] = 1
		--		)
		--		SELECT *
		--		FROM tmpData
		--		WHERE RowNum BETWEEN (@PageIndex - 1) * @NumberPerPage + 1
		--		AND @PageIndex * @NumberPerPage ;

		--		SET NOCOUNT OFF
		--	END
		--ELSE
		--	SET @return = 0

		IF @languageCode != '' AND @PostId = 0
			SELECT p.Id, t.Title, 
			c.Name AS CategoryName, 
			p.CategoryId,
			p.PublishDate,
			ws.Id AS WorkflowStateId,
			ws.Name AS WorkflowStateName
			FROM [dbo].Post p, [dbo].PostTrans t, [dbo].Category c, WorkflowState ws
			WHERE p.Id = t.PostId
			AND p.CategoryId = c.Id
			AND p.WorkflowStateId = ws.Id
			AND P.WorkflowStateId = @WorkflowStateId
		ELSE IF @languageCode = '' AND @PostId > 0
			SELECT p.Id, 
			p.[Image],
			p.PublishDate,
			p.Author, 
			p.WorkflowStateId,
			p.CategoryId,
			p.[Status],
			p.CreatedBy,
			p.ModifiedBy,
			p.[Priority],
			p.ExpiredDate,

			ps.Title as TitleSEO, 
			ps.[Description] as DescriptionSEO, 
			ps.Canonical,
			ps.MetaRobotIndex,
			ps.MetaRobotFollow,
			ps.MetaRobotAdvanced,

			t.Title as TitleTrans, 
			c.Name as CategoryName, 
			t.[Description] as DescriptionTrans, 
			t.Detail,
			t.Tag

			FROM [dbo].Post p, [dbo].PostTrans t, [dbo].Category c, [dbo].PostSEO ps
			WHERE p.Id = t.PostId
			AND p.CategoryId = c.Id
			AND p.Id = ps.PostId
			--AND p.[Status] = 1
			AND p.Id = @PostId
		ELSE
			SET @return = 0

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Feature]...';


GO
CREATE PROC [dbo].[usp_Feature]
	@Id TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Feature]
			WHERE [Id] = @Id
			ORDER BY [Id]
		ELSE
			SELECT * FROM [dbo].[Feature]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_Feature_CheckExistTitle]...';


GO
CREATE PROCEDURE [dbo].[usp_Feature_CheckExistTitle]
	@Title  NVARCHAR(50),
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0

	print @Id
	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Feature] WHERE [Title] = @Title))
			SET @return = 1
	ELSE
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Feature] WHERE [Title] = @Title and Id <> @Id))
			SET @return = 1
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_Feature_Transaction]...';


GO
CREATE PROC [dbo].[usp_Feature_Transaction](
	@Action CHAR(1) = 'I',
	@Id TINYINT = 1,
	@Title NVARCHAR(50) = '',
	@Image VARCHAR(256) = '',
	@Description NVARCHAR(256) = '',
	@Handler NVARCHAR(256) = '',
	@IsUsed BIT = 1
)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return bit = 1
	BEGIN TRY
		BEGIN TRAN;
		
		IF @Action = 'I' --INSERT
		BEGIN
			INSERT [dbo].[Feature] ([Title], [Image], [Description], [Handler], [IsUsed])
			VALUES(@Title, @Image, @Description, @Handler, @IsUsed)
		END

		IF @Action = 'U' --UPDATE
		BEGIN
			UPDATE [dbo].[Feature]
			SET [Title] = @Title, [Image] = @Image, [Description] = @Description, [Handler] = @Handler, [IsUsed] = @IsUsed
			WHERE [Id] = @Id  
		END

		IF @Action = 'D' --DELETE
		BEGIN
			DELETE FROM [dbo].[Feature]
			WHERE [Id] = @Id
		END

		COMMIT TRAN;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			ROLLBACK TRAN;
			SET  @return = 0
		END
	END CATCH
	SELECT @return
	
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[Workflow] WHERE Name = N'Workflow post')
BEGIN
	DECLARE @WorkflowId TINYINT = 0
	DECLARE @WorkflowStateId TINYINT = 0
	DECLARE @NextWorkflowStateId TINYINT = 0
	---------------
	INSERT INTO [dbo].Workflow
	VALUES(N'Workflow post')
	---------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đang soạn thảo')
		BEGIN
			SET @WorkflowId = SCOPE_IDENTITY()
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đang soạn thảo', @WorkflowId, 1, 1)

			SET @WorkflowStateId = SCOPE_IDENTITY()
		END
	---------------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đã duyệt')
		BEGIN
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đã duyệt', @WorkflowId, 1, 0)

			SET @WorkflowStateId = SCOPE_IDENTITY()
		END
	--------------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đã đăng bài')
		BEGIN
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đã đăng bài', @WorkflowId, 1, 0)

			SET @NextWorkflowStateId = SCOPE_IDENTITY()
		END
	----------------------
	IF @WorkflowStateId > 0 AND @NextWorkflowStateId > 0
		BEGIN
			INSERT INTO [dbo].WorkflowNavigation
			VALUES(@WorkflowStateId, @NextWorkflowStateId)
		END
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'About')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES('About', '', '', 1, 0)	
	END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Posts')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES('Posts', '', '', 1, 0)	
	END
GO


IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Language WHERE Code = 'vi')
	BEGIN
		INSERT INTO [dbo].Language
		VALUES('vi', 'VietNam')	
	END
GO

GO
PRINT N'Update complete.';


GO
