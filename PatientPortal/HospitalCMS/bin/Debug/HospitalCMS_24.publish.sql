/*
Deployment script for HospitalCMS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCMS"
:setvar DefaultFilePrefix "HospitalCMS"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Altering [dbo].[usp_Post]...';


GO
ALTER PROCEDURE [dbo].[usp_Post]
	@postId INT,
	@languageId TINYINT,
	@PageNumber INT,  
	@PageSize INT,  
	@SortExp VARCHAR(20),  
	@SearchText NVARCHAR(150)  
AS BEGIN
	BEGIN TRY
		IF @postId <> 0 AND @languageId <> 0
			BEGIN
				;WITH tmpData AS
				(
					SELECT ROW_NUMBER() OVER(ORDER BY CASE WHEN @SortExp = 't.Title_Asc'  
					THEN t.Title END ASC, CASE WHEN @SortExp = 't.Title_Desc'  
					THEN c.Name END DESC, CASE WHEN @SortExp = 'c.Name_Asc'  
					THEN c.Name END ASC, CASE WHEN @SortExp = 'c.Name_Desc'  
					THEN t.Title END ASC)[RowNo]
					FROM [dbo].Post p, [dbo].PostTrans t, [dbo].Category c
					WHERE p.Id = t.PostId
					AND c.Id = p.CategoryId
					AND p.[Status] = 1
					AND t.Title LIKE '%' + @SearchText + '%'
				)
				SELECT RowNo,  
				Id,  
				Title,  
				Name,  
				DiaChi,
				(SELECT COUNT(Id) FROM tmpData) AS TotalCount
				 FROM tmpData
				 WHERE RowNo BETWEEN (@PageNumber -1) * @PageSize + 1
				 AND @PageSize * @PageNumber
			END
		ELSE
			SELECT * FROM [dbo].Post WHERE [Id] = @postId
			SELECT * FROM [dbo].PostSEO WHERE [PostId] = @postId
			SELECT * FROM [dbo].PostTrans WHERE [PostId] = @postId AND [LanguageId] = @languageId
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_Workflow_Transaction]...';


GO
ALTER PROCEDURE [dbo].[usp_Workflow_Transaction]
	@Action VARCHAR(1) = 'I',
	@Id TINYINT,
	@Name NVARCHAR(50)
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	DECLARE @return BIT = 1
	BEGIN TRY
		BEGIN TRAN
			IF @Action = 'I' -- INSERT
			BEGIN
				INSERT INTO [dbo].[Workflow]
				VALUES(@Name)
			END

			IF @Action = 'U' -- UPDATE
			BEGIN
				UPDATE [dbo].[Workflow]
				SET [Name] = @Name
				WHERE [Id] = @Id
			END

			IF @Action = 'D' -- DELETE
			BEGIN
				IF NOT EXISTS( SELECT TOP 1 1 FROM [dbo].[WorkflowState] WITH(INDEX(idxWorkflowStateWorkflow)) WHERE [WorkflowId] = @Id)
				BEGIN
					DELETE FROM [dbo].[Workflow]
					WHERE [Id] = @Id
				END
				ELSE
					SET @return = 0
			END

		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				ROLLBACK TRAN
				SET @return = 0
			END
	END CATCH
	SELECT @return
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Update complete.';


GO
