/*
Deployment script for HospitalCMS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HospitalCMS"
:setvar DefaultFilePrefix "HospitalCMS"
:setvar DefaultDataPath "D:\MSSQL\DATA\"
:setvar DefaultLogPath "D:\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The column [dbo].[CMS].[Email] on table [dbo].[CMS] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[CMS].[OpeningHours] on table [dbo].[CMS] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[CMS])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Altering [dbo].[CMS]...';


GO
ALTER TABLE [dbo].[CMS]
    ADD [OpeningHours] VARCHAR (50)  NOT NULL,
        [Email]        VARCHAR (256) NOT NULL,
        [Youtube]      VARCHAR (256) NULL,
        [Twitter]      VARCHAR (256) NULL,
        [Facebook]     VARCHAR (256) NULL,
        [Google]       VARCHAR (256) NULL,
        [Slogan]       VARCHAR (256) NULL;


GO
PRINT N'Altering [dbo].[Post]...';


GO
ALTER TABLE [dbo].[Post] ALTER COLUMN [ExpiredDate] DATE NULL;


GO
PRINT N'Creating [dbo].[Gallery]...';


GO
CREATE TABLE [dbo].[Gallery] (
    [Id]           VARCHAR (128)  NOT NULL,
    [Title]        NVARCHAR (128) NOT NULL,
    [Description]  NVARCHAR (300) NOT NULL,
    [Highlight]    NVARCHAR (100) NOT NULL,
    [Img]          VARCHAR (256)  NOT NULL,
    [Date]         VARCHAR (20)   NOT NULL,
    [DepartmentId] TINYINT        NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[GalleryStore]...';


GO
CREATE TABLE [dbo].[GalleryStore] (
    [Id]       VARCHAR (128) NOT NULL,
    [ParentId] VARCHAR (128) NOT NULL,
    [Img]      VARCHAR (256) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FK_GalleryStore_Gallery]...';


GO
ALTER TABLE [dbo].[GalleryStore] WITH NOCHECK
    ADD CONSTRAINT [FK_GalleryStore_Gallery] FOREIGN KEY ([ParentId]) REFERENCES [dbo].[Gallery] ([Id]);


GO
PRINT N'Altering [dbo].[usp_Post]...';


GO
ALTER PROCEDURE [dbo].[usp_Post]
	@languageCode CHAR(3) = 'vi',
	@PostId INT = 0,
	@WorkflowStateId TINYINT = 1,
	@CategoryId  TINYINT = 0
	--@PageIndex int, 
	--@NumberPerPage int, 
	--@TotalRecordCount int out
AS BEGIN
	BEGIN TRY
		SET NOCOUNT ON
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED
		DECLARE @return BIT = 1;

		IF @languageCode != '' AND @PostId = 0
			IF @CategoryId = 0
				SELECT p.Id, t.Title, 
				c.Name AS CategoryName, 
				p.CategoryId,
				p.PublishDate,
				ws.Id AS WorkflowStateId,
				ws.Name AS WorkflowStateName
				FROM [dbo].Post p, [dbo].PostTrans t, [dbo].Category c, WorkflowState ws
				WHERE p.Id = t.PostId
				AND p.CategoryId = c.Id
				AND p.WorkflowStateId = ws.Id
				AND P.WorkflowStateId = @WorkflowStateId
			ELSE
				SELECT p.Id, t.Title, 
				c.Name AS CategoryName, 
				p.CategoryId,
				p.PublishDate,
				ws.Id AS WorkflowStateId,
				ws.Name AS WorkflowStateName
				FROM [dbo].Post p, [dbo].PostTrans t, [dbo].Category c, WorkflowState ws
				WHERE p.Id = t.PostId
				AND p.CategoryId = c.Id AND p.CategoryId = @CategoryId
				AND p.WorkflowStateId = ws.Id
				AND P.WorkflowStateId = @WorkflowStateId
		ELSE IF @languageCode = '' AND @PostId > 0
			SELECT p.Id, 
			p.[Image],
			p.PublishDate,
			p.Author, 
			p.WorkflowStateId,
			p.CategoryId,
			p.[Status],
			p.CreatedBy,
			p.ModifiedBy,
			p.[Priority],
			p.ExpiredDate,

			ps.Title as TitleSEO, 
			ps.[Description] as DescriptionSEO, 
			ps.Canonical,
			ps.MetaRobotIndex,
			ps.MetaRobotFollow,
			ps.MetaRobotAdvanced,

			t.Title as TitleTrans, 
			c.Name as CategoryName, 
			t.[Description] as DescriptionTrans, 
			t.Detail,
			t.Tag

			FROM [dbo].Post p, [dbo].PostTrans t, [dbo].Category c, [dbo].PostSEO ps
			WHERE p.Id = t.PostId
			AND p.CategoryId = c.Id
			AND p.Id = ps.PostId
			--AND p.[Status] = 1
			AND p.Id = @PostId
		ELSE
			SET @return = 0

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_spa_Post]...';


GO
ALTER PROCEDURE [dbo].[usp_spa_Post]
	@languageCode CHAR(3) = 'vi',
	@categoryId TINYINT = 0,
	@numTop TINYINT = 1,
	@priority TINYINT = 1
AS BEGIN
	BEGIN TRY
	SET NOCOUNT ON
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED

		IF @languageCode != '' AND @categoryId > 0
			IF @priority = 3
			BEGIN	----get new posts
				
				SELECT TOP (@numTop)
					p.Id, 
					p.CategoryId,
					p.PublishDate,
					P.[Image],
					P.Author,
					t.Title as TitleTran,
					t.Detail,
					t.[Description] as DescriptionTrans,
					c.Name AS CategoryName, 
					ws.Id AS WorkflowStateId,
					ws.Name AS WorkflowStateName,
					p.[Priority]
				FROM 
					[dbo].Post p, 
					[dbo].PostTrans t, 
					[dbo].Category c, 
					WorkflowState ws
				WHERE 
					p.Id = t.PostId
					AND p.CategoryId = c.Id
					AND p.WorkflowStateId = ws.Id
					AND WorkflowStateId = 3
					AND p.CategoryId = @categoryId
				ORDER BY p.PublishDate DESC
			END
			ELSE	--- get posts order by priority
			BEGIN
				SELECT TOP (@numTop)
					p.Id, 
					p.CategoryId,
					p.PublishDate,
					P.[Image],
					P.Author,
					t.Title as TitleTran,
					t.Detail,
					t.[Description] as DescriptionTrans,
					c.Name AS CategoryName, 
					ws.Id AS WorkflowStateId,
					ws.Name AS WorkflowStateName,
					p.[Priority]
				FROM 
					[dbo].Post p, 
					[dbo].PostTrans t, 
					[dbo].Category c, 
					WorkflowState ws
				WHERE 
					p.Id = t.PostId
					AND p.CategoryId = c.Id
					AND p.WorkflowStateId = ws.Id
					AND WorkflowStateId = 3
					AND p.CategoryId = @categoryId
					AND p.[Priority] = @priority
				ORDER BY p.PublishDate DESC
			END
		ELSE
			RETURN NULL

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_spa_Post_ById]...';


GO
ALTER PROCEDURE [dbo].[usp_spa_Post_ById]
	@Id int
AS
BEGIN
	BEGIN TRY
	SET NOCOUNT ON
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED

		SELECT p.Id, 
			p.[Image],
			p.PublishDate,
			p.Author, 
			p.WorkflowStateId,
			p.CategoryId,
			p.[Status],
			p.CreatedBy,
			p.ModifiedBy,
			p.[Priority],
			p.ExpiredDate,
			p.[Type],

			ps.Title as TitleSEO, 
			ps.[Description] as DescriptionSEO, 
			ps.Canonical,
			ps.MetaRobotIndex,
			ps.MetaRobotFollow,
			ps.MetaRobotAdvanced,

			t.Title as TitleTrans, 
			c.Name as CategoryName, 
			t.[Description] as DescriptionTrans, 
			t.Detail,
			t.Tag

			FROM [dbo].Post p, [dbo].PostTrans t, [dbo].Category c, [dbo].PostSEO ps
			WHERE p.Id = t.PostId
			AND p.CategoryId = c.Id
			AND p.Id = ps.PostId
			--AND p.[Status] = 1
			AND p.Id = @Id

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_Advertise_CheckExistName]...';


GO
ALTER PROCEDURE [dbo].[usp_Advertise_CheckExistName]
	@Name  NVARCHAR(50),
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0

	print @Id
	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Advertise] WHERE [Name] = @Name))
			SET @return = 1
	IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Advertise] WHERE [Name] = @Name and Id <> @Id))
			SET @return = 1
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_Category_CheckExistName]...';


GO
ALTER PROCEDURE [dbo].[usp_Category_CheckExistName]
	@Name  NVARCHAR(50),
	@Id TINYINT
AS
BEGIN
	DECLARE @return BIT = 0

	print @Id
	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Category] WHERE [Name] = @Name))
			SET @return = 1
	IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[Category] WHERE [Name] = @Name and Id <> @Id))
			SET @return = 1
	SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_LinkBuilding_CheckExistTitle]...';


GO
ALTER PROCEDURE [dbo].[usp_LinkBuilding_CheckExistTitle]
	@Title  NVARCHAR(150),
	@Id SMALLINT
AS
BEGIN
	DECLARE @return BIT = 0;
	IF(@Id = 0)
	BEGIN
		IF(EXISTS(SELECT	TOP 1 1
					  FROM		[dbo].[LinkBuilding]
					  WHERE		[Title] = @Title))
			SET @return =1
	END
	IF(EXISTS(SELECT	TOP 1 1
					  FROM		[dbo].[LinkBuilding]
					  WHERE		[Title] = @Title and Id != @Id))
			SET @return =1
SELECT @return
END
GO
PRINT N'Altering [dbo].[usp_spa_Advertise]...';


GO
ALTER PROCEDURE [dbo].[usp_spa_Advertise]
	@Id TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Advertise]
			WHERE [Id] = @Id
		ELSE
			SELECT	* 
			FROM [dbo].[Advertise]
			WHERE	EndDate >= GETDATE()
			ORDER BY [Id]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_spa_Slider]...';


GO
ALTER PROC [dbo].[usp_spa_Slider]
	@Id TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @Id > 0
			SELECT * FROM [dbo].[Slider]
			WHERE [Id] = @Id
		ELSE
			SELECT * FROM [dbo].[Slider] WHERE ([IsUsed] = 1 AND [ExpiredDate]  >= convert(varchar(10), GETDATE(), 120)) AND [Image] <> '' 
			ORDER BY [Id]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Altering [dbo].[usp_WorkflowState_CheckExistName]...';


GO
ALTER PROCEDURE [dbo].[usp_WorkflowState_CheckExistName]
	@Id SMALLINT,
	@Name NVARCHAR(50) = '',
	@WorkflowId TINYINT
AS
BEGIN
	DECLARE @return BIT = 0;

	IF(@Id = 0)
		IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[WorkflowState] WHERE [Name] = @Name and [WorkflowId] = @WorkflowId))
			BEGIN
				SET @return = 1;
			END
	IF(EXISTS(SELECT TOP 1 1 FROM [dbo].[WorkflowState] WHERE [Name] = @Name and [WorkflowId] = @WorkflowId and Id != @Id))
			BEGIN
				SET @return = 1;
			END
		
	SELECT @return
END
GO
PRINT N'Creating [dbo].[usp_spa_Category]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_Category]
	@ParentId TINYINT
AS BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY
		IF @ParentId > 0
			SELECT * FROM [dbo].[Category]
			WHERE [ParentId] = @ParentId
			ORDER BY [Id]
		ELSE
			SELECT * FROM [dbo].[Category]
			ORDER BY [Id]
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0 
		BEGIN
			RETURN NULL
		END
	END CATCH
END
GO
PRINT N'Creating [dbo].[usp_spa_Post_Paging]...';


GO
CREATE PROCEDURE [dbo].[usp_spa_Post_Paging]
	@languageCode CHAR(3) = 'vi',
	@categoryId TINYINT = 0,
	@priority TINYINT = 1, 
	@pageIndex TINYINT = 1, 
	@numberInPage TINYINT = 10, 
	@Search nvarchar(250) = '',
	@totalItem int out
AS BEGIN
	BEGIN TRY
	SET NOCOUNT ON
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED

		IF @languageCode != '' AND @categoryId > 0
			IF @priority = 3
			BEGIN	----get new posts
				SELECT  *, ROW_NUMBER() OVER (ORDER BY PublishDate) AS RowNum INTO #tmpPost FROM (
					
				SELECT 
					p.Id, 
					p.CategoryId,
					p.PublishDate,
					P.[Image],
					P.Author,
					t.Title as TitleTran,
					t.Detail,
					t.[Description] as DescriptionTrans,
					c.Name AS CategoryName, 
					ws.Id AS WorkflowStateId,
					ws.Name AS WorkflowStateName,
					p.[Priority]
				FROM 
					[dbo].Post p, 
					[dbo].PostTrans t, 
					[dbo].Category c, 
					WorkflowState ws
				WHERE 
					p.Id = t.PostId
					AND p.CategoryId = c.Id
					AND p.WorkflowStateId = ws.Id
					AND WorkflowStateId = 3
					AND p.CategoryId = @categoryId
					AND (t.Title like '%' + @Search + '%' OR @Search is null)
					AND (P.Author like '%' + @Search + '%' OR @Search is null)

				) as tmp
				

				set @totalItem = (SELECT count(*) FROM #tmpPost)
				SELECT  *
				FROM	#tmpPost
				WHERE   RowNum BETWEEN (@PageIndex - 1) * @numberInPage + 1
						AND @PageIndex * @numberInPage ;
			END
			ELSE	--- get posts order by priority
			BEGIN
				SELECT  *, ROW_NUMBER() OVER (ORDER BY PublishDate) AS RowNum INTO #tmppriorityPost FROM (
				SELECT 
					p.Id, 
					p.CategoryId,
					p.PublishDate,
					P.[Image],
					P.Author,
					t.Title as TitleTran,
					t.Detail,
					t.[Description] as DescriptionTrans,
					c.Name AS CategoryName, 
					ws.Id AS WorkflowStateId,
					ws.Name AS WorkflowStateName,
					p.[Priority]
				FROM 
					[dbo].Post p, 
					[dbo].PostTrans t, 
					[dbo].Category c, 
					WorkflowState ws
				WHERE 
					p.Id = t.PostId
					AND p.CategoryId = c.Id
					AND p.WorkflowStateId = ws.Id
					AND WorkflowStateId = 3
					AND p.CategoryId = @categoryId
					AND p.[Priority] = @priority
					AND (t.Title like '%' + @Search + '%' OR @Search is null)
					AND (P.Author like '%' + @Search + '%' OR @Search is null)
				) as tmppriority
				set @totalItem = (SELECT count(*) FROM #tmppriorityPost)
				SELECT  *
				FROM	#tmppriorityPost
				WHERE   RowNum BETWEEN (@PageIndex - 1) * @numberInPage + 1
						AND @PageIndex * @numberInPage ;
			END
		ELSE
			RETURN NULL

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT <> 0
			BEGIN
				RETURN NULL
			END
	END CATCH
END
GO
PRINT N'Refreshing [dbo].[usp_Configuration]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Configuration]';


GO
PRINT N'Refreshing [dbo].[usp_Configuration_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Configuration_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_spa_CMSConfig]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_spa_CMSConfig]';


GO
PRINT N'Refreshing [dbo].[usp_ApprovePost_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_ApprovePost_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_Category_CheckIsUsed]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Category_CheckIsUsed]';


GO
PRINT N'Refreshing [dbo].[usp_Category_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Category_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_Language_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Language_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_Post_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Post_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_PublishPost_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_PublishPost_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_WorkflowNavigation_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_WorkflowNavigation_Transaction]';


GO
PRINT N'Refreshing [dbo].[usp_WorkflowState_Transaction]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_WorkflowState_Transaction]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[Workflow] WHERE Name = N'Workflow post')
BEGIN
	DECLARE @WorkflowId TINYINT = 0
	DECLARE @WorkflowStateId TINYINT = 0
	DECLARE @NextWorkflowStateId TINYINT = 0
	---------------
	INSERT INTO [dbo].Workflow
	VALUES(N'Workflow post')
	---------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đang soạn thảo')
		BEGIN
			SET @WorkflowId = SCOPE_IDENTITY()
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đang soạn thảo', @WorkflowId, 1, 1)

			SET @WorkflowStateId = SCOPE_IDENTITY()
		END
	---------------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đã duyệt')
		BEGIN
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đã duyệt', @WorkflowId, 1, 0)

			SET @WorkflowStateId = SCOPE_IDENTITY()
		END
	--------------
	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].WorkflowState WHERE Name = N'Đã đăng bài')
		BEGIN
			INSERT INTO [dbo].WorkflowState
			VALUES(N'Đã đăng bài', @WorkflowId, 1, 0)

			SET @NextWorkflowStateId = SCOPE_IDENTITY()
		END
	----------------------
	IF @WorkflowStateId > 0 AND @NextWorkflowStateId > 0
		BEGIN
			INSERT INTO [dbo].WorkflowNavigation
			VALUES(@WorkflowStateId, @NextWorkflowStateId)
		END
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Trang chủ')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES(N'Trang chủ', '', '/', 1, 0)	
	END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Dịch vụ')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES(N'Dịch vụ', '', '#services', 2, 0)	
	END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Chuyên khoa')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES(N'Chuyên khoa', '', '#portfolio', 3, 0)	
	END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Giới thiệu')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES(N'Giới thiệu', '', '#about', 4, 0)	
	END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Tin tức')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES(N'Tin tức', '', '#blog', 5, 0)	
	END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Category WHERE Name = N'Liên hệ')
	BEGIN
		INSERT INTO [dbo].Category
		VALUES(N'Liên hệ', '', '#get-in-touch', 6, 0)	
	END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].Language WHERE Code = 'vi')
	BEGIN
		INSERT INTO [dbo].Language
		VALUES('vi', 'VietNam')	
	END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[GalleryStore] WITH CHECK CHECK CONSTRAINT [FK_GalleryStore_Gallery];


GO
PRINT N'Update complete.';


GO
